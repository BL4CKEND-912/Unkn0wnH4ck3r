// dear imgui, v1.63
// (demo code)

// Message to the person tempted to delete this file when integrating ImGui into their code base:
// Don't do it! Do NOT remove this file from your project! It is useful reference code that you and other users will want to refer to.
// Everything in this file will be stripped out by the linker if you don't call ImGui::ShowDemoWindow().
// During development, you can call ImGui::ShowDemoWindow() in your code to learn about various features of ImGui. Have it wired in a debug menu!
// Removing this file from your project is hindering access to documentation for everyone in your team, likely leading you to poorer usage of the library.
// Note that you can #define IMGUI_DISABLE_DEMO_WINDOWS in imconfig.h for the same effect.
// If you want to link core ImGui in your final builds but not those demo windows, #define IMGUI_DISABLE_DEMO_WINDOWS in imconfig.h and those functions will be empty.
// In other situation, when you have ImGui available you probably want this to be available for reference and execution.
// Thank you,
// -Your beloved friend, imgui_demo.cpp (that you won't delete)

// Message to beginner C/C++ programmers about the meaning of the 'static' keyword: in this demo code, we frequently we use 'static' variables inside functions.
// A static variable persist across calls, so it is essentially like a global variable but declared inside the scope of the function.
// We do this as a way to gather code and data in the same place, just to make the demo code faster to read, faster to write, and use less code.
// It also happens to be a convenient way of storing simple UI related information as long as your function doesn't need to be reentrant or used in threads.
// This might be a pattern you occasionally want to use in your code, but most of the real data you would be editing is likely to be stored outside your functions.

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#include <ctype.h>          // toupper, isprint
#include <limits.h>         // INT_MIN, INT_MAX
#include <math.h>           // sqrtf, powf, cosf, sinf, floorf, ceilf
#include <stdio.h>          // vsnprintf, sscanf, printf
#include <stdlib.h>         // NULL, malloc, free, atoi
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>         // intptr_t
#else
#include <stdint.h>         // intptr_t
#endif

#ifdef _MSC_VER
#pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#define vsnprintf _vsnprintf
#endif
#ifdef __clang__
#pragma clang diagnostic ignored "-Wold-style-cast"             // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wdeprecated-declarations"    // warning : 'xx' is deprecated: The POSIX name for this item.. // for strdup used in demo code (so user can copy & paste the code)
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"   // warning : cast to 'void *' from smaller integer type 'int'
#pragma clang diagnostic ignored "-Wformat-security"            // warning : warning: format string is not a string literal
#pragma clang diagnostic ignored "-Wexit-time-destructors"      // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#if __has_warning("-Wreserved-id-macro")
#pragma clang diagnostic ignored "-Wreserved-id-macro"          // warning : macro name is a reserved identifier                //
#endif
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"          // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat-security"              // warning : format string is not a string literal (potentially insecure)
#pragma GCC diagnostic ignored "-Wdouble-promotion"             // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"                   // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#if (__GNUC__ >= 6)
#pragma GCC diagnostic ignored "-Wmisleading-indentation"       // warning: this 'if' clause does not guard this statement      // GCC 6.0+ only. See #883 on GitHub.
#endif
#endif

// Play it nice with Windows users. Notepad in 2017 still doesn't display text data with Unix-style \n.
#ifdef _WIN32
#define IM_NEWLINE "\r\n"
#else
#define IM_NEWLINE "\n"
#endif

#define IM_MAX(_A,_B)       (((_A) >= (_B)) ? (_A) : (_B))

//-----------------------------------------------------------------------------
// DEMO CODE
//-----------------------------------------------------------------------------

#if !defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS) && defined(IMGUI_DISABLE_TEST_WINDOWS) && !defined(IMGUI_DISABLE_DEMO_WINDOWS)   // Obsolete name since 1.53, TEST->DEMO
#define IMGUI_DISABLE_DEMO_WINDOWS
#endif

#if !defined(IMGUI_DISABLE_DEMO_WINDOWS)

// Forward Declarations
static void ShowExampleAppMainMenuBar();
static void ShowExampleAppConsole(bool* p_open);
static void ShowExampleAppLog(bool* p_open);
static void ShowExampleAppLayout(bool* p_open);
static void ShowExampleAppPropertyEditor(bool* p_open);
static void ShowExampleAppLongText(bool* p_open);
static void ShowExampleAppAutoResize(bool* p_open);
static void ShowExampleAppConstrainedResize(bool* p_open);
static void ShowExampleAppSimpleOverlay(bool* p_open);
static void ShowExampleAppWindowTitles(bool* p_open);
static void ShowExampleAppCustomRendering(bool* p_open);
static void ShowExampleMenuFile();

// Helper to display a little (?) mark which shows a tooltip when hovered.
static void ShowHelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

// Helper to display basic user controls.
void ImGui::ShowUserGuide()
{
    ImGui::BulletText("Double-click on title bar to collapse window.");
    ImGui::BulletText("Click and drag on lower right corner to resize window\n(double-click to auto fit window to its contents).");
    ImGui::BulletText("Click and drag on any empty space to move window.");
    ImGui::BulletText("TAB/SHIFT+TAB to cycle through keyboard editable fields.");
    ImGui::BulletText("CTRL+Click on a slider or drag box to input value as text.");
    if (ImGui::GetIO().FontAllowUserScaling)
        ImGui::BulletText("CTRL+Mouse Wheel to zoom window contents.");
    ImGui::BulletText("Mouse Wheel to scroll.");
    ImGui::BulletText("While editing text:\n");
    ImGui::Indent();
    ImGui::BulletText("Hold SHIFT or use mouse to select text.");
    ImGui::BulletText("CTRL+Left/Right to word jump.");
    ImGui::BulletText("CTRL+A or double-click to select all.");
    ImGui::BulletText("CTRL+X,CTRL+C,CTRL+V to use clipboard.");
    ImGui::BulletText("CTRL+Z,CTRL+Y to undo/redo.");
    ImGui::BulletText("ESCAPE to revert.");
    ImGui::BulletText("You can apply arithmetic operators +,*,/ on numerical values.\nUse +- to subtract.");
    ImGui::Unindent();
}

// Demonstrate most Dear ImGui features (this is big function!)
// You may execute this function to experiment with the UI and understand what it does. You may then search for keywords in the code when you are interested by a specific feature.
void ImGui::ShowDemoWindow(bool* p_open)
{
    // Examples Apps (accessible from the "Examples" menu)
    static bool show_app_main_menu_bar = false;
    static bool show_app_console = false;
    static bool show_app_log = false;
    static bool show_app_layout = false;
    static bool show_app_property_editor = false;
    static bool show_app_long_text = false;
    static bool show_app_auto_resize = false;
    static bool show_app_constrained_resize = false;
    static bool show_app_simple_overlay = false;
    static bool show_app_window_titles = false;
    static bool show_app_custom_rendering = false;

    if (show_app_main_menu_bar)       ShowExampleAppMainMenuBar();
    if (show_app_console)             ShowExampleAppConsole(&show_app_console);
    if (show_app_log)                 ShowExampleAppLog(&show_app_log);
    if (show_app_layout)              ShowExampleAppLayout(&show_app_layout);
    if (show_app_property_editor)     ShowExampleAppPropertyEditor(&show_app_property_editor);
    if (show_app_long_text)           ShowExampleAppLongText(&show_app_long_text);
    if (show_app_auto_resize)         ShowExampleAppAutoResize(&show_app_auto_resize);
    if (show_app_constrained_resize)  ShowExampleAppConstrainedResize(&show_app_constrained_resize);
    if (show_app_simple_overlay)      ShowExampleAppSimpleOverlay(&show_app_simple_overlay);
    if (show_app_window_titles)       ShowExampleAppWindowTitles(&show_app_window_titles);
    if (show_app_custom_rendering)    ShowExampleAppCustomRendering(&show_app_custom_rendering);

    // Dear ImGui Apps (accessible from the "Help" menu)
    static bool show_app_metrics = false;
    static bool show_app_style_editor = false;
    static bool show_app_about = false;

    if (show_app_metrics)             { ImGui::ShowMetricsWindow(&show_app_metrics); }
    if (show_app_style_editor)        { ImGui::Begin("Style Editor", &show_app_style_editor); ImGui::ShowStyleEditor(); ImGui::End(); }
    if (show_app_about)
    {
        ImGui::Begin("About Dear ImGui", &show_app_about, ImGuiWindowFlags_AlwaysAutoResize);
        ImGui::Text("Dear ImGui, %s", ImGui::GetVersion());
        ImGui::Separator();
        ImGui::Text("By Omar Cornut and all dear imgui contributors.");
        ImGui::Text("Dear ImGui is licensed under the MIT License, see LICENSE for more information.");
        ImGui::End();
    }

    // Demonstrate the various window flags. Typically you would just use the default!
    static bool no_titlebar = false;
    static bool no_scrollbar = false;
    static bool no_menu = false;
    static bool no_move = false;
    static bool no_resize = false;
    static bool no_collapse = false;
    static bool no_close = false;
    static bool no_nav = false;

    ImGuiWindowFlags window_flags = 0;
    if (no_titlebar)  window_flags |= ImGuiWindowFlags_NoTitleBar;
    if (no_scrollbar) window_flags |= ImGuiWindowFlags_NoScrollbar;
    if (!no_menu)     window_flags |= ImGuiWindowFlags_MenuBar;
    if (no_move)      window_flags |= ImGuiWindowFlags_NoMove;
    if (no_resize)    window_flags |= ImGuiWindowFlags_NoResize;
    if (no_collapse)  window_flags |= ImGuiWindowFlags_NoCollapse;
    if (no_nav)       window_flags |= ImGuiWindowFlags_NoNav;
    if (no_close)     p_open = NULL; // Don't pass our bool* to Begin

    // We specify a default position/size in case there's no data in the .ini file. Typically this isn't required! We only do it to make the Demo applications a little more welcoming.
    ImGui::SetNextWindowPos(ImVec2(650, 20), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(550, 680), ImGuiCond_FirstUseEver);

    // Main body of the Demo window starts here.
    if (!ImGui::Begin("ImGui Demo", p_open, window_flags))
    {
        // Early out if the window is collapsed, as an optimization.
        ImGui::End();
        return;
    }
    ImGui::Text("dear imgui says hello. (%s)", IMGUI_VERSION);

    // Most "big" widgets share a common width settings by default.
    //ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.65f);    // Use 2/3 of the space for widgets and 1/3 for labels (default)
    ImGui::PushItemWidth(ImGui::GetFontSize() * -12);           // Use fixed width for labels (by passing a negative value), the rest goes to widgets. We choose a width proportional to our font size.

    // Menu
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Menu"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Examples"))
        {
            ImGui::MenuItem("Main menu bar", NULL, &show_app_main_menu_bar);
            ImGui::MenuItem("Console", NULL, &show_app_console);
            ImGui::MenuItem("Log", NULL, &show_app_log);
            ImGui::MenuItem("Simple layout", NULL, &show_app_layout);
            ImGui::MenuItem("Property editor", NULL, &show_app_property_editor);
            ImGui::MenuItem("Long text display", NULL, &show_app_long_text);
            ImGui::MenuItem("Auto-resizing window", NULL, &show_app_auto_resize);
            ImGui::MenuItem("Constrained-resizing window", NULL, &show_app_constrained_resize);
            ImGui::MenuItem("Simple overlay", NULL, &show_app_simple_overlay);
            ImGui::MenuItem("Manipulating window titles", NULL, &show_app_window_titles);
            ImGui::MenuItem("Custom rendering", NULL, &show_app_custom_rendering);
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Help"))
        {
            ImGui::MenuItem("Metrics", NULL, &show_app_metrics);
            ImGui::MenuItem("Style Editor", NULL, &show_app_style_editor);
            ImGui::MenuItem("About Dear ImGui", NULL, &show_app_about);
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }

    ImGui::Spacing();
    if (ImGui::CollapsingHeader("Help"))
    {
        ImGui::TextWrapped("This window is being created by the ShowDemoWindow() function. Please refer to the code in imgui_demo.cpp for reference.\n\n");
        ImGui::Text("USER GUIDE:");
        ImGui::ShowUserGuide();
    }

    if (ImGui::CollapsingHeader("Window options"))
    {
        ImGui::Checkbox("No titlebar", &no_titlebar); ImGui::SameLine(150);
        ImGui::Checkbox("No scrollbar", &no_scrollbar); ImGui::SameLine(300);
        ImGui::Checkbox("No menu", &no_menu);
        ImGui::Checkbox("No move", &no_move); ImGui::SameLine(150);
        ImGui::Checkbox("No resize", &no_resize); ImGui::SameLine(300);
        ImGui::Checkbox("No collapse", &no_collapse);
        ImGui::Checkbox("No close", &no_close); ImGui::SameLine(150);
        ImGui::Checkbox("No nav", &no_nav);

        if (ImGui::TreeNode("Style"))
        {
            ImGui::ShowStyleEditor();
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Capture/Logging"))
        {
            ImGui::TextWrapped("The logging API redirects all text output so you can easily capture the content of a window or a block. Tree nodes can be automatically expanded. You can also call ImGui::LogText() to output directly to the log without a visual output.");
            ImGui::LogButtons();
            ImGui::TreePop();
        }
    }

    if (ImGui::CollapsingHeader("Widgets"))
    {
        if (ImGui::TreeNode("Basic"))
        {
            static int clicked = 0;
            if (ImGui::Button("Button"))
                clicked++;
            if (clicked & 1)
            {
                ImGui::SameLine();
                ImGui::Text("Thanks for clicking me!");
            }

            static bool check = true;
            ImGui::Checkbox("checkbox", &check);

            static int e = 0;
            ImGui::RadioButton("radio a", &e, 0); ImGui::SameLine();
            ImGui::RadioButton("radio b", &e, 1); ImGui::SameLine();
            ImGui::RadioButton("radio c", &e, 2);

            // Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.
            for (int i = 0; i < 7; i++)
            {
                if (i > 0) ImGui::SameLine();
                ImGui::PushID(i);
                ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(i/7.0f, 0.6f, 0.6f));
                ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(i/7.0f, 0.7f, 0.7f));
                ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(i/7.0f, 0.8f, 0.8f));
                ImGui::Button("Click");
                ImGui::PopStyleColor(3);
                ImGui::PopID();
            }

            // Arrow buttons
            static int counter = 0;
            float spacing = ImGui::GetStyle().ItemInnerSpacing.x;
            ImGui::PushButtonRepeat(true);
            if (ImGui::ArrowButton("##left", ImGuiDir_Left)) { counter--; }
            ImGui::SameLine(0.0f, spacing);
            if (ImGui::ArrowButton("##right", ImGuiDir_Right)) { counter++; }
            ImGui::PopButtonRepeat();
            ImGui::SameLine();
            ImGui::Text("%d", counter);

            ImGui::Text("Hover over me");
            if (ImGui::IsItemHovered())
                ImGui::SetTooltip("I am a tooltip");

            ImGui::SameLine();
            ImGui::Text("- or me");
            if (ImGui::IsItemHovered())
            {
                ImGui::BeginTooltip();
                ImGui::Text("I am a fancy tooltip");
                static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
                ImGui::PlotLines("Curve", arr, IM_ARRAYSIZE(arr));
                ImGui::EndTooltip();
            }

            ImGui::Separator();

            ImGui::LabelText("label", "Value");

            {
                // Using the _simplified_ one-liner Combo() api here
                // See "Combo" section for examples of how to use the more complete BeginCombo()/EndCombo() api.
                const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };
                static int item_current = 0;
                ImGui::Combo("combo", &item_current, items, IM_ARRAYSIZE(items));
                ImGui::SameLine(); ShowHelpMarker("Refer to the \"Combo\" section below for an explanation of the full BeginCombo/EndCombo API, and demonstration of various flags.\n");
            }

            {
                static char str0[128] = "Hello, world!";
                static int i0 = 123;
                ImGui::InputText("input text", str0, IM_ARRAYSIZE(str0));
                ImGui::SameLine(); ShowHelpMarker("USER:\nHold SHIFT or use mouse to select text.\n" "CTRL+Left/Right to word jump.\n" "CTRL+A or double-click to select all.\n" "CTRL+X,CTRL+C,CTRL+V clipboard.\n" "CTRL+Z,CTRL+Y undo/redo.\n" "ESCAPE to revert.\n\nPROGRAMMER:\nYou can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputText() to a dynamic string type. See misc/stl/imgui_stl.h for an example (this is not demonstrated in imgui_demo.cpp).");

                ImGui::InputInt("input int", &i0);
                ImGui::SameLine(); ShowHelpMarker("You can apply arithmetic operators +,*,/ on numerical values.\n  e.g. [ 100 ], input \'*2\', result becomes [ 200 ]\nUse +- to subtract.\n");

                static float f0 = 0.001f;
                ImGui::InputFloat("input float", &f0, 0.01f, 1.0f);

                static double d0 = 999999.00000001;
                ImGui::InputDouble("input double", &d0, 0.01f, 1.0f, "%.8f");

                static float f1 = 1.e10f;
                ImGui::InputFloat("input scientific", &f1, 0.0f, 0.0f, "%e");
                ImGui::SameLine(); ShowHelpMarker("You can input value using the scientific notation,\n  e.g. \"1e+8\" becomes \"100000000\".\n");

                static float vec4a[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
                ImGui::InputFloat3("input float3", vec4a);
            }

            {
                static int i1 = 50, i2 = 42;
                ImGui::DragInt("drag int", &i1, 1);
                ImGui::SameLine(); ShowHelpMarker("Click and drag to edit value.\nHold SHIFT/ALT for faster/slower edit.\nDouble-click or CTRL+click to input value.");

                ImGui::DragInt("drag int 0..100", &i2, 1, 0, 100, "%d%%");

                static float f1=1.00f, f2=0.0067f;
                ImGui::DragFloat("drag float", &f1, 0.005f);
                ImGui::DragFloat("drag small float", &f2, 0.0001f, 0.0f, 0.0f, "%.06f ns");
            }

            {
                static int i1=0;
                ImGui::SliderInt("slider int", &i1, -1, 3);
                ImGui::SameLine(); ShowHelpMarker("CTRL+click to input value.");

                static float f1=0.123f, f2=0.0f;
                ImGui::SliderFloat("slider float", &f1, 0.0f, 1.0f, "ratio = %.3f");
                ImGui::SliderFloat("slider float (curve)", &f2, -10.0f, 10.0f, "%.4f", 2.0f);
                static float angle = 0.0f;
                ImGui::SliderAngle("slider angle", &angle);
            }

            {
                static float col1[3] = { 1.0f,0.0f,0.2f };
                static float col2[4] = { 0.4f,0.7f,0.0f,0.5f };
                ImGui::ColorEdit3("color 1", col1);
                ImGui::SameLine(); ShowHelpMarker("Click on the colored square to open a color picker.\nClick and hold to use drag and drop.\nRight-click on the colored square to show options.\nCTRL+click on individual component to input value.\n");

                ImGui::ColorEdit4("color 2", col2);
            }

            {
                // List box
                const char* listbox_items[] = { "Apple", "Banana", "Cherry", "Kiwi", "Mango", "Orange", "Pineapple", "Strawberry", "Watermelon" };
                static int listbox_item_current = 1;
                ImGui::ListBox("listbox\n(single select)", &listbox_item_current, listbox_items, IM_ARRAYSIZE(listbox_items), 4);

                //static int listbox_item_current2 = 2;
                //ImGui::PushItemWidth(-1);
                //ImGui::ListBox("##listbox2", &listbox_item_current2, listbox_items, IM_ARRAYSIZE(listbox_items), 4);
                //ImGui::PopItemWidth();
            }

            ImGui::TreePop();
        }

        // Testing ImGuiOnceUponAFrame helper.
        //static ImGuiOnceUponAFrame once;
        //for (int i = 0; i < 5; i++)
        //    if (once)
        //        ImGui::Text("This will be displayed only once.");

        if (ImGui::TreeNode("Trees"))
        {
            if (ImGui::TreeNode("Basic trees"))
            {
                for (int i = 0; i < 5; i++)
                    if (ImGui::TreeNode((void*)(intptr_t)i, "Child %d", i))
                    {
                        ImGui::Text("blah blah");
                        ImGui::SameLine();
                        if (ImGui::SmallButton("button")) { };
                        ImGui::TreePop();
                    }
                ImGui::TreePop();
            }

            if (ImGui::TreeNode("Advanced, with Selectable nodes"))
            {
                ShowHelpMarker("This is a more standard looking tree with selectable nodes.\nClick to select, CTRL+Click to toggle, click on arrows or double-click to open.");
                static bool align_label_with_current_x_position = false;
                ImGui::Checkbox("Align label with current X position)", &align_label_with_current_x_position);
                ImGui::Text("Hello!");
                if (align_label_with_current_x_position)
                    ImGui::Unindent(ImGui::GetTreeNodeToLabelSpacing());

                static int selection_mask = (1 << 2); // Dumb representation of what may be user-side selection state. You may carry selection state inside or outside your objects in whatever format you see fit.
                int node_clicked = -1;                // Temporary storage of what node we have clicked to process selection at the end of the loop. May be a pointer to your own node type, etc.
                ImGui::PushStyleVar(ImGuiStyleVar_IndentSpacing, ImGui::GetFontSize()*3); // Increase spacing to differentiate leaves from expanded contents.
                for (int i = 0; i < 6; i++)
                {
                    // Disable the default open on single-click behavior and pass in Selected flag according to our selection state.
                    ImGuiTreeNodeFlags node_flags = ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick | ((selection_mask & (1 << i)) ? ImGuiTreeNodeFlags_Selected : 0);
                    if (i < 3)
                    {
                        // Node
                        bool node_open = ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Node %d", i);
                        if (ImGui::IsItemClicked())
                            node_clicked = i;
                        if (node_open)
                        {
                            ImGui::Text("Blah blah\nBlah Blah");
                            ImGui::TreePop();
                        }
                    }
                    else
                    {
                        // Leaf: The only reason we have a TreeNode at all is to allow selection of the leaf. Otherwise we can use BulletText() or TreeAdvanceToLabelPos()+Text().
                        node_flags |= ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen; // ImGuiTreeNodeFlags_Bullet
                        ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Leaf %d", i);
                        if (ImGui::IsItemClicked())
                            node_clicked = i;
                    }
                }
                if (node_clicked != -1)
                {
                    // Update selection state. Process outside of tree loop to avoid visual inconsistencies during the clicking-frame.
                    if (ImGui::GetIO().KeyCtrl)
                        selection_mask ^= (1 << node_clicked);          // CTRL+click to toggle
                    else //if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, this commented bit preserve selection when clicking on item that is part of the selection
                        selection_mask = (1 << node_clicked);           // Click to single-select
                }
                ImGui::PopStyleVar();
                if (align_label_with_current_x_position)
                    ImGui::Indent(ImGui::GetTreeNodeToLabelSpacing());
                ImGui::TreePop();
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Collapsing Headers"))
        {
            static bool closable_group = true;
            ImGui::Checkbox("Enable extra group", &closable_group);
            if (ImGui::CollapsingHeader("Header"))
            {
                ImGui::Text("IsItemHovered: %d", IsItemHovered());
                for (int i = 0; i < 5; i++)
                    ImGui::Text("Some content %d", i);
            }
            if (ImGui::CollapsingHeader("Header with a close button", &closable_group))
            {
                ImGui::Text("IsItemHovered: %d", IsItemHovered());
                for (int i = 0; i < 5; i++)
                    ImGui::Text("More content %d", i);
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Bullets"))
        {
            ImGui::BulletText("Bullet point 1");
            ImGui::BulletText("Bullet point 2\nOn multiple lines");
            ImGui::Bullet(); ImGui::Text("Bullet point 3 (two calls)");
            ImGui::Bullet(); ImGui::SmallButton("Button");
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Text"))
        {
            if (ImGui::TreeNode("Colored Text"))
            {
                // Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.
                ImGui::TextColored(ImVec4(1.0f,0.0f,1.0f,1.0f), "Pink");
                ImGui::TextColored(ImVec4(1.0f,1.0f,0.0f,1.0f), "Yellow");
                ImGui::TextDisabled("Disabled");
                ImGui::SameLine(); ShowHelpMarker("The TextDisabled color is stored in ImGuiStyle.");
                ImGui::TreePop();
            }

            if (ImGui::TreeNode("Word Wrapping"))
            {
                // Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.
                ImGui::TextWrapped("This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.");
                ImGui::Spacing();

                static float wrap_width = 200.0f;
                ImGui::SliderFloat("Wrap width", &wrap_width, -20, 600, "%.0f");

                ImGui::Text("Test paragraph 1:");
                ImVec2 pos = ImGui::GetCursorScreenPos();
                ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(pos.x + wrap_width, pos.y), ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight()), IM_COL32(255,0,255,255));
                ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);
                ImGui::Text("The lazy dog is a good dog. This paragraph is made to fit within %.0f pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.", wrap_width);
                ImGui::GetWindowDrawList()->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255,255,0,255));
                ImGui::PopTextWrapPos();

                ImGui::Text("Test paragraph 2:");
                pos = ImGui::GetCursorScreenPos();
                ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(pos.x + wrap_width, pos.y), ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight()), IM_COL32(255,0,255,255));
                ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);
                ImGui::Text("aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh");
                ImGui::GetWindowDrawList()->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255,255,0,255));
                ImGui::PopTextWrapPos();

                ImGui::TreePop();
            }

            if (ImGui::TreeNode("UTF-8 Text"))
            {
                // UTF-8 test with Japanese characters
                // (Needs a suitable font, try Noto, or Arial Unicode, or M+ fonts. Read misc/fonts/README.txt for details.)
                // - From C++11 you can use the u8"my text" syntax to encode literal strings as UTF-8
                // - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. Visual Studio save your file as 'UTF-8 without signature')
                // - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8 CHARACTERS IN THIS SOURCE FILE.
                //   Instead we are encoding a few strings with hexadecimal constants. Don't do this in your application!
                //   Please use u8"text in any language" in your application!
                // Note that characters values are preserved even by InputText() if the font cannot be displayed, so you can safely copy & paste garbled characters into another application.
                ImGui::TextWrapped("CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->LoadFromFileTTF() manually to load extra character ranges. Read misc/fonts/README.txt for details.");
                ImGui::Text("Hiragana: \xe3\x81\x8b\xe3\x81\x8d\xe3\x81\x8f\xe3\x81\x91\xe3\x81\x93 (kakikukeko)"); // Normally we would use u8"blah blah" with the proper characters directly in the string.
                ImGui::Text("Kanjis: \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e (nihongo)");
                static char buf[32] = "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e";
                //static char buf[32] = u8"NIHONGO"; // <- this is how you would write it with C++11, using real kanjis
                ImGui::InputText("UTF-8 input", buf, IM_ARRAYSIZE(buf));
                ImGui::TreePop();
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Images"))
        {
            ImGuiIO& io = ImGui::GetIO();
            ImGui::TextWrapped("Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!");

            // Here we are grabbing the font texture because that's the only one we have access to inside the demo code.
            // Remember that ImTextureID is just storage for whatever you want it to be, it is essentially a value that will be passed to the render function inside the ImDrawCmd structure.
            // If you use one of the default imgui_impl_XXXX.cpp renderer, they all have comments at the top of their file to specify what they expect to be stored in ImTextureID.
            // (for example, the imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer. The imgui_impl_glfw_gl3.cpp renderer expect a GLuint OpenGL texture identifier etc.)
            // If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers to ImGui::Image(), and gather width/height through your own functions, etc.
            // Using ShowMetricsWindow() as a "debugger" to inspect the draw data that are being passed to your render will help you debug issues if you are confused about this.
            // Consider using the lower-level ImDrawList::AddImage() API, via ImGui::GetWindowDrawList()->AddImage().
            ImTextureID my_tex_id = io.Fonts->TexID;
            float my_tex_w = (float)io.Fonts->TexWidth;
            float my_tex_h = (float)io.Fonts->TexHeight;

            ImGui::Text("%.0fx%.0f", my_tex_w, my_tex_h);
            ImVec2 pos = ImGui::GetCursorScreenPos();
            ImGui::Image(my_tex_id, ImVec2(my_tex_w, my_tex_h), ImVec2(0,0), ImVec2(1,1), ImColor(255,255,255,255), ImColor(255,255,255,128));
            if (ImGui::IsItemHovered())
            {
                ImGui::BeginTooltip();
                float region_sz = 32.0f;
                float region_x = io.MousePos.x - pos.x - region_sz * 0.5f; if (region_x < 0.0f) region_x = 0.0f; else if (region_x > my_tex_w - region_sz) region_x = my_tex_w - region_sz;
                float region_y = io.MousePos.y - pos.y - region_sz * 0.5f; if (region_y < 0.0f) region_y = 0.0f; else if (region_y > my_tex_h - region_sz) region_y = my_tex_h - region_sz;
                float zoom = 4.0f;
                ImGui::Text("Min: (%.2f, %.2f)", region_x, region_y);
                ImGui::Text("Max: (%.2f, %.2f)", region_x + region_sz, region_y + region_sz);
                ImVec2 uv0 = ImVec2((region_x) / my_tex_w, (region_y) / my_tex_h);
                ImVec2 uv1 = ImVec2((region_x + region_sz) / my_tex_w, (region_y + region_sz) / my_tex_h);
                ImGui::Image(my_tex_id, ImVec2(region_sz * zoom, region_sz * zoom), uv0, uv1, ImColor(255,255,255,255), ImColor(255,255,255,128));
                ImGui::EndTooltip();
            }
            ImGui::TextWrapped("And now some textured buttons..");
            static int pressed_count = 0;
            for (int i = 0; i < 8; i++)
            {
                ImGui::PushID(i);
                int frame_padding = -1 + i;     // -1 = uses default padding
                if (ImGui::ImageButton(my_tex_id, ImVec2(32,32), ImVec2(0,0), ImVec2(32.0f/my_tex_w,32/my_tex_h), frame_padding, ImColor(0,0,0,255)))
                    pressed_count += 1;
                ImGui::PopID();
                ImGui::SameLine();
            }
            ImGui::NewLine();
            ImGui::Text("Pressed %d times.", pressed_count);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Combo"))
        {
            // Expose flags as checkbox for the demo
            static ImGuiComboFlags flags = 0;
            ImGui::CheckboxFlags("ImGuiComboFlags_PopupAlignLeft", (unsigned int*)&flags, ImGuiComboFlags_PopupAlignLeft);
            if (ImGui::CheckboxFlags("ImGuiComboFlags_NoArrowButton", (unsigned int*)&flags, ImGuiComboFlags_NoArrowButton))
                flags &= ~ImGuiComboFlags_NoPreview;     // Clear the other flag, as we cannot combine both
            if (ImGui::CheckboxFlags("ImGuiComboFlags_NoPreview", (unsigned int*)&flags, ImGuiComboFlags_NoPreview))
                flags &= ~ImGuiComboFlags_NoArrowButton; // Clear the other flag, as we cannot combine both

            // General BeginCombo() API, you have full control over your selection data and display type.
            // (your selection data could be an index, a pointer to the object, an id for the object, a flag stored in the object itself, etc.)
            const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };
            static const char* item_current = items[0];            // Here our selection is a single pointer stored outside the object.
            if (ImGui::BeginCombo("combo 1", item_current, flags)) // The second parameter is the label previewed before opening the combo.
            {
                for (int n = 0; n < IM_ARRAYSIZE(items); n++)
                {
                    bool is_selected = (item_current == items[n]);
                    if (ImGui::Selectable(items[n], is_selected))
                        item_current = items[n];
                    if (is_selected)
                        ImGui::SetItemDefaultFocus();   // Set the initial focus when opening the combo (scrolling + for keyboard navigation support in the upcoming navigation branch)
                }
                ImGui::EndCombo();
            }

            // Simplified one-liner Combo() API, using values packed in a single constant string
            static int item_current_2 = 0;
            ImGui::Combo("combo 2 (one-liner)", &item_current_2, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

            // Simplified one-liner Combo() using an array of const char*
            static int item_current_3 = -1; // If the selection isn't within 0..count, Combo won't display a preview
            ImGui::Combo("combo 3 (array)", &item_current_3, items, IM_ARRAYSIZE(items));

            // Simplified one-liner Combo() using an accessor function
            struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { *out_str = ((const char**)data)[idx]; return true; } };
            static int item_current_4 = 0;
            ImGui::Combo("combo 4 (function)", &item_current_4, &FuncHolder::ItemGetter, items, IM_ARRAYSIZE(items));

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Selectables"))
        {
            // Selectable() has 2 overloads:
            // - The one taking "bool selected" as a read-only selection information. When Selectable() has been clicked is returns true and you can alter selection state accordingly.
            // - The one taking "bool* p_selected" as a read-write selection information (convenient in some cases)
            // The earlier is more flexible, as in real application your selection may be stored in a different manner (in flags within objects, as an external list, etc).
            if (ImGui::TreeNode("Basic"))
            {
                static bool selection[5] = { false, true, false, false, false };
                ImGui::Selectable("1. I am selectable", &selection[0]);
                ImGui::Selectable("2. I am selectable", &selection[1]);
                ImGui::Text("3. I am not selectable");
                ImGui::Selectable("4. I am selectable", &selection[3]);
                if (ImGui::Selectable("5. I am double clickable", selection[4], ImGuiSelectableFlags_AllowDoubleClick))
                    if (ImGui::IsMouseDoubleClicked(0))
                        selection[4] = !selection[4];
                ImGui::TreePop();
            }
            if (ImGui::TreeNode("Selection State: Single Selection"))
            {
                static int selected = -1;
                for (int n = 0; n < 5; n++)
                {
                    char buf[32];
                    sprintf(buf, "Object %d", n);
                    if (ImGui::Selectable(buf, selected == n))
                        selected = n;
                }
                ImGui::TreePop();
            }
            if (ImGui::TreeNode("Selection State: Multiple Selection"))
            {
                ShowHelpMarker("Hold CTRL and click to select multiple items.");
                static bool selection[5] = { false, false, false, false, false };
                for (int n = 0; n < 5; n++)
                {
                    char buf[32];
                    sprintf(buf, "Object %d", n);
                    if (ImGui::Selectable(buf, selection[n]))
                    {
                        if (!ImGui::GetIO().KeyCtrl)    // Clear selection when CTRL is not held
                            memset(selection, 0, sizeof(selection));
                        selection[n] ^= 1;
                    }
                }
                ImGui::TreePop();
            }
            if (ImGui::TreeNode("Rendering more text into the same line"))
            {
                // Using the Selectable() override that takes "bool* p_selected" parameter and toggle your booleans automatically.
                static bool selected[3] = { false, false, false };
                ImGui::Selectable("main.c",    &selected[0]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");
                ImGui::Selectable("Hello.cpp", &selected[1]); ImGui::SameLine(300); ImGui::Text("12,345 bytes");
                ImGui::Selectable("Hello.h",   &selected[2]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");
                ImGui::TreePop();
            }
            if (ImGui::TreeNode("In columns"))
            {
                ImGui::Columns(3, NULL, false);
                static bool selected[16] = { 0 };
                for (int i = 0; i < 16; i++)
                {
                    char label[32]; sprintf(label, "Item %d", i);
                    if (ImGui::Selectable(label, &selected[i])) {}
                    ImGui::NextColumn();
                }
                ImGui::Columns(1);
                ImGui::TreePop();
            }
            if (ImGui::TreeNode("Grid"))
            {
                static bool selected[16] = { true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true };
                for (int i = 0; i < 16; i++)
                {
                    ImGui::PushID(i);
                    if (ImGui::Selectable("Sailor", &selected[i], 0, ImVec2(50,50)))
                    {
                        int x = i % 4, y = i / 4;
                        if (x > 0) selected[i - 1] ^= 1;
                        if (x < 3) selected[i + 1] ^= 1;
                        if (y > 0) selected[i - 4] ^= 1;
                        if (y < 3) selected[i + 4] ^= 1;
                    }
                    if ((i % 4) < 3) ImGui::SameLine();
                    ImGui::PopID();
                }
                ImGui::TreePop();
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Filtered Text Input"))
        {
            static char buf1[64] = ""; ImGui::InputText("default", buf1, 64);
            static char buf2[64] = ""; ImGui::InputText("decimal", buf2, 64, ImGuiInputTextFlags_CharsDecimal);
            static char buf3[64] = ""; ImGui::InputText("hexadecimal", buf3, 64, ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase);
            static char buf4[64] = ""; ImGui::InputText("uppercase", buf4, 64, ImGuiInputTextFlags_CharsUppercase);
            static char buf5[64] = ""; ImGui::InputText("no blank", buf5, 64, ImGuiInputTextFlags_CharsNoBlank);
            struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data) { if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar)) return 0; return 1; } };
            static char buf6[64] = ""; ImGui::InputText("\"imgui\" letters", buf6, 64, ImGuiInputTextFlags_CallbackCharFilter, TextFilters::FilterImGuiLetters);

            ImGui::Text("Password input");
            static char bufpass[64] = "password123";
            ImGui::InputText("password", bufpass, 64, ImGuiInputTextFlags_Password | ImGuiInputTextFlags_CharsNoBlank);
            ImGui::SameLine(); ShowHelpMarker("Display all characters as '*'.\nDisable clipboard cut and copy.\nDisable logging.\n");
            ImGui::InputText("password (clear)", bufpass, 64, ImGuiInputTextFlags_CharsNoBlank);

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Multi-line Text Input"))
        {
            static bool read_only = false;
            static char text[1024*16] =
                "/*\n"
                " The Pentium F00F bug, shorthand for F0 0F C7 C8,\n"
                " the hexadecimal encoding of one offending instruction,\n"
                " more formally, the invalid operand with locked CMPXCHG8B\n"
                " instruction bug, is a design flaw in the majority of\n"
                " Intel Pentium, Pentium MMX, and Pentium OverDrive\n"
                " processors (all in the P5 microarchitecture).\n"
                "*/\n\n"
                "label:\n"
                "\tlock cmpxchg8b eax\n";

            ShowHelpMarker("You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputTextMultiline() to a dynamic string type. See misc/stl/imgui_stl.h for an example. (This is not demonstrated in imgui_demo.cpp)");
            ImGui::Checkbox("Read-only", &read_only);
            ImGuiInputTextFlags flags = ImGuiInputTextFlags_AllowTabInput | (read_only ? ImGuiInputTextFlags_ReadOnly : 0);
            ImGui::InputTextMultiline("##source", text, IM_ARRAYSIZE(text), ImVec2(-1.0f, ImGui::GetTextLineHeight() * 16), flags);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Plots Widgets"))
        {
            static bool animate = true;
            ImGui::Checkbox("Animate", &animate);

            static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
            ImGui::PlotLines("Frame Times", arr, IM_ARRAYSIZE(arr));

            // Create a dummy array of contiguous float values to plot
            // Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float and the sizeof() of your structure in the Stride parameter.
            static float values[90] = { 0 };
            static int values_offset = 0;
            static double refresh_time = 0.0;
            if (!animate || refresh_time == 0.0f)
                refresh_time = ImGui::GetTime();
            while (refresh_time < ImGui::GetTime()) // Create dummy data at fixed 60 hz rate for the demo
            {
                static float phase = 0.0f;
                values[values_offset] = cosf(phase);
                values_offset = (values_offset+1) % IM_ARRAYSIZE(values);
                phase += 0.10f*values_offset;
                refresh_time += 1.0f/60.0f;
            }
            ImGui::PlotLines("Lines", values, IM_ARRAYSIZE(values), values_offset, "avg 0.0", -1.0f, 1.0f, ImVec2(0,80));
            ImGui::PlotHistogram("Histogram", arr, IM_ARRAYSIZE(arr), 0, NULL, 0.0f, 1.0f, ImVec2(0,80));

            // Use functions to generate output
            // FIXME: This is rather awkward because current plot API only pass in indices. We probably want an API passing floats and user provide sample rate/count.
            struct Funcs
            {
                static float Sin(void*, int i) { return sinf(i * 0.1f); }
                static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }
            };
            static int func_type = 0, display_count = 70;
            ImGui::Separator();
            ImGui::PushItemWidth(100); ImGui::Combo("func", &func_type, "Sin\0Saw\0"); ImGui::PopItemWidth();
            ImGui::SameLine();
            ImGui::SliderInt("Sample count", &display_count, 1, 400);
            float (*func)(void*, int) = (func_type == 0) ? Funcs::Sin : Funcs::Saw;
            ImGui::PlotLines("Lines", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0,80));
            ImGui::PlotHistogram("Histogram", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0,80));
            ImGui::Separator();

            // Animate a simple progress bar
            static float progress = 0.0f, progress_dir = 1.0f;
            if (animate)
            {
                progress += progress_dir * 0.4f * ImGui::GetIO().DeltaTime;
                if (progress >= +1.1f) { progress = +1.1f; progress_dir *= -1.0f; }
                if (progress <= -0.1f) { progress = -0.1f; progress_dir *= -1.0f; }
            }

            // Typically we would use ImVec2(-1.0f,0.0f) to use all available width, or ImVec2(width,0.0f) for a specified width. ImVec2(0.0f,0.0f) uses ItemWidth.
            ImGui::ProgressBar(progress, ImVec2(0.0f,0.0f));
            ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("Progress Bar");

            float progress_saturated = (progress < 0.0f) ? 0.0f : (progress > 1.0f) ? 1.0f : progress;
            char buf[32];
            sprintf(buf, "%d/%d", (int)(progress_saturated*1753), 1753);
            ImGui::ProgressBar(progress, ImVec2(0.f,0.f), buf);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Color/Picker Widgets"))
        {
            static ImVec4 color = ImColor(114, 144, 154, 200);

            static bool alpha_preview = true;
            static bool alpha_half_preview = false;
            static bool drag_and_drop = true;
            static bool options_menu = true;
            static bool hdr = false;
            ImGui::Checkbox("With Alpha Preview", &alpha_preview);
            ImGui::Checkbox("With Half Alpha Preview", &alpha_half_preview);
            ImGui::Checkbox("With Drag and Drop", &drag_and_drop);
            ImGui::Checkbox("With Options Menu", &options_menu); ImGui::SameLine(); ShowHelpMarker("Right-click on the individual color widget to show options.");
            ImGui::Checkbox("With HDR", &hdr); ImGui::SameLine(); ShowHelpMarker("Currently all this does is to lift the 0..1 limits on dragging widgets.");
            int misc_flags = (hdr ? ImGuiColorEditFlags_HDR : 0) | (drag_and_drop ? 0 : ImGuiColorEditFlags_NoDragDrop) | (alpha_half_preview ? ImGuiColorEditFlags_AlphaPreviewHalf : (alpha_preview ? ImGuiColorEditFlags_AlphaPreview : 0)) | (options_menu ? 0 : ImGuiColorEditFlags_NoOptions);

            ImGui::Text("Color widget:");
            ImGui::SameLine(); ShowHelpMarker("Click on the colored square to open a color picker.\nCTRL+click on individual component to input value.\n");
            ImGui::ColorEdit3("MyColor##1", (float*)&color, misc_flags);

            ImGui::Text("Color widget HSV with Alpha:");
            ImGui::ColorEdit4("MyColor##2", (float*)&color, ImGuiColorEditFlags_HSV | misc_flags);

            ImGui::Text("Color widget with Float Display:");
            ImGui::ColorEdit4("MyColor##2f", (float*)&color, ImGuiColorEditFlags_Float | misc_flags);

            ImGui::Text("Color button with Picker:");
            ImGui::SameLine(); ShowHelpMarker("With the ImGuiColorEditFlags_NoInputs flag you can hide all the slider/text inputs.\nWith the ImGuiColorEditFlags_NoLabel flag you can pass a non-empty label which will only be used for the tooltip and picker popup.");
            ImGui::ColorEdit4("MyColor##3", (float*)&color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel | misc_flags);

            ImGui::Text("Color button with Custom Picker Popup:");

            // Generate a dummy palette
            static bool saved_palette_inited = false;
            static ImVec4 saved_palette[32];
            if (!saved_palette_inited)
                for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)
                {
                    ImGui::ColorConvertHSVtoRGB(n / 31.0f, 0.8f, 0.8f, saved_palette[n].x, saved_palette[n].y, saved_palette[n].z);
                    saved_palette[n].w = 1.0f; // Alpha
                }
            saved_palette_inited = true;

            static ImVec4 backup_color;
            bool open_popup = ImGui::ColorButton("MyColor##3b", color, misc_flags);
            ImGui::SameLine();
            open_popup |= ImGui::Button("Palette");
            if (open_popup)
            {
                ImGui::OpenPopup("mypicker");
                backup_color = color;
            }
            if (ImGui::BeginPopup("mypicker"))
            {
                // FIXME: Adding a drag and drop example here would be perfect!
                ImGui::Text("MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!");
                ImGui::Separator();
                ImGui::ColorPicker4("##picker", (float*)&color, misc_flags | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoSmallPreview);
                ImGui::SameLine();
                ImGui::BeginGroup();
                ImGui::Text("Current");
                ImGui::ColorButton("##current", color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60,40));
                ImGui::Text("Previous");
                if (ImGui::ColorButton("##previous", backup_color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60,40)))
                    color = backup_color;
                ImGui::Separator();
                ImGui::Text("Palette");
                for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)
                {
                    ImGui::PushID(n);
                    if ((n % 8) != 0)
                        ImGui::SameLine(0.0f, ImGui::GetStyle().ItemSpacing.y);
                    if (ImGui::ColorButton("##palette", saved_palette[n], ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_NoTooltip, ImVec2(20,20)))
                        color = ImVec4(saved_palette[n].x, saved_palette[n].y, saved_palette[n].z, color.w); // Preserve alpha!

                    if (ImGui::BeginDragDropTarget())
                    {
                        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))
                            memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 3);
                        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))
                            memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 4);
                        EndDragDropTarget();
                    }

                    ImGui::PopID();
                }
                ImGui::EndGroup();
                ImGui::EndPopup();
            }

            ImGui::Text("Color button only:");
            ImGui::ColorButton("MyColor##3c", *(ImVec4*)&color, misc_flags, ImVec2(80,80));

            ImGui::Text("Color picker:");
            static bool alpha = true;
            static bool alpha_bar = true;
            static bool side_preview = true;
            static bool ref_color = false;
            static ImVec4 ref_color_v(1.0f,0.0f,1.0f,0.5f);
            static int inputs_mode = 2;
            static int picker_mode = 0;
            ImGui::Checkbox("With Alpha", &alpha);
            ImGui::Checkbox("With Alpha Bar", &alpha_bar);
            ImGui::Checkbox("With Side Preview", &side_preview);
            if (side_preview)
            {
                ImGui::SameLine();
                ImGui::Checkbox("With Ref Color", &ref_color);
                if (ref_color)
                {
                    ImGui::SameLine();
                    ImGui::ColorEdit4("##RefColor", &ref_color_v.x, ImGuiColorEditFlags_NoInputs | misc_flags);
                }
            }
            ImGui::Combo("Inputs Mode", &inputs_mode, "All Inputs\0No Inputs\0RGB Input\0HSV Input\0HEX Input\0");
            ImGui::Combo("Picker Mode", &picker_mode, "Auto/Current\0Hue bar + SV rect\0Hue wheel + SV triangle\0");
            ImGui::SameLine(); ShowHelpMarker("User can right-click the picker to change mode.");
            ImGuiColorEditFlags flags = misc_flags;
            if (!alpha) flags |= ImGuiColorEditFlags_NoAlpha; // This is by default if you call ColorPicker3() instead of ColorPicker4()
            if (alpha_bar) flags |= ImGuiColorEditFlags_AlphaBar;
            if (!side_preview) flags |= ImGuiColorEditFlags_NoSidePreview;
            if (picker_mode == 1) flags |= ImGuiColorEditFlags_PickerHueBar;
            if (picker_mode == 2) flags |= ImGuiColorEditFlags_PickerHueWheel;
            if (inputs_mode == 1) flags |= ImGuiColorEditFlags_NoInputs;
            if (inputs_mode == 2) flags |= ImGuiColorEditFlags_RGB;
            if (inputs_mode == 3) flags |= ImGuiColorEditFlags_HSV;
            if (inputs_mode == 4) flags |= ImGuiColorEditFlags_HEX;
            ImGui::ColorPicker4("MyColor##4", (float*)&color, flags, ref_color ? &ref_color_v.x : NULL);

            ImGui::Text("Programmatically set defaults:");
            ImGui::SameLine(); ShowHelpMarker("SetColorEditOptions() is designed to allow you to set boot-time default.\nWe don't have Push/Pop functions because you can force options on a per-widget basis if needed, and the user can change non-forced ones with the options menu.\nWe don't have a getter to avoid encouraging you to persistently save values that aren't forward-compatible.");
            if (ImGui::Button("Default: Uint8 + HSV + Hue Bar"))
                ImGui::SetColorEditOptions(ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_HSV | ImGuiColorEditFlags_PickerHueBar);
            if (ImGui::Button("Default: Float + HDR + Hue Wheel"))
                ImGui::SetColorEditOptions(ImGuiColorEditFlags_Float | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_PickerHueWheel);

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Range Widgets"))
        {
            static float begin = 10, end = 90;
            static int begin_i = 100, end_i = 1000;
            ImGui::DragFloatRange2("range", &begin, &end, 0.25f, 0.0f, 100.0f, "Min: %.1f %%", "Max: %.1f %%");
            ImGui::DragIntRange2("range int (no bounds)", &begin_i, &end_i, 5, 0, 0, "Min: %d units", "Max: %d units");
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Data Types"))
        {
            // The DragScalar/InputScalar/SliderScalar functions allow various data types: signed/unsigned int/long long and float/double
            // To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum to pass the type, 
            // and passing all arguments by address. 
            // This is the reason the test code below creates local variables to hold "zero" "one" etc. for each types.
            // In practice, if you frequently use a given type that is not covered by the normal API entry points, you can wrap it 
            // yourself inside a 1 line function which can take typed argument as value instead of void*, and then pass their address 
            // to the generic function. For example:
            //   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = "%lld") 
            //   { 
            //      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format); 
            //   }

            // Limits (as helper variables that we can take the address of)
            // Note that the SliderScalar function has a maximum usable range of half the natural type maximum, hence the /2 below.
            #ifndef LLONG_MIN
            ImS64 LLONG_MIN = -9223372036854775807LL - 1;
            ImS64 LLONG_MAX = 9223372036854775807LL;
            ImU64 ULLONG_MAX = (2ULL * 9223372036854775807LL + 1);
            #endif
            const ImS32   s32_zero = 0,   s32_one = 1,   s32_fifty = 50, s32_min = INT_MIN/2,   s32_max = INT_MAX/2,    s32_hi_a = INT_MAX/2 - 100,    s32_hi_b = INT_MAX/2;
            const ImU32   u32_zero = 0,   u32_one = 1,   u32_fifty = 50, u32_min = 0,           u32_max = UINT_MAX/2,   u32_hi_a = UINT_MAX/2 - 100,   u32_hi_b = UINT_MAX/2;
            const ImS64   s64_zero = 0,   s64_one = 1,   s64_fifty = 50, s64_min = LLONG_MIN/2, s64_max = LLONG_MAX/2,  s64_hi_a = LLONG_MAX/2 - 100,  s64_hi_b = LLONG_MAX/2;
            const ImU64   u64_zero = 0,   u64_one = 1,   u64_fifty = 50, u64_min = 0,           u64_max = ULLONG_MAX/2, u64_hi_a = ULLONG_MAX/2 - 100, u64_hi_b = ULLONG_MAX/2;
            const float   f32_zero = 0.f, f32_one = 1.f, f32_lo_a = -10000000000.0f, f32_hi_a = +10000000000.0f;
            const double  f64_zero = 0.,  f64_one = 1.,  f64_lo_a = -1000000000000000.0, f64_hi_a = +1000000000000000.0;

            // State
            static ImS32  s32_v = -1;
            static ImU32  u32_v = (ImU32)-1;
            static ImS64  s64_v = -1;
            static ImU64  u64_v = (ImU64)-1;
            static float  f32_v = 0.123f;
            static double f64_v = 90000.01234567890123456789;

            const float drag_speed = 0.2f;
            static bool drag_clamp = false;
            ImGui::Text("Drags:");
            ImGui::Checkbox("Clamp integers to 0..50", &drag_clamp); ImGui::SameLine(); ShowHelpMarker("As with every widgets in dear imgui, we never modify values unless there is a user interaction.\nYou can override the clamping limits by using CTRL+Click to input a value.");
            ImGui::DragScalar("drag s32",       ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL);
            ImGui::DragScalar("drag u32",       ImGuiDataType_U32,    &u32_v, drag_speed, drag_clamp ? &u32_zero : NULL, drag_clamp ? &u32_fifty : NULL, "%u ms");
            ImGui::DragScalar("drag s64",       ImGuiDataType_S64,    &s64_v, drag_speed, drag_clamp ? &s64_zero : NULL, drag_clamp ? &s64_fifty : NULL);
            ImGui::DragScalar("drag u64",       ImGuiDataType_U64,    &u64_v, drag_speed, drag_clamp ? &u64_zero : NULL, drag_clamp ? &u64_fifty : NULL);
            ImGui::DragScalar("drag float",     ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", 1.0f);
            ImGui::DragScalar("drag float ^2",  ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", 2.0f); ImGui::SameLine(); ShowHelpMarker("You can use the 'power' parameter to increase tweaking precision on one side of the range.");
            ImGui::DragScalar("drag double",    ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, NULL,     "%.10f grams", 1.0f);
            ImGui::DragScalar("drag double ^2", ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, &f64_one, "0 < %.10f < 1", 2.0f);

            ImGui::Text("Sliders");
            ImGui::SliderScalar("slider s32 low",     ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty,"%d");
            ImGui::SliderScalar("slider s32 high",    ImGuiDataType_S32,    &s32_v, &s32_hi_a, &s32_hi_b, "%d");
            ImGui::SliderScalar("slider s32 full",    ImGuiDataType_S32,    &s32_v, &s32_min,  &s32_max,  "%d");
            ImGui::SliderScalar("slider u32 low",     ImGuiDataType_U32,    &u32_v, &u32_zero, &u32_fifty,"%u");
            ImGui::SliderScalar("slider u32 high",    ImGuiDataType_U32,    &u32_v, &u32_hi_a, &u32_hi_b, "%u");
            ImGui::SliderScalar("slider u32 full",    ImGuiDataType_U32,    &u32_v, &u32_min,  &u32_max,  "%u");
            ImGui::SliderScalar("slider s64 low",     ImGuiDataType_S64,    &s64_v, &s64_zero, &s64_fifty,"%I64d");
            ImGui::SliderScalar("slider s64 high",    ImGuiDataType_S64,    &s64_v, &s64_hi_a, &s64_hi_b, "%I64d");
            ImGui::SliderScalar("slider s64 full",    ImGuiDataType_S64,    &s64_v, &s64_min,  &s64_max,  "%I64d");
            ImGui::SliderScalar("slider u64 low",     ImGuiDataType_U64,    &u64_v, &u64_zero, &u64_fifty,"%I64u ms");
            ImGui::SliderScalar("slider u64 high",    ImGuiDataType_U64,    &u64_v, &u64_hi_a, &u64_hi_b, "%I64u ms");
            ImGui::SliderScalar("slider u64 full",    ImGuiDataType_U64,    &u64_v, &u64_min,  &u64_max,  "%I64u ms");
            ImGui::SliderScalar("slider float low",   ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one);
            ImGui::SliderScalar("slider float low^2", ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one,  "%.10f", 2.0f);
            ImGui::SliderScalar("slider float high",  ImGuiDataType_Float,  &f32_v, &f32_lo_a, &f32_hi_a, "%e");
            ImGui::SliderScalar("slider double low",  ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f grams", 1.0f);
            ImGui::SliderScalar("slider double low^2",ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f", 2.0f);
            ImGui::SliderScalar("slider double high", ImGuiDataType_Double, &f64_v, &f64_lo_a, &f64_hi_a, "%e grams", 1.0f);

            static bool inputs_step = true;
            ImGui::Text("Inputs");
            ImGui::Checkbox("Show step buttons", &inputs_step);
            ImGui::InputScalar("input s32",     ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%d");
            ImGui::InputScalar("input s32 hex", ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%08X", ImGuiInputTextFlags_CharsHexadecimal);
            ImGui::InputScalar("input u32",     ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%u");
            ImGui::InputScalar("input u32 hex", ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%08X", ImGuiInputTextFlags_CharsHexadecimal);
            ImGui::InputScalar("input s64",     ImGuiDataType_S64,    &s64_v, inputs_step ? &s64_one : NULL);
            ImGui::InputScalar("input u64",     ImGuiDataType_U64,    &u64_v, inputs_step ? &u64_one : NULL);
            ImGui::InputScalar("input float",   ImGuiDataType_Float,  &f32_v, inputs_step ? &f32_one : NULL);
            ImGui::InputScalar("input double",  ImGuiDataType_Double, &f64_v, inputs_step ? &f64_one : NULL);

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Multi-component Widgets"))
        {
            static float vec4f[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
            static int vec4i[4] = { 1, 5, 100, 255 };

            ImGui::InputFloat2("input float2", vec4f);
            ImGui::DragFloat2("drag float2", vec4f, 0.01f, 0.0f, 1.0f);
            ImGui::SliderFloat2("slider float2", vec4f, 0.0f, 1.0f);
            ImGui::InputInt2("input int2", vec4i);
            ImGui::DragInt2("drag int2", vec4i, 1, 0, 255);
            ImGui::SliderInt2("slider int2", vec4i, 0, 255);
            ImGui::Spacing();

            ImGui::InputFloat3("input float3", vec4f);
            ImGui::DragFloat3("drag float3", vec4f, 0.01f, 0.0f, 1.0f);
            ImGui::SliderFloat3("slider float3", vec4f, 0.0f, 1.0f);
            ImGui::InputInt3("input int3", vec4i);
            ImGui::DragInt3("drag int3", vec4i, 1, 0, 255);
            ImGui::SliderInt3("slider int3", vec4i, 0, 255);
            ImGui::Spacing();

            ImGui::InputFloat4("input float4", vec4f);
            ImGui::DragFloat4("drag float4", vec4f, 0.01f, 0.0f, 1.0f);
            ImGui::SliderFloat4("slider float4", vec4f, 0.0f, 1.0f);
            ImGui::InputInt4("input int4", vec4i);
            ImGui::DragInt4("drag int4", vec4i, 1, 0, 255);
            ImGui::SliderInt4("slider int4", vec4i, 0, 255);

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Vertical Sliders"))
        {
            const float spacing = 4;
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));

            static int int_value = 0;
            ImGui::VSliderInt("##int", ImVec2(18,160), &int_value, 0, 5);
            ImGui::SameLine();

            static float values[7] = { 0.0f, 0.60f, 0.35f, 0.9f, 0.70f, 0.20f, 0.0f };
            ImGui::PushID("set1");
            for (int i = 0; i < 7; i++)
            {
                if (i > 0) ImGui::SameLine();
                ImGui::PushID(i);
                ImGui::PushStyleColor(ImGuiCol_FrameBg, (ImVec4)ImColor::HSV(i/7.0f, 0.5f, 0.5f));
                ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, (ImVec4)ImColor::HSV(i/7.0f, 0.6f, 0.5f));
                ImGui::PushStyleColor(ImGuiCol_FrameBgActive, (ImVec4)ImColor::HSV(i/7.0f, 0.7f, 0.5f));
                ImGui::PushStyleColor(ImGuiCol_SliderGrab, (ImVec4)ImColor::HSV(i/7.0f, 0.9f, 0.9f));
                ImGui::VSliderFloat("##v", ImVec2(18,160), &values[i], 0.0f, 1.0f, "");
                if (ImGui::IsItemActive() || ImGui::IsItemHovered())
                    ImGui::SetTooltip("%.3f", values[i]);
                ImGui::PopStyleColor(4);
                ImGui::PopID();
            }
            ImGui::PopID();

            ImGui::SameLine();
            ImGui::PushID("set2");
            static float values2[4] = { 0.20f, 0.80f, 0.40f, 0.25f };
            const int rows = 3;
            const ImVec2 small_slider_size(18, (160.0f-(rows-1)*spacing)/rows);
            for (int nx = 0; nx < 4; nx++)
            {
                if (nx > 0) ImGui::SameLine();
                ImGui::BeginGroup();
                for (int ny = 0; ny < rows; ny++)
                {
                    ImGui::PushID(nx*rows+ny);
                    ImGui::VSliderFloat("##v", small_slider_size, &values2[nx], 0.0f, 1.0f, "");
                    if (ImGui::IsItemActive() || ImGui::IsItemHovered())
                        ImGui::SetTooltip("%.3f", values2[nx]);
                    ImGui::PopID();
                }
                ImGui::EndGroup();
            }
            ImGui::PopID();

            ImGui::SameLine();
            ImGui::PushID("set3");
            for (int i = 0; i < 4; i++)
            {
                if (i > 0) ImGui::SameLine();
                ImGui::PushID(i);
                ImGui::PushStyleVar(ImGuiStyleVar_GrabMinSize, 40);
                ImGui::VSliderFloat("##v", ImVec2(40,160), &values[i], 0.0f, 1.0f, "%.2f\nsec");
                ImGui::PopStyleVar();
                ImGui::PopID();
            }
            ImGui::PopID();
            ImGui::PopStyleVar();
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Drag and Drop"))
        {
            {
                // ColorEdit widgets automatically act as drag source and drag target.
                // They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F to allow your own widgets
                // to use colors in their drag and drop interaction. Also see the demo in Color Picker -> Palette demo.
                ImGui::BulletText("Drag and drop in standard widgets");
                ImGui::Indent();
                static float col1[3] = { 1.0f,0.0f,0.2f };
                static float col2[4] = { 0.4f,0.7f,0.0f,0.5f };
                ImGui::ColorEdit3("color 1", col1);
                ImGui::ColorEdit4("color 2", col2);
                ImGui::Unindent();
            }

            {
                ImGui::BulletText("Drag and drop to copy/swap items");
                ImGui::Indent();
                enum Mode
                {
                    Mode_Copy,
                    Mode_Move,
                    Mode_Swap
                };
                static int mode = 0;
                if (ImGui::RadioButton("Copy", mode == Mode_Copy)) { mode = Mode_Copy; } ImGui::SameLine();
                if (ImGui::RadioButton("Move", mode == Mode_Move)) { mode = Mode_Move; } ImGui::SameLine();
                if (ImGui::RadioButton("Swap", mode == Mode_Swap)) { mode = Mode_Swap; } 
                static const char* names[9] = { "Bobby", "Beatrice", "Betty", "Brianna", "Barry", "Bernard", "Bibi", "Blaine", "Bryn" };
                for (int n = 0; n < IM_ARRAYSIZE(names); n++)
                {
                    ImGui::PushID(n);
                    if ((n % 3) != 0)
                        ImGui::SameLine();
                    ImGui::Button(names[n], ImVec2(60,60));

                    // Our buttons are both drag sources and drag targets here!
                    if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
                    {
                        ImGui::SetDragDropPayload("DND_DEMO_CELL", &n, sizeof(int));        // Set payload to carry the index of our item (could be anything)
                        if (mode == Mode_Copy) { ImGui::Text("Copy %s", names[n]); }        // Display preview (could be anything, e.g. when dragging an image we could decide to display the filename and a small preview of the image, etc.)
                        if (mode == Mode_Move) { ImGui::Text("Move %s", names[n]); }
                        if (mode == Mode_Swap) { ImGui::Text("Swap %s", names[n]); }
                        ImGui::EndDragDropSource();
                    }
                    if (ImGui::BeginDragDropTarget())
                    {
                        if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_DEMO_CELL"))
                        {
                            IM_ASSERT(payload->DataSize == sizeof(int));
                            int payload_n = *(const int*)payload->Data;
                            if (mode == Mode_Copy)
                            {
                                names[n] = names[payload_n];
                            }
                            if (mode == Mode_Move)
                            {
                                names[n] = names[payload_n];
                                names[payload_n] = "";
                            }
                            if (mode == Mode_Swap)
                            {
                                const char* tmp = names[n];
                                names[n] = names[payload_n];
                                names[payload_n] = tmp;
                            }
                        }
                        ImGui::EndDragDropTarget();
                    }
                    ImGui::PopID();
                }
                ImGui::Unindent();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Querying Status (Active/Focused/Hovered etc.)"))
        {
            // Display the value of IsItemHovered() and other common item state functions. Note that the flags can be combined.
            // (because BulletText is an item itself and that would affect the output of IsItemHovered() we pass all state in a single call to simplify the code).
            static int item_type = 1;
            static bool b = false;
            static float col4f[4] = { 1.0f, 0.5, 0.0f, 1.0f };
            ImGui::RadioButton("Text", &item_type, 0);
            ImGui::RadioButton("Button", &item_type, 1);
            ImGui::RadioButton("CheckBox", &item_type, 2);
            ImGui::RadioButton("SliderFloat", &item_type, 3);
            ImGui::RadioButton("ColorEdit4", &item_type, 4);
            ImGui::RadioButton("ListBox", &item_type, 5);
            ImGui::Separator();
            bool ret = false;
            if (item_type == 0) { ImGui::Text("ITEM: Text"); }                                              // Testing text items with no identifier/interaction
            if (item_type == 1) { ret = ImGui::Button("ITEM: Button"); }                                    // Testing button
            if (item_type == 2) { ret = ImGui::Checkbox("ITEM: CheckBox", &b); }                            // Testing checkbox
            if (item_type == 3) { ret = ImGui::SliderFloat("ITEM: SliderFloat", &col4f[0], 0.0f, 1.0f); }   // Testing basic item
            if (item_type == 4) { ret = ImGui::ColorEdit4("ITEM: ColorEdit4", col4f); }                     // Testing multi-component items (IsItemXXX flags are reported merged)
            if (item_type == 5) { const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::ListBox("ITEM: ListBox", &current, items, IM_ARRAYSIZE(items), IM_ARRAYSIZE(items)); }
            ImGui::BulletText(
                "Return value = %d\n"
                "IsItemFocused() = %d\n"
                "IsItemHovered() = %d\n"
                "IsItemHovered(_AllowWhenBlockedByPopup) = %d\n"
                "IsItemHovered(_AllowWhenBlockedByActiveItem) = %d\n"
                "IsItemHovered(_AllowWhenOverlapped) = %d\n"
                "IsItemHovered(_RectOnly) = %d\n"
                "IsItemActive() = %d\n"
                "IsItemEdited() = %d\n"
                "IsItemDeactivated() = %d\n"
                "IsItemDeactivatedEdit() = %d\n"
                "IsItemVisible() = %d\n"
                "GetItemRectMin() = (%.1f, %.1f)\n"
                "GetItemRectMax() = (%.1f, %.1f)\n"
                "GetItemRectSize() = (%.1f, %.1f)",
                ret,
                ImGui::IsItemFocused(),
                ImGui::IsItemHovered(),
                ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
                ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
                ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenOverlapped),
                ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly),
                ImGui::IsItemActive(),
                ImGui::IsItemEdited(),
                ImGui::IsItemDeactivated(),
                ImGui::IsItemDeactivatedAfterEdit(),
                ImGui::IsItemVisible(),
                ImGui::GetItemRectMin().x, ImGui::GetItemRectMin().y,
                ImGui::GetItemRectMax().x, ImGui::GetItemRectMax().y,
                ImGui::GetItemRectSize().x, ImGui::GetItemRectSize().y
            );

            static bool embed_all_inside_a_child_window = false;
            ImGui::Checkbox("Embed everything inside a child window (for additional testing)", &embed_all_inside_a_child_window);
            if (embed_all_inside_a_child_window)
                ImGui::BeginChild("outer_child", ImVec2(0, ImGui::GetFontSize() * 20), true);

            // Testing IsWindowFocused() function with its various flags. Note that the flags can be combined.
            ImGui::BulletText(
                "IsWindowFocused() = %d\n"
                "IsWindowFocused(_ChildWindows) = %d\n"
                "IsWindowFocused(_ChildWindows|_RootWindow) = %d\n"
                "IsWindowFocused(_RootWindow) = %d\n"
                "IsWindowFocused(_AnyWindow) = %d\n",
                ImGui::IsWindowFocused(),
                ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows),
                ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow),
                ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow),
                ImGui::IsWindowFocused(ImGuiFocusedFlags_AnyWindow));

            // Testing IsWindowHovered() function with its various flags. Note that the flags can be combined.
            ImGui::BulletText(
                "IsWindowHovered() = %d\n"
                "IsWindowHovered(_AllowWhenBlockedByPopup) = %d\n"
                "IsWindowHovered(_AllowWhenBlockedByActiveItem) = %d\n"
                "IsWindowHovered(_ChildWindows) = %d\n"
                "IsWindowHovered(_ChildWindows|_RootWindow) = %d\n"
                "IsWindowHovered(_RootWindow) = %d\n"
                "IsWindowHovered(_AnyWindow) = %d\n",
                ImGui::IsWindowHovered(),
                ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
                ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
                ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows),
                ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow),
                ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow),
                ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow));

            ImGui::BeginChild("child", ImVec2(0, 50), true);
            ImGui::Text("This is another child window for testing with the _ChildWindows flag.");
            ImGui::EndChild();
            if (embed_all_inside_a_child_window)
                EndChild();

            // Calling IsItemHovered() after begin returns the hovered status of the title bar. 
            // This is useful in particular if you want to create a context menu (with BeginPopupContextItem) associated to the title bar of a window.
            static bool test_window = false;
            ImGui::Checkbox("Hovered/Active tests after Begin() for title bar testing", &test_window);
            if (test_window)
            {
                ImGui::Begin("Title bar Hovered/Active tests", &test_window);
                if (ImGui::BeginPopupContextItem()) // <-- This is using IsItemHovered()
                {
                    if (ImGui::MenuItem("Close")) { test_window = false; }
                    ImGui::EndPopup();
                }
                ImGui::Text(
                    "IsItemHovered() after begin = %d (== is title bar hovered)\n"
                    "IsItemActive() after begin = %d (== is window being clicked/moved)\n",
                    ImGui::IsItemHovered(), ImGui::IsItemActive());
                ImGui::End();
            }

            ImGui::TreePop();
        }
    }

    if (ImGui::CollapsingHeader("Layout"))
    {
        if (ImGui::TreeNode("Child regions"))
        {
            static bool disable_mouse_wheel = false;
            static bool disable_menu = false;
            ImGui::Checkbox("Disable Mouse Wheel", &disable_mouse_wheel);
            ImGui::Checkbox("Disable Menu", &disable_menu);

            static int line = 50;
            bool goto_line = ImGui::Button("Goto");
            ImGui::SameLine();
            ImGui::PushItemWidth(100);
            goto_line |= ImGui::InputInt("##Line", &line, 0, 0, ImGuiInputTextFlags_EnterReturnsTrue);
            ImGui::PopItemWidth();

            // Child 1: no border, enable horizontal scrollbar
            {
                ImGui::BeginChild("Child1", ImVec2(ImGui::GetWindowContentRegionWidth() * 0.5f, 300), false, ImGuiWindowFlags_HorizontalScrollbar | (disable_mouse_wheel ? ImGuiWindowFlags_NoScrollWithMouse : 0));
                for (int i = 0; i < 100; i++)
                {
                    ImGui::Text("%04d: scrollable region", i);
                    if (goto_line && line == i)
                        ImGui::SetScrollHere();
                }
                if (goto_line && line >= 100)
                    ImGui::SetScrollHere();
                ImGui::EndChild();
            }

            ImGui::SameLine();

            // Child 2: rounded border
            {
                ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 5.0f);
                ImGui::BeginChild("Child2", ImVec2(0,300), true, (disable_mouse_wheel ? ImGuiWindowFlags_NoScrollWithMouse : 0) | (disable_menu ? 0 : ImGuiWindowFlags_MenuBar));
                if (!disable_menu && ImGui::BeginMenuBar())
                {
                    if (ImGui::BeginMenu("Menu"))
                    {
                        ShowExampleMenuFile();
                        ImGui::EndMenu();
                    }
                    ImGui::EndMenuBar();
                }
                ImGui::Columns(2);
                for (int i = 0; i < 100; i++)
                {
                    char buf[32];
                    sprintf(buf, "%03d", i);
                    ImGui::Button(buf, ImVec2(-1.0f, 0.0f));
                    ImGui::NextColumn();
                }
                ImGui::EndChild();
                ImGui::PopStyleVar();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Widgets Width"))
        {
            static float f = 0.0f;
            ImGui::Text("PushItemWidth(100)");
            ImGui::SameLine(); ShowHelpMarker("Fixed width.");
            ImGui::PushItemWidth(100);
            ImGui::DragFloat("float##1", &f);
            ImGui::PopItemWidth();

            ImGui::Text("PushItemWidth(GetWindowWidth() * 0.5f)");
            ImGui::SameLine(); ShowHelpMarker("Half of window width.");
            ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.5f);
            ImGui::DragFloat("float##2", &f);
            ImGui::PopItemWidth();

            ImGui::Text("PushItemWidth(GetContentRegionAvailWidth() * 0.5f)");
            ImGui::SameLine(); ShowHelpMarker("Half of available width.\n(~ right-cursor_pos)\n(works within a column set)");
            ImGui::PushItemWidth(ImGui::GetContentRegionAvailWidth() * 0.5f);
            ImGui::DragFloat("float##3", &f);
            ImGui::PopItemWidth();

            ImGui::Text("PushItemWidth(-100)");
            ImGui::SameLine(); ShowHelpMarker("Align to right edge minus 100");
            ImGui::PushItemWidth(-100);
            ImGui::DragFloat("float##4", &f);
            ImGui::PopItemWidth();

            ImGui::Text("PushItemWidth(-1)");
            ImGui::SameLine(); ShowHelpMarker("Align to right edge");
            ImGui::PushItemWidth(-1);
            ImGui::DragFloat("float##5", &f);
            ImGui::PopItemWidth();

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Basic Horizontal Layout"))
        {
            ImGui::TextWrapped("(Use ImGui::SameLine() to keep adding items to the right of the preceding item)");

            // Text
            ImGui::Text("Two items: Hello"); ImGui::SameLine();
            ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

            // Adjust spacing
            ImGui::Text("More spacing: Hello"); ImGui::SameLine(0, 20);
            ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

            // Button
            ImGui::AlignTextToFramePadding();
            ImGui::Text("Normal buttons"); ImGui::SameLine();
            ImGui::Button("Banana"); ImGui::SameLine();
            ImGui::Button("Apple"); ImGui::SameLine();
            ImGui::Button("Corniflower");

            // Button
            ImGui::Text("Small buttons"); ImGui::SameLine();
            ImGui::SmallButton("Like this one"); ImGui::SameLine();
            ImGui::Text("can fit within a text block.");

            // Aligned to arbitrary position. Easy/cheap column.
            ImGui::Text("Aligned");
            ImGui::SameLine(150); ImGui::Text("x=150");
            ImGui::SameLine(300); ImGui::Text("x=300");
            ImGui::Text("Aligned");
            ImGui::SameLine(150); ImGui::SmallButton("x=150");
            ImGui::SameLine(300); ImGui::SmallButton("x=300");

            // Checkbox
            static bool c1=false,c2=false,c3=false,c4=false;
            ImGui::Checkbox("My", &c1); ImGui::SameLine();
            ImGui::Checkbox("Tailor", &c2); ImGui::SameLine();
            ImGui::Checkbox("Is", &c3); ImGui::SameLine();
            ImGui::Checkbox("Rich", &c4);

            // Various
            static float f0=1.0f, f1=2.0f, f2=3.0f;
            ImGui::PushItemWidth(80);
            const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD" };
            static int item = -1;
            ImGui::Combo("Combo", &item, items, IM_ARRAYSIZE(items)); ImGui::SameLine();
            ImGui::SliderFloat("X", &f0, 0.0f,5.0f); ImGui::SameLine();
            ImGui::SliderFloat("Y", &f1, 0.0f,5.0f); ImGui::SameLine();
            ImGui::SliderFloat("Z", &f2, 0.0f,5.0f);
            ImGui::PopItemWidth();

            ImGui::PushItemWidth(80);
            ImGui::Text("Lists:");
            static int selection[4] = { 0, 1, 2, 3 };
            for (int i = 0; i < 4; i++)
            {
                if (i > 0) ImGui::SameLine();
                ImGui::PushID(i);
                ImGui::ListBox("", &selection[i], items, IM_ARRAYSIZE(items));
                ImGui::PopID();
                //if (ImGui::IsItemHovered()) ImGui::SetTooltip("ListBox %d hovered", i);
            }
            ImGui::PopItemWidth();

            // Dummy
            ImVec2 button_sz(40,40);
            ImGui::Button("A", button_sz); ImGui::SameLine();
            ImGui::Dummy(button_sz); ImGui::SameLine();
            ImGui::Button("B", button_sz);

            // Manually wrapping (we should eventually provide this as an automatic layout feature, but for now you can do it manually)
            ImGui::Text("Manually wrapping:");
            ImGuiStyle& style = ImGui::GetStyle();
            int buttons_count = 20;
            float window_visible_x2 = ImGui::GetWindowPos().x + ImGui::GetWindowContentRegionMax().x;
            for (int n = 0; n < buttons_count; n++)
            {
                ImGui::PushID(n);
                ImGui::Button("Box", button_sz);
                float last_button_x2 = ImGui::GetItemRectMax().x;
                float next_button_x2 = last_button_x2 + style.ItemSpacing.x + button_sz.x; // Expected position if next button was on same line
                if (n + 1 < buttons_count && next_button_x2 < window_visible_x2)
                    ImGui::SameLine();
                ImGui::PopID();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Groups"))
        {
            ImGui::TextWrapped("(Using ImGui::BeginGroup()/EndGroup() to layout items. BeginGroup() basically locks the horizontal position. EndGroup() bundles the whole group so that you can use functions such as IsItemHovered() on it.)");
            ImGui::BeginGroup();
            {
                ImGui::BeginGroup();
                ImGui::Button("AAA");
                ImGui::SameLine();
                ImGui::Button("BBB");
                ImGui::SameLine();
                ImGui::BeginGroup();
                ImGui::Button("CCC");
                ImGui::Button("DDD");
                ImGui::EndGroup();
                ImGui::SameLine();
                ImGui::Button("EEE");
                ImGui::EndGroup();
                if (ImGui::IsItemHovered())
                    ImGui::SetTooltip("First group hovered");
            }
            // Capture the group size and create widgets using the same size
            ImVec2 size = ImGui::GetItemRectSize();
            const float values[5] = { 0.5f, 0.20f, 0.80f, 0.60f, 0.25f };
            ImGui::PlotHistogram("##values", values, IM_ARRAYSIZE(values), 0, NULL, 0.0f, 1.0f, size);

            ImGui::Button("ACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x)*0.5f,size.y));
            ImGui::SameLine();
            ImGui::Button("REACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x)*0.5f,size.y));
            ImGui::EndGroup();
            ImGui::SameLine();

            ImGui::Button("LEVERAGE\nBUZZWORD", size);
            ImGui::SameLine();

            if (ImGui::ListBoxHeader("List", size))
            {
                ImGui::Selectable("Selected", true);
                ImGui::Selectable("Not Selected", false);
                ImGui::ListBoxFooter();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Text Baseline Alignment"))
        {
            ImGui::TextWrapped("(This is testing the vertical alignment that occurs on text to keep it at the same baseline as widgets. Lines only composed of text or \"small\" widgets fit in less vertical spaces than lines with normal widgets)");

            ImGui::Text("One\nTwo\nThree"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Text("Banana"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("One\nTwo\nThree");

            ImGui::Button("HOP##1"); ImGui::SameLine();
            ImGui::Text("Banana"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Button("HOP##2"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Button("TEST##1"); ImGui::SameLine();
            ImGui::Text("TEST"); ImGui::SameLine();
            ImGui::SmallButton("TEST##2");

            ImGui::AlignTextToFramePadding(); // If your line starts with text, call this to align it to upcoming widgets.
            ImGui::Text("Text aligned to Widget"); ImGui::SameLine();
            ImGui::Button("Widget##1"); ImGui::SameLine();
            ImGui::Text("Widget"); ImGui::SameLine();
            ImGui::SmallButton("Widget##2"); ImGui::SameLine();
            ImGui::Button("Widget##3");

            // Tree
            const float spacing = ImGui::GetStyle().ItemInnerSpacing.x;
            ImGui::Button("Button##1");
            ImGui::SameLine(0.0f, spacing);
            if (ImGui::TreeNode("Node##1")) { for (int i = 0; i < 6; i++) ImGui::BulletText("Item %d..", i); ImGui::TreePop(); }    // Dummy tree data

            ImGui::AlignTextToFramePadding();         // Vertically align text node a bit lower so it'll be vertically centered with upcoming widget. Otherwise you can use SmallButton (smaller fit).
            bool node_open = ImGui::TreeNode("Node##2");  // Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add child content.
            ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##2");
            if (node_open) { for (int i = 0; i < 6; i++) ImGui::BulletText("Item %d..", i); ImGui::TreePop(); }   // Dummy tree data

            // Bullet
            ImGui::Button("Button##3");
            ImGui::SameLine(0.0f, spacing);
            ImGui::BulletText("Bullet text");

            ImGui::AlignTextToFramePadding();
            ImGui::BulletText("Node");
            ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##4");

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Scrolling"))
        {
            ImGui::TextWrapped("(Use SetScrollHere() or SetScrollFromPosY() to scroll to a given position.)");
            static bool track = true;
            static int track_line = 50, scroll_to_px = 200;
            ImGui::Checkbox("Track", &track);
            ImGui::PushItemWidth(100);
            ImGui::SameLine(130); track |= ImGui::DragInt("##line", &track_line, 0.25f, 0, 99, "Line = %d");
            bool scroll_to = ImGui::Button("Scroll To Pos");
            ImGui::SameLine(130); scroll_to |= ImGui::DragInt("##pos_y", &scroll_to_px, 1.00f, 0, 9999, "Y = %d px");
            ImGui::PopItemWidth();
            if (scroll_to) track = false;

            for (int i = 0; i < 5; i++)
            {
                if (i > 0) ImGui::SameLine();
                ImGui::BeginGroup();
                ImGui::Text("%s", i == 0 ? "Top" : i == 1 ? "25%" : i == 2 ? "Center" : i == 3 ? "75%" : "Bottom");
                ImGui::BeginChild(ImGui::GetID((void*)(intptr_t)i), ImVec2(ImGui::GetWindowWidth() * 0.17f, 200.0f), true);
                if (scroll_to)
                    ImGui::SetScrollFromPosY(ImGui::GetCursorStartPos().y + scroll_to_px, i * 0.25f);
                for (int line = 0; line < 100; line++)
                {
                    if (track && line == track_line)
                    {
                        ImGui::TextColored(ImColor(255,255,0), "Line %d", line);
                        ImGui::SetScrollHere(i * 0.25f); // 0.0f:top, 0.5f:center, 1.0f:bottom
                    }
                    else
                    {
                        ImGui::Text("Line %d", line);
                    }
                }
                float scroll_y = ImGui::GetScrollY(), scroll_max_y = ImGui::GetScrollMaxY();
                ImGui::EndChild();
                ImGui::Text("%.0f/%0.f", scroll_y, scroll_max_y);
                ImGui::EndGroup();
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Horizontal Scrolling"))
        {
            ImGui::Bullet(); ImGui::TextWrapped("Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.");
            ImGui::Bullet(); ImGui::TextWrapped("You may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().");
            static int lines = 7;
            ImGui::SliderInt("Lines", &lines, 1, 15);
            ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 3.0f);
            ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2.0f, 1.0f));
            ImGui::BeginChild("scrolling", ImVec2(0, ImGui::GetFrameHeightWithSpacing()*7 + 30), true, ImGuiWindowFlags_HorizontalScrollbar);
            for (int line = 0; line < lines; line++)
            {
                // Display random stuff (for the sake of this trivial demo we are using basic Button+SameLine. If you want to create your own time line for a real application you may be better off
                // manipulating the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets yourself. You may also want to use the lower-level ImDrawList API)
                int num_buttons = 10 + ((line & 1) ? line * 9 : line * 3);
                for (int n = 0; n < num_buttons; n++)
                {
                    if (n > 0) ImGui::SameLine();
                    ImGui::PushID(n + line * 1000);
                    char num_buf[16];
                    sprintf(num_buf, "%d", n);
                    const char* label = (!(n%15)) ? "FizzBuzz" : (!(n%3)) ? "Fizz" : (!(n%5)) ? "Buzz" : num_buf;
                    float hue = n*0.05f;
                    ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(hue, 0.6f, 0.6f));
                    ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(hue, 0.7f, 0.7f));
                    ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(hue, 0.8f, 0.8f));
                    ImGui::Button(label, ImVec2(40.0f + sinf((float)(line + n)) * 20.0f, 0.0f));
                    ImGui::PopStyleColor(3);
                    ImGui::PopID();
                }
            }
            float scroll_x = ImGui::GetScrollX(), scroll_max_x = ImGui::GetScrollMaxX();
            ImGui::EndChild();
            ImGui::PopStyleVar(2);
            float scroll_x_delta = 0.0f;
            ImGui::SmallButton("<<"); if (ImGui::IsItemActive()) scroll_x_delta = -ImGui::GetIO().DeltaTime * 1000.0f; ImGui::SameLine();
            ImGui::Text("Scroll from code"); ImGui::SameLine();
            ImGui::SmallButton(">>"); if (ImGui::IsItemActive()) scroll_x_delta = +ImGui::GetIO().DeltaTime * 1000.0f; ImGui::SameLine();
            ImGui::Text("%.0f/%.0f", scroll_x, scroll_max_x);
            if (scroll_x_delta != 0.0f)
            {
                ImGui::BeginChild("scrolling"); // Demonstrate a trick: you can use Begin to set yourself in the context of another window (here we are already out of your child window)
                ImGui::SetScrollX(ImGui::GetScrollX() + scroll_x_delta);
                ImGui::End();
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Clipping"))
        {
            static ImVec2 size(100, 100), offset(50, 20);
            ImGui::TextWrapped("On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.");
            ImGui::DragFloat2("size", (float*)&size, 0.5f, 0.0f, 200.0f, "%.0f");
            ImGui::TextWrapped("(Click and drag)");
            ImVec2 pos = ImGui::GetCursorScreenPos();
            ImVec4 clip_rect(pos.x, pos.y, pos.x+size.x, pos.y+size.y);
            ImGui::InvisibleButton("##dummy", size);
            if (ImGui::IsItemActive() && ImGui::IsMouseDragging()) { offset.x += ImGui::GetIO().MouseDelta.x; offset.y += ImGui::GetIO().MouseDelta.y; }
            ImGui::GetWindowDrawList()->AddRectFilled(pos, ImVec2(pos.x+size.x,pos.y+size.y), IM_COL32(90,90,120,255));
            ImGui::GetWindowDrawList()->AddText(ImGui::GetFont(), ImGui::GetFontSize()*2.0f, ImVec2(pos.x+offset.x,pos.y+offset.y), IM_COL32(255,255,255,255), "Line 1 hello\nLine 2 clip me!", NULL, 0.0f, &clip_rect);
            ImGui::TreePop();
        }
    }

    if (ImGui::CollapsingHeader("Popups & Modal windows"))
    {
        if (ImGui::TreeNode("Popups"))
        {
            ImGui::TextWrapped("When a popup is active, it inhibits interacting with windows that are behind the popup. Clicking outside the popup closes it.");

            static int selected_fish = -1;
            const char* names[] = { "Bream", "Haddock", "Mackerel", "Pollock", "Tilefish" };
            static bool toggles[] = { true, false, false, false, false };

            // Simple selection popup
            // (If you want to show the current selection inside the Button itself, you may want to build a string using the "###" operator to preserve a constant ID with a variable label)
            if (ImGui::Button("Select.."))
                ImGui::OpenPopup("select");
            ImGui::SameLine();
            ImGui::TextUnformatted(selected_fish == -1 ? "<None>" : names[selected_fish]);
            if (ImGui::BeginPopup("select"))
            {
                ImGui::Text("Aquarium");
                ImGui::Separator();
                for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                    if (ImGui::Selectable(names[i]))
                        selected_fish = i;
                ImGui::EndPopup();
            }

            // Showing a menu with toggles
            if (ImGui::Button("Toggle.."))
                ImGui::OpenPopup("toggle");
            if (ImGui::BeginPopup("toggle"))
            {
                for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                    ImGui::MenuItem(names[i], "", &toggles[i]);
                if (ImGui::BeginMenu("Sub-menu"))
                {
                    ImGui::MenuItem("Click me");
                    ImGui::EndMenu();
                }

                ImGui::Separator();
                ImGui::Text("Tooltip here");
                if (ImGui::IsItemHovered())
                    ImGui::SetTooltip("I am a tooltip over a popup");

                if (ImGui::Button("Stacked Popup"))
                    ImGui::OpenPopup("another popup");
                if (ImGui::BeginPopup("another popup"))
                {
                    for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                        ImGui::MenuItem(names[i], "", &toggles[i]);
                    if (ImGui::BeginMenu("Sub-menu"))
                    {
                        ImGui::MenuItem("Click me");
                        ImGui::EndMenu();
                    }
                    ImGui::EndPopup();
                }
                ImGui::EndPopup();
            }

            if (ImGui::Button("Popup Menu.."))
                ImGui::OpenPopup("FilePopup");
            if (ImGui::BeginPopup("FilePopup"))
            {
                ShowExampleMenuFile();
                ImGui::EndPopup();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Context menus"))
        {
            // BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:
            //    if (IsItemHovered() && IsMouseClicked(0))
            //       OpenPopup(id);
            //    return BeginPopup(id);
            // For more advanced uses you may want to replicate and cuztomize this code. This the comments inside BeginPopupContextItem() implementation.
            static float value = 0.5f;
            ImGui::Text("Value = %.3f (<-- right-click here)", value);
            if (ImGui::BeginPopupContextItem("item context menu"))
            {
                if (ImGui::Selectable("Set to zero")) value = 0.0f;
                if (ImGui::Selectable("Set to PI")) value = 3.1415f;
                ImGui::PushItemWidth(-1);
                ImGui::DragFloat("##Value", &value, 0.1f, 0.0f, 0.0f);
                ImGui::PopItemWidth();
                ImGui::EndPopup();
            }

            static char name[32] = "Label1";
            char buf[64]; sprintf(buf, "Button: %s###Button", name); // ### operator override ID ignoring the preceding label
            ImGui::Button(buf);
            if (ImGui::BeginPopupContextItem()) // When used after an item that has an ID (here the Button), we can skip providing an ID to BeginPopupContextItem().
            {
                ImGui::Text("Edit name:");
                ImGui::InputText("##edit", name, IM_ARRAYSIZE(name));
                if (ImGui::Button("Close"))
                    ImGui::CloseCurrentPopup();
                ImGui::EndPopup();
            }
            ImGui::SameLine(); ImGui::Text("(<-- right-click here)");

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Modals"))
        {
            ImGui::TextWrapped("Modal windows are like popups but the user cannot close them by clicking outside the window.");

            if (ImGui::Button("Delete.."))
                ImGui::OpenPopup("Delete?");
            if (ImGui::BeginPopupModal("Delete?", NULL, ImGuiWindowFlags_AlwaysAutoResize))
            {
                ImGui::Text("All those beautiful files will be deleted.\nThis operation cannot be undone!\n\n");
                ImGui::Separator();

                //static int dummy_i = 0;
                //ImGui::Combo("Combo", &dummy_i, "Delete\0Delete harder\0");

                static bool dont_ask_me_next_time = false;
                ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0,0));
                ImGui::Checkbox("Don't ask me next time", &dont_ask_me_next_time);
                ImGui::PopStyleVar();

                if (ImGui::Button("OK", ImVec2(120,0))) { ImGui::CloseCurrentPopup(); }
                ImGui::SetItemDefaultFocus();
                ImGui::SameLine();
                if (ImGui::Button("Cancel", ImVec2(120,0))) { ImGui::CloseCurrentPopup(); }
                ImGui::EndPopup();
            }

            if (ImGui::Button("Stacked modals.."))
                ImGui::OpenPopup("Stacked 1");
            if (ImGui::BeginPopupModal("Stacked 1"))
            {
                ImGui::Text("Hello from Stacked The First\nUsing style.Colors[ImGuiCol_ModalWindowDimBg] behind it.");
                static int item = 1;
                ImGui::Combo("Combo", &item, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");
                static float color[4] = { 0.4f,0.7f,0.0f,0.5f };
                ImGui::ColorEdit4("color", color);  // This is to test behavior of stacked regular popups over a modal

                if (ImGui::Button("Add another modal.."))
                    ImGui::OpenPopup("Stacked 2");
                if (ImGui::BeginPopupModal("Stacked 2"))
                {
                    ImGui::Text("Hello from Stacked The Second!");
                    if (ImGui::Button("Close"))
                        ImGui::CloseCurrentPopup();
                    ImGui::EndPopup();
                }

                if (ImGui::Button("Close"))
                    ImGui::CloseCurrentPopup();
                ImGui::EndPopup();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Menus inside a regular window"))
        {
            ImGui::TextWrapped("Below we are testing adding menu items to a regular window. It's rather unusual but should work!");
            ImGui::Separator();
            // NB: As a quirk in this very specific example, we want to differentiate the parent of this menu from the parent of the various popup menus above.
            // To do so we are encloding the items in a PushID()/PopID() block to make them two different menusets. If we don't, opening any popup above and hovering our menu here
            // would open it. This is because once a menu is active, we allow to switch to a sibling menu by just hovering on it, which is the desired behavior for regular menus.
            ImGui::PushID("foo");
            ImGui::MenuItem("Menu item", "CTRL+M");
            if (ImGui::BeginMenu("Menu inside a regular window"))
            {
                ShowExampleMenuFile();
                ImGui::EndMenu();
            }
            ImGui::PopID();
            ImGui::Separator();
            ImGui::TreePop();
        }
    }

    if (ImGui::CollapsingHeader("Columns"))
    {
        ImGui::PushID("Columns");

        // Basic columns
        if (ImGui::TreeNode("Basic"))
        {
            ImGui::Text("Without border:");
            ImGui::Columns(3, "mycolumns3", false);  // 3-ways, no border
            ImGui::Separator();
            for (int n = 0; n < 14; n++)
            {
                char label[32];
                sprintf(label, "Item %d", n);
                if (ImGui::Selectable(label)) {}
                //if (ImGui::Button(label, ImVec2(-1,0))) {}
                ImGui::NextColumn();
            }
            ImGui::Columns(1);
            ImGui::Separator();

            ImGui::Text("With border:");
            ImGui::Columns(4, "mycolumns"); // 4-ways, with border
            ImGui::Separator();
            ImGui::Text("ID"); ImGui::NextColumn();
            ImGui::Text("Name"); ImGui::NextColumn();
            ImGui::Text("Path"); ImGui::NextColumn();
            ImGui::Text("Hovered"); ImGui::NextColumn();
            ImGui::Separator();
            const char* names[3] = { "One", "Two", "Three" };
            const char* paths[3] = { "/path/one", "/path/two", "/path/three" };
            static int selected = -1;
            for (int i = 0; i < 3; i++)
            {
                char label[32];
                sprintf(label, "%04d", i);
                if (ImGui::Selectable(label, selected == i, ImGuiSelectableFlags_SpanAllColumns))
                    selected = i;
                bool hovered = ImGui::IsItemHovered();
                ImGui::NextColumn();
                ImGui::Text(names[i]); ImGui::NextColumn();
                ImGui::Text(paths[i]); ImGui::NextColumn();
                ImGui::Text("%d", hovered); ImGui::NextColumn();
            }
            ImGui::Columns(1);
            ImGui::Separator();
            ImGui::TreePop();
        }

        // Create multiple items in a same cell before switching to next column
        if (ImGui::TreeNode("Mixed items"))
        {
            ImGui::Columns(3, "mixed");
            ImGui::Separator();

            ImGui::Text("Hello");
            ImGui::Button("Banana");
            ImGui::NextColumn();

            ImGui::Text("ImGui");
            ImGui::Button("Apple");
            static float foo = 1.0f;
            ImGui::InputFloat("red", &foo, 0.05f, 0, "%.3f");
            ImGui::Text("An extra line here.");
            ImGui::NextColumn();

                ImGui::Text("Sailor");
            ImGui::Button("Corniflower");
            static float bar = 1.0f;
            ImGui::InputFloat("blue", &bar, 0.05f, 0, "%.3f");
            ImGui::NextColumn();

            if (ImGui::CollapsingHeader("Category A")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
            if (ImGui::CollapsingHeader("Category B")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
            if (ImGui::CollapsingHeader("Category C")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
            ImGui::Columns(1);
            ImGui::Separator();
            ImGui::TreePop();
        }

        // Word wrapping
        if (ImGui::TreeNode("Word-wrapping"))
        {
            ImGui::Columns(2, "word-wrapping");
            ImGui::Separator();
            ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");
            ImGui::TextWrapped("Hello Left");
            ImGui::NextColumn();
            ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");
            ImGui::TextWrapped("Hello Right");
            ImGui::Columns(1);
            ImGui::Separator();
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Borders"))
        {
            // NB: Future columns API should allow automatic horizontal borders.
            static bool h_borders = true;
            static bool v_borders = true;
            ImGui::Checkbox("horizontal", &h_borders);
            ImGui::SameLine();
            ImGui::Checkbox("vertical", &v_borders);
            ImGui::Columns(4, NULL, v_borders);
            for (int i = 0; i < 4*3; i++)
            {
                if (h_borders && ImGui::GetColumnIndex() == 0)
                    ImGui::Separator();
                ImGui::Text("%c%c%c", 'a'+i, 'a'+i, 'a'+i);
                ImGui::Text("Width %.2f\nOffset %.2f", ImGui::GetColumnWidth(), ImGui::GetColumnOffset());
                ImGui::NextColumn();
            }
            ImGui::Columns(1);
            if (h_borders)
                ImGui::Separator();
            ImGui::TreePop();
        }

        // Scrolling columns
        /*
        if (ImGui::TreeNode("Vertical Scrolling"))
        {
            ImGui::BeginChild("##header", ImVec2(0, ImGui::GetTextLineHeightWithSpacing()+ImGui::GetStyle().ItemSpacing.y));
            ImGui::Columns(3);
            ImGui::Text("ID"); ImGui::NextColumn();
            ImGui::Text("Name"); ImGui::NextColumn();
            ImGui::Text("Path"); ImGui::NextColumn();
            ImGui::Columns(1);
            ImGui::Separator();
            ImGui::EndChild();
            ImGui::BeginChild("##scrollingregion", ImVec2(0, 60));
            ImGui::Columns(3);
            for (int i = 0; i < 10; i++)
            {
                ImGui::Text("%04d", i); ImGui::NextColumn();
                ImGui::Text("Foobar"); ImGui::NextColumn();
                ImGui::Text("/path/foobar/%04d/", i); ImGui::NextColumn();
            }
            ImGui::Columns(1);
            ImGui::EndChild();
            ImGui::TreePop();
        }
        */

        if (ImGui::TreeNode("Horizontal Scrolling"))
        {
            ImGui::SetNextWindowContentSize(ImVec2(1500.0f, 0.0f));
            ImGui::BeginChild("##ScrollingRegion", ImVec2(0, ImGui::GetFontSize() * 20), false, ImGuiWindowFlags_HorizontalScrollbar);
            ImGui::Columns(10);
            int ITEMS_COUNT = 2000;
            ImGuiListClipper clipper(ITEMS_COUNT);  // Also demonstrate using the clipper for large list
            while (clipper.Step())
            {
                for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
                    for (int j = 0; j < 10; j++)
                    {
                        ImGui::Text("Line %d Column %d...", i, j);
                        ImGui::NextColumn();
                    }
            }
            ImGui::Columns(1);
            ImGui::EndChild();
            ImGui::TreePop();
        }

        bool node_open = ImGui::TreeNode("Tree within single cell");
        ImGui::SameLine(); ShowHelpMarker("NB: Tree node must be poped before ending the cell. There's no storage of state per-cell.");
        if (node_open)
        {
            ImGui::Columns(2, "tree items");
            ImGui::Separator();
            if (ImGui::TreeNode("Hello")) { ImGui::BulletText("Sailor"); ImGui::TreePop(); } ImGui::NextColumn();
            if (ImGui::TreeNode("Bonjour")) { ImGui::BulletText("Marin"); ImGui::TreePop(); } ImGui::NextColumn();
            ImGui::Columns(1);
            ImGui::Separator();
            ImGui::TreePop();
        }
        ImGui::PopID();
    }

    if (ImGui::CollapsingHeader("Filtering"))
    {
        static ImGuiTextFilter filter;
        ImGui::Text("Filter usage:\n"
                    "  \"\"         display all lines\n"
                    "  \"xxx\"      display lines containing \"xxx\"\n"
                    "  \"xxx,yyy\"  display lines containing \"xxx\" or \"yyy\"\n"
                    "  \"-xxx\"     hide lines containing \"xxx\"");
        filter.Draw();
        const char* lines[] = { "aaa1.c", "bbb1.c", "ccc1.c", "aaa2.cpp", "bbb2.cpp", "ccc2.cpp", "abc.h", "hello, world" };
        for (int i = 0; i < IM_ARRAYSIZE(lines); i++)
            if (filter.PassFilter(lines[i]))
                ImGui::BulletText("%s", lines[i]);
    }

    if (ImGui::CollapsingHeader("Inputs, Navigation & Focus"))
    {
        ImGuiIO& io = ImGui::GetIO();

        ImGui::Text("WantCaptureMouse: %d", io.WantCaptureMouse);
        ImGui::Text("WantCaptureKeyboard: %d", io.WantCaptureKeyboard);
        ImGui::Text("WantTextInput: %d", io.WantTextInput);
        ImGui::Text("WantSetMousePos: %d", io.WantSetMousePos);
        ImGui::Text("NavActive: %d, NavVisible: %d", io.NavActive, io.NavVisible);

        ImGui::Checkbox("io.MouseDrawCursor", &io.MouseDrawCursor);
        ImGui::SameLine(); ShowHelpMarker("Instruct ImGui to render a mouse cursor for you in software. Note that a mouse cursor rendered via your application GPU rendering path will feel more laggy than hardware cursor, but will be more in sync with your other visuals.\n\nSome desktop applications may use both kinds of cursors (e.g. enable software cursor only when resizing/dragging something).");

        ImGui::CheckboxFlags("io.ConfigFlags: NavEnableGamepad [beta]", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NavEnableGamepad);
        ImGui::CheckboxFlags("io.ConfigFlags: NavEnableKeyboard [beta]", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NavEnableKeyboard);
        ImGui::CheckboxFlags("io.ConfigFlags: NavEnableSetMousePos", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NavEnableSetMousePos);
        ImGui::SameLine(); ShowHelpMarker("Instruct navigation to move the mouse cursor. See comment for ImGuiConfigFlags_NavEnableSetMousePos.");
        ImGui::CheckboxFlags("io.ConfigFlags: NoMouseCursorChange", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NoMouseCursorChange);
        ImGui::SameLine(); ShowHelpMarker("Instruct back-end to not alter mouse cursor shape and visibility.");
        ImGui::Checkbox("io.ConfigCursorBlink", &io.ConfigCursorBlink);
        ImGui::SameLine(); ShowHelpMarker("Set to false to disable blinking cursor, for users who consider it distracting");
        ImGui::Checkbox("io.ConfigResizeWindowsFromEdges [beta]", &io.ConfigResizeWindowsFromEdges);
        ImGui::SameLine(); ShowHelpMarker("Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback.");

        if (ImGui::TreeNode("Keyboard, Mouse & Navigation State"))
        {
            if (ImGui::IsMousePosValid())
                ImGui::Text("Mouse pos: (%g, %g)", io.MousePos.x, io.MousePos.y);
            else
                ImGui::Text("Mouse pos: <INVALID>");
            ImGui::Text("Mouse delta: (%g, %g)", io.MouseDelta.x, io.MouseDelta.y);
            ImGui::Text("Mouse down:");     for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (io.MouseDownDuration[i] >= 0.0f)   { ImGui::SameLine(); ImGui::Text("b%d (%.02f secs)", i, io.MouseDownDuration[i]); }
            ImGui::Text("Mouse clicked:");  for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseClicked(i))          { ImGui::SameLine(); ImGui::Text("b%d", i); }
            ImGui::Text("Mouse dbl-clicked:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseDoubleClicked(i)) { ImGui::SameLine(); ImGui::Text("b%d", i); }
            ImGui::Text("Mouse released:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseReleased(i))         { ImGui::SameLine(); ImGui::Text("b%d", i); }
            ImGui::Text("Mouse wheel: %.1f", io.MouseWheel);

            ImGui::Text("Keys down:");      for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (io.KeysDownDuration[i] >= 0.0f)     { ImGui::SameLine(); ImGui::Text("%d (%.02f secs)", i, io.KeysDownDuration[i]); }
            ImGui::Text("Keys pressed:");   for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyPressed(i))             { ImGui::SameLine(); ImGui::Text("%d", i); }
            ImGui::Text("Keys release:");   for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyReleased(i))            { ImGui::SameLine(); ImGui::Text("%d", i); }
            ImGui::Text("Keys mods: %s%s%s%s", io.KeyCtrl ? "CTRL " : "", io.KeyShift ? "SHIFT " : "", io.KeyAlt ? "ALT " : "", io.KeySuper ? "SUPER " : "");

            ImGui::Text("NavInputs down:"); for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputs[i] > 0.0f)                    { ImGui::SameLine(); ImGui::Text("[%d] %.2f", i, io.NavInputs[i]); }
            ImGui::Text("NavInputs pressed:"); for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] == 0.0f)    { ImGui::SameLine(); ImGui::Text("[%d]", i); }
            ImGui::Text("NavInputs duration:"); for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] >= 0.0f)   { ImGui::SameLine(); ImGui::Text("[%d] %.2f", i, io.NavInputsDownDuration[i]); }

            ImGui::Button("Hovering me sets the\nkeyboard capture flag");
            if (ImGui::IsItemHovered())
                ImGui::CaptureKeyboardFromApp(true);
            ImGui::SameLine();
            ImGui::Button("Holding me clears the\nthe keyboard capture flag");
            if (ImGui::IsItemActive())
                ImGui::CaptureKeyboardFromApp(false);

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Tabbing"))
        {
            ImGui::Text("Use TAB/SHIFT+TAB to cycle through keyboard editable fields.");
            static char buf[32] = "dummy";
            ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));
            ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));
            ImGui::InputText("3", buf, IM_ARRAYSIZE(buf));
            ImGui::PushAllowKeyboardFocus(false);
            ImGui::InputText("4 (tab skip)", buf, IM_ARRAYSIZE(buf));
            //ImGui::SameLine(); ShowHelperMarker("Use ImGui::PushAllowKeyboardFocus(bool)\nto disable tabbing through certain widgets.");
            ImGui::PopAllowKeyboardFocus();
            ImGui::InputText("5", buf, IM_ARRAYSIZE(buf));
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Focus from code"))
        {
            bool focus_1 = ImGui::Button("Focus on 1"); ImGui::SameLine();
            bool focus_2 = ImGui::Button("Focus on 2"); ImGui::SameLine();
            bool focus_3 = ImGui::Button("Focus on 3");
            int has_focus = 0;
            static char buf[128] = "click on a button to set focus";

            if (focus_1) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 1;

            if (focus_2) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 2;

            ImGui::PushAllowKeyboardFocus(false);
            if (focus_3) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("3 (tab skip)", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 3;
            ImGui::PopAllowKeyboardFocus();

            if (has_focus)
                ImGui::Text("Item with focus: %d", has_focus);
            else
                ImGui::Text("Item with focus: <none>");

            // Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
            static float f3[3] = { 0.0f, 0.0f, 0.0f };
            int focus_ahead = -1;
            if (ImGui::Button("Focus on X")) focus_ahead = 0; ImGui::SameLine();
            if (ImGui::Button("Focus on Y")) focus_ahead = 1; ImGui::SameLine();
            if (ImGui::Button("Focus on Z")) focus_ahead = 2;
            if (focus_ahead != -1) ImGui::SetKeyboardFocusHere(focus_ahead);
            ImGui::SliderFloat3("Float3", &f3[0], 0.0f, 1.0f);

            ImGui::TextWrapped("NB: Cursor & selection are preserved when refocusing last used item in code.");
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Dragging"))
        {
            ImGui::TextWrapped("You can use ImGui::GetMouseDragDelta(0) to query for the dragged amount on any widget.");
            for (int button = 0; button < 3; button++)
                ImGui::Text("IsMouseDragging(%d):\n  w/ default threshold: %d,\n  w/ zero threshold: %d\n  w/ large threshold: %d",
                    button, ImGui::IsMouseDragging(button), ImGui::IsMouseDragging(button, 0.0f), ImGui::IsMouseDragging(button, 20.0f));
            ImGui::Button("Drag Me");
            if (ImGui::IsItemActive())
            {
                // Draw a line between the button and the mouse cursor
                ImDrawList* draw_list = ImGui::GetWindowDrawList();
                draw_list->PushClipRectFullScreen();
                draw_list->AddLine(io.MouseClickedPos[0], io.MousePos, ImGui::GetColorU32(ImGuiCol_Button), 4.0f);
                draw_list->PopClipRect();

                // Drag operations gets "unlocked" when the mouse has moved past a certain threshold (the default threshold is stored in io.MouseDragThreshold)
                // You can request a lower or higher threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta()
                ImVec2 value_raw = ImGui::GetMouseDragDelta(0, 0.0f);
                ImVec2 value_with_lock_threshold = ImGui::GetMouseDragDelta(0);
                ImVec2 mouse_delta = io.MouseDelta;
                ImGui::SameLine(); ImGui::Text("Raw (%.1f, %.1f), WithLockThresold (%.1f, %.1f), MouseDelta (%.1f, %.1f)", value_raw.x, value_raw.y, value_with_lock_threshold.x, value_with_lock_threshold.y, mouse_delta.x, mouse_delta.y);
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Mouse cursors"))
        {
            const char* mouse_cursors_names[] = { "Arrow", "TextInput", "Move", "ResizeNS", "ResizeEW", "ResizeNESW", "ResizeNWSE", "Hand" };
            IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) == ImGuiMouseCursor_COUNT);

            ImGui::Text("Current mouse cursor = %d: %s", ImGui::GetMouseCursor(), mouse_cursors_names[ImGui::GetMouseCursor()]);
            ImGui::Text("Hover to see mouse cursors:");
            ImGui::SameLine(); ShowHelpMarker("Your application can render a different mouse cursor based on what ImGui::GetMouseCursor() returns. If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, otherwise your backend needs to handle it.");
            for (int i = 0; i < ImGuiMouseCursor_COUNT; i++)
            {
                char label[32];
                sprintf(label, "Mouse cursor %d: %s", i, mouse_cursors_names[i]);
                ImGui::Bullet(); ImGui::Selectable(label, false);
                if (ImGui::IsItemHovered() || ImGui::IsItemFocused())
                    ImGui::SetMouseCursor(i);
            }
            ImGui::TreePop();
        }
    }

    // End of ShowDemoWindow()
    ImGui::End();
}

// Demo helper function to select among default colors. See ShowStyleEditor() for more advanced options.
// Here we use the simplified Combo() api that packs items into a single literal string. Useful for quick combo boxes where the choices are known locally.
bool ImGui::ShowStyleSelector(const char* label)
{
    static int style_idx = -1;
    if (ImGui::Combo(label, &style_idx, "Classic\0Dark\0Light\0"))
    {
        switch (style_idx)
        {
        case 0: ImGui::StyleColorsClassic(); break;
        case 1: ImGui::StyleColorsDark(); break;
        case 2: ImGui::StyleColorsLight(); break;
        }
        return true;
    }
    return false;
}

// Demo helper function to select among loaded fonts.
// Here we use the regular BeginCombo()/EndCombo() api which is more the more flexible one.
void ImGui::ShowFontSelector(const char* label)
{
    ImGuiIO& io = ImGui::GetIO();
    ImFont* font_current = ImGui::GetFont();
    if (ImGui::BeginCombo(label, font_current->GetDebugName()))
    {
        for (int n = 0; n < io.Fonts->Fonts.Size; n++)
            if (ImGui::Selectable(io.Fonts->Fonts[n]->GetDebugName(), io.Fonts->Fonts[n] == font_current))
                io.FontDefault = io.Fonts->Fonts[n];
        ImGui::EndCombo();
    }
    ImGui::SameLine();
    ShowHelpMarker(
        "- Load additional fonts with io.Fonts->AddFontFromFileTTF().\n"
        "- The font atlas is built when calling io.Fonts->GetTexDataAsXXXX() or io.Fonts->Build().\n"
        "- Read FAQ and documentation in misc/fonts/ for more details.\n"
        "- If you need to add/remove fonts at runtime (e.g. for DPI change), do it before calling NewFrame().");
}

void ImGui::ShowStyleEditor(ImGuiStyle* ref)
{
    // You can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it compares to an internally stored reference)
    ImGuiStyle& style = ImGui::GetStyle();
    static ImGuiStyle ref_saved_style;

    // Default to using internal storage as reference
    static bool init = true;
    if (init && ref == NULL)
        ref_saved_style = style;
    init = false;
    if (ref == NULL)
        ref = &ref_saved_style;

    ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.50f);

    if (ImGui::ShowStyleSelector("Colors##Selector"))
        ref_saved_style = style;
    ImGui::ShowFontSelector("Fonts##Selector");

    // Simplified Settings
    if (ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f"))
        style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding
    { bool window_border = (style.WindowBorderSize > 0.0f); if (ImGui::Checkbox("WindowBorder", &window_border)) style.WindowBorderSize = window_border ? 1.0f : 0.0f; }
    ImGui::SameLine();
    { bool frame_border = (style.FrameBorderSize > 0.0f); if (ImGui::Checkbox("FrameBorder", &frame_border)) style.FrameBorderSize = frame_border ? 1.0f : 0.0f; }
    ImGui::SameLine();
    { bool popup_border = (style.PopupBorderSize > 0.0f); if (ImGui::Checkbox("PopupBorder", &popup_border)) style.PopupBorderSize = popup_border ? 1.0f : 0.0f; }

    // Save/Revert button
    if (ImGui::Button("Save Ref"))
        *ref = ref_saved_style = style;
    ImGui::SameLine();
    if (ImGui::Button("Revert Ref"))
        style = *ref;
    ImGui::SameLine();
    ShowHelpMarker("Save/Revert in local non-persistent storage. Default Colors definition are not affected. Use \"Export Colors\" below to save them somewhere.");

    if (ImGui::TreeNode("Rendering"))
    {
        ImGui::Checkbox("Anti-aliased lines", &style.AntiAliasedLines); ImGui::SameLine(); ShowHelpMarker("When disabling anti-aliasing lines, you'll probably want to disable borders in your style as well.");
        ImGui::Checkbox("Anti-aliased fill", &style.AntiAliasedFill);
        ImGui::PushItemWidth(100);
        ImGui::DragFloat("Curve Tessellation Tolerance", &style.CurveTessellationTol, 0.02f, 0.10f, FLT_MAX, NULL, 2.0f);
        if (style.CurveTessellationTol < 0.0f) style.CurveTessellationTol = 0.10f;
        ImGui::DragFloat("Global Alpha", &style.Alpha, 0.005f, 0.20f, 1.0f, "%.2f"); // Not exposing zero here so user doesn't "lose" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.
        ImGui::PopItemWidth();
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Settings"))
    {
        ImGui::SliderFloat2("WindowPadding", (float*)&style.WindowPadding, 0.0f, 20.0f, "%.0f");
        ImGui::SliderFloat("PopupRounding", &style.PopupRounding, 0.0f, 16.0f, "%.0f");
        ImGui::SliderFloat2("FramePadding", (float*)&style.FramePadding, 0.0f, 20.0f, "%.0f");
        ImGui::SliderFloat2("ItemSpacing", (float*)&style.ItemSpacing, 0.0f, 20.0f, "%.0f");
        ImGui::SliderFloat2("ItemInnerSpacing", (float*)&style.ItemInnerSpacing, 0.0f, 20.0f, "%.0f");
        ImGui::SliderFloat2("TouchExtraPadding", (float*)&style.TouchExtraPadding, 0.0f, 10.0f, "%.0f");
        ImGui::SliderFloat("IndentSpacing", &style.IndentSpacing, 0.0f, 30.0f, "%.0f");
        ImGui::SliderFloat("ScrollbarSize", &style.ScrollbarSize, 1.0f, 20.0f, "%.0f");
        ImGui::SliderFloat("GrabMinSize", &style.GrabMinSize, 1.0f, 20.0f, "%.0f");
        ImGui::Text("BorderSize");
        ImGui::SliderFloat("WindowBorderSize", &style.WindowBorderSize, 0.0f, 1.0f, "%.0f");
        ImGui::SliderFloat("ChildBorderSize", &style.ChildBorderSize, 0.0f, 1.0f, "%.0f");
        ImGui::SliderFloat("PopupBorderSize", &style.PopupBorderSize, 0.0f, 1.0f, "%.0f");
        ImGui::SliderFloat("FrameBorderSize", &style.FrameBorderSize, 0.0f, 1.0f, "%.0f");
        ImGui::Text("Rounding");
        ImGui::SliderFloat("WindowRounding", &style.WindowRounding, 0.0f, 14.0f, "%.0f");
        ImGui::SliderFloat("ChildRounding", &style.ChildRounding, 0.0f, 16.0f, "%.0f");
        ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f");
        ImGui::SliderFloat("ScrollbarRounding", &style.ScrollbarRounding, 0.0f, 12.0f, "%.0f");
        ImGui::SliderFloat("GrabRounding", &style.GrabRounding, 0.0f, 12.0f, "%.0f");
        ImGui::Text("Alignment");
        ImGui::SliderFloat2("WindowTitleAlign", (float*)&style.WindowTitleAlign, 0.0f, 1.0f, "%.2f");
        ImGui::SliderFloat2("ButtonTextAlign", (float*)&style.ButtonTextAlign, 0.0f, 1.0f, "%.2f"); ImGui::SameLine(); ShowHelpMarker("Alignment applies when a button is larger than its text content.");
        ImGui::Text("Safe Area Padding"); ImGui::SameLine(); ShowHelpMarker("Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).");
        ImGui::SliderFloat2("DisplaySafeAreaPadding", (float*)&style.DisplaySafeAreaPadding, 0.0f, 30.0f, "%.0f");
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Colors"))
    {
        static int output_dest = 0;
        static bool output_only_modified = true;
        if (ImGui::Button("Export Unsaved"))
        {
            if (output_dest == 0)
                ImGui::LogToClipboard();
            else
                ImGui::LogToTTY();
            ImGui::LogText("ImVec4* colors = ImGui::GetStyle().Colors;" IM_NEWLINE);
            for (int i = 0; i < ImGuiCol_COUNT; i++)
            {
                const ImVec4& col = style.Colors[i];
                const char* name = ImGui::GetStyleColorName(i);
                if (!output_only_modified || memcmp(&col, &ref->Colors[i], sizeof(ImVec4)) != 0)
                    ImGui::LogText("colors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);" IM_NEWLINE, name, 23-(int)strlen(name), "", col.x, col.y, col.z, col.w);
            }
            ImGui::LogFinish();
        }
        ImGui::SameLine(); ImGui::PushItemWidth(120); ImGui::Combo("##output_type", &output_dest, "To Clipboard\0To TTY\0"); ImGui::PopItemWidth();
        ImGui::SameLine(); ImGui::Checkbox("Only Modified Colors", &output_only_modified);

        ImGui::Text("Tip: Left-click on colored square to open color picker,\nRight-click to open edit options menu.");

        static ImGuiTextFilter filter;
        filter.Draw("Filter colors", 200);

        static ImGuiColorEditFlags alpha_flags = 0;
        ImGui::RadioButton("Opaque", &alpha_flags, 0); ImGui::SameLine();
        ImGui::RadioButton("Alpha", &alpha_flags, ImGuiColorEditFlags_AlphaPreview); ImGui::SameLine();
        ImGui::RadioButton("Both", &alpha_flags, ImGuiColorEditFlags_AlphaPreviewHalf);

        ImGui::BeginChild("#colors", ImVec2(0, 300), true, ImGuiWindowFlags_AlwaysVerticalScrollbar | ImGuiWindowFlags_AlwaysHorizontalScrollbar | ImGuiWindowFlags_NavFlattened);
        ImGui::PushItemWidth(-160);
        for (int i = 0; i < ImGuiCol_COUNT; i++)
        {
            const char* name = ImGui::GetStyleColorName(i);
            if (!filter.PassFilter(name))
                continue;
            ImGui::PushID(i);
            ImGui::ColorEdit4("##color", (float*)&style.Colors[i], ImGuiColorEditFlags_AlphaBar | alpha_flags);
            if (memcmp(&style.Colors[i], &ref->Colors[i], sizeof(ImVec4)) != 0)
            {
                // Tips: in a real user application, you may want to merge and use an icon font into the main font, so instead of "Save"/"Revert" you'd use icons.
                // Read the FAQ and misc/fonts/README.txt about using icon fonts. It's really easy and super convenient!
                ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Save")) ref->Colors[i] = style.Colors[i];
                ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Revert")) style.Colors[i] = ref->Colors[i];
            }
            ImGui::SameLine(0.0f, style.ItemInnerSpacing.x);
            ImGui::TextUnformatted(name);
            ImGui::PopID();
        }
        ImGui::PopItemWidth();
        ImGui::EndChild();

        ImGui::TreePop();
    }

    bool fonts_opened = ImGui::TreeNode("Fonts", "Fonts (%d)", ImGui::GetIO().Fonts->Fonts.Size);
    if (fonts_opened)
    {
        ImFontAtlas* atlas = ImGui::GetIO().Fonts;
        if (ImGui::TreeNode("Atlas texture", "Atlas texture (%dx%d pixels)", atlas->TexWidth, atlas->TexHeight))
        {
            ImGui::Image(atlas->TexID, ImVec2((float)atlas->TexWidth, (float)atlas->TexHeight), ImVec2(0,0), ImVec2(1,1), ImColor(255,255,255,255), ImColor(255,255,255,128));
            ImGui::TreePop();
        }
        ImGui::PushItemWidth(100);
        for (int i = 0; i < atlas->Fonts.Size; i++)
        {
            ImFont* font = atlas->Fonts[i];
            ImGui::PushID(font);
            bool font_details_opened = ImGui::TreeNode(font, "Font %d: \'%s\', %.2f px, %d glyphs", i, font->ConfigData ? font->ConfigData[0].Name : "", font->FontSize, font->Glyphs.Size);
            ImGui::SameLine(); if (ImGui::SmallButton("Set as default")) ImGui::GetIO().FontDefault = font;
            if (font_details_opened)
            {
                ImGui::PushFont(font);
                ImGui::Text("The quick brown fox jumps over the lazy dog");
                ImGui::PopFont();
                ImGui::DragFloat("Font scale", &font->Scale, 0.005f, 0.3f, 2.0f, "%.1f");   // Scale only this font
                ImGui::SameLine(); ShowHelpMarker("Note than the default embedded font is NOT meant to be scaled.\n\nFont are currently rendered into bitmaps at a given size at the time of building the atlas. You may oversample them to get some flexibility with scaling. You can also render at multiple sizes and select which one to use at runtime.\n\n(Glimmer of hope: the atlas system should hopefully be rewritten in the future to make scaling more natural and automatic.)");
                ImGui::InputFloat("Font offset", &font->DisplayOffset.y, 1, 1, "%.0f");
                ImGui::Text("Ascent: %f, Descent: %f, Height: %f", font->Ascent, font->Descent, font->Ascent - font->Descent);
                ImGui::Text("Fallback character: '%c' (%d)", font->FallbackChar, font->FallbackChar);
                ImGui::Text("Texture surface: %d pixels (approx) ~ %dx%d", font->MetricsTotalSurface, (int)sqrtf((float)font->MetricsTotalSurface), (int)sqrtf((float)font->MetricsTotalSurface));
                for (int config_i = 0; config_i < font->ConfigDataCount; config_i++)
                    if (ImFontConfig* cfg = &font->ConfigData[config_i])
                        ImGui::BulletText("Input %d: \'%s\', Oversample: (%d,%d), PixelSnapH: %d", config_i, cfg->Name, cfg->OversampleH, cfg->OversampleV, cfg->PixelSnapH);
                if (ImGui::TreeNode("Glyphs", "Glyphs (%d)", font->Glyphs.Size))
                {
                    // Display all glyphs of the fonts in separate pages of 256 characters
                    for (int base = 0; base < 0x10000; base += 256)
                    {
                        int count = 0;
                        for (int n = 0; n < 256; n++)
                            count += font->FindGlyphNoFallback((ImWchar)(base + n)) ? 1 : 0;
                        if (count > 0 && ImGui::TreeNode((void*)(intptr_t)base, "U+%04X..U+%04X (%d %s)", base, base+255, count, count > 1 ? "glyphs" : "glyph"))
                        {
                            float cell_size = font->FontSize * 1;
                            float cell_spacing = style.ItemSpacing.y;
                            ImVec2 base_pos = ImGui::GetCursorScreenPos();
                            ImDrawList* draw_list = ImGui::GetWindowDrawList();
                            for (int n = 0; n < 256; n++)
                            {
                                ImVec2 cell_p1(base_pos.x + (n % 16) * (cell_size + cell_spacing), base_pos.y + (n / 16) * (cell_size + cell_spacing));
                                ImVec2 cell_p2(cell_p1.x + cell_size, cell_p1.y + cell_size);
                                const ImFontGlyph* glyph = font->FindGlyphNoFallback((ImWchar)(base+n));
                                draw_list->AddRect(cell_p1, cell_p2, glyph ? IM_COL32(255,255,255,100) : IM_COL32(255,255,255,50));
                                if (glyph)
                                    font->RenderChar(draw_list, cell_size, cell_p1, ImGui::GetColorU32(ImGuiCol_Text), (ImWchar)(base+n)); // We use ImFont::RenderChar as a shortcut because we don't have UTF-8 conversion functions available to generate a string.
                                if (glyph && ImGui::IsMouseHoveringRect(cell_p1, cell_p2))
                                {
                                    ImGui::BeginTooltip();
                                    ImGui::Text("Codepoint: U+%04X", base+n);
                                    ImGui::Separator();
                                    ImGui::Text("AdvanceX: %.1f", glyph->AdvanceX);
                                    ImGui::Text("Pos: (%.2f,%.2f)->(%.2f,%.2f)", glyph->X0, glyph->Y0, glyph->X1, glyph->Y1);
                                    ImGui::Text("UV: (%.3f,%.3f)->(%.3f,%.3f)", glyph->U0, glyph->V0, glyph->U1, glyph->V1);
                                    ImGui::EndTooltip();
                                }
                            }
                            ImGui::Dummy(ImVec2((cell_size + cell_spacing) * 16, (cell_size + cell_spacing) * 16));
                            ImGui::TreePop();
                        }
                    }
                    ImGui::TreePop();
                }
                ImGui::TreePop();
            }
            ImGui::PopID();
        }
        static float window_scale = 1.0f;
        ImGui::DragFloat("this window scale", &window_scale, 0.005f, 0.3f, 2.0f, "%.1f");              // scale only this window
        ImGui::DragFloat("global scale", &ImGui::GetIO().FontGlobalScale, 0.005f, 0.3f, 2.0f, "%.1f"); // scale everything
        ImGui::PopItemWidth();
        ImGui::SetWindowFontScale(window_scale);
        ImGui::TreePop();
    }

    ImGui::PopItemWidth();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: MAIN MENU BAR
//-----------------------------------------------------------------------------

// Demonstrate creating a fullscreen menu bar and populating it.
static void ShowExampleAppMainMenuBar()
{
    if (ImGui::BeginMainMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Edit"))
        {
            if (ImGui::MenuItem("Undo", "CTRL+Z")) {}
            if (ImGui::MenuItem("Redo", "CTRL+Y", false, false)) {}  // Disabled item
            ImGui::Separator();
            if (ImGui::MenuItem("Cut", "CTRL+X")) {}
            if (ImGui::MenuItem("Copy", "CTRL+C")) {}
            if (ImGui::MenuItem("Paste", "CTRL+V")) {}
            ImGui::EndMenu();
        }
        ImGui::EndMainMenuBar();
    }
}

static void ShowExampleMenuFile()
{
    ImGui::MenuItem("(dummy menu)", NULL, false, false);
    if (ImGui::MenuItem("New")) {}
    if (ImGui::MenuItem("Open", "Ctrl+O")) {}
    if (ImGui::BeginMenu("Open Recent"))
    {
        ImGui::MenuItem("fish_hat.c");
        ImGui::MenuItem("fish_hat.inl");
        ImGui::MenuItem("fish_hat.h");
        if (ImGui::BeginMenu("More.."))
        {
            ImGui::MenuItem("Hello");
            ImGui::MenuItem("Sailor");
            if (ImGui::BeginMenu("Recurse.."))
            {
                ShowExampleMenuFile();
                ImGui::EndMenu();
            }
            ImGui::EndMenu();
        }
        ImGui::EndMenu();
    }
    if (ImGui::MenuItem("Save", "Ctrl+S")) {}
    if (ImGui::MenuItem("Save As..")) {}
    ImGui::Separator();
    if (ImGui::BeginMenu("Options"))
    {
        static bool enabled = true;
        ImGui::MenuItem("Enabled", "", &enabled);
        ImGui::BeginChild("child", ImVec2(0, 60), true);
        for (int i = 0; i < 10; i++)
            ImGui::Text("Scrolling Text %d", i);
        ImGui::EndChild();
        static float f = 0.5f;
        static int n = 0;
        static bool b = true;
        ImGui::SliderFloat("Value", &f, 0.0f, 1.0f);
        ImGui::InputFloat("Input", &f, 0.1f);
        ImGui::Combo("Combo", &n, "Yes\0No\0Maybe\0\0");
        ImGui::Checkbox("Check", &b);
        ImGui::EndMenu();
    }
    if (ImGui::BeginMenu("Colors"))
    {
        float sz = ImGui::GetTextLineHeight();
        for (int i = 0; i < ImGuiCol_COUNT; i++)
        {
            const char* name = ImGui::GetStyleColorName((ImGuiCol)i);
            ImVec2 p = ImGui::GetCursorScreenPos();
            ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x+sz, p.y+sz), ImGui::GetColorU32((ImGuiCol)i));
            ImGui::Dummy(ImVec2(sz, sz));
            ImGui::SameLine();
            ImGui::MenuItem(name);
        }
        ImGui::EndMenu();
    }
    if (ImGui::BeginMenu("Disabled", false)) // Disabled
    {
        IM_ASSERT(0);
    }
    if (ImGui::MenuItem("Checked", NULL, true)) {}
    if (ImGui::MenuItem("Quit", "Alt+F4")) {}
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: CONSOLE
//-----------------------------------------------------------------------------

// Demonstrating creating a simple console window, with scrolling, filtering, completion and history.
// For the console example, here we are using a more C++ like approach of declaring a class to hold the data and the functions.
struct ExampleAppConsole
{
    char                  InputBuf[256];
    ImVector<char*>       Items;
    bool                  ScrollToBottom;
    ImVector<char*>       History;
    int                   HistoryPos;    // -1: new line, 0..History.Size-1 browsing history.
    ImVector<const char*> Commands;

    ExampleAppConsole()
    {
        ClearLog();
        memset(InputBuf, 0, sizeof(InputBuf));
        HistoryPos = -1;
        Commands.push_back("HELP");
        Commands.push_back("HISTORY");
        Commands.push_back("CLEAR");
        Commands.push_back("CLASSIFY");  // "classify" is only here to provide an example of "C"+[tab] completing to "CL" and displaying matches.
        AddLog("Welcome to Dear ImGui!");
    }
    ~ExampleAppConsole()
    {
        ClearLog();
        for (int i = 0; i < History.Size; i++)
            free(History[i]);
    }

    // Portable helpers
    static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; } return d; }
    static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; n--; } return d; }
    static char* Strdup(const char *str)                             { size_t len = strlen(str) + 1; void* buff = malloc(len); return (char*)memcpy(buff, (const void*)str, len); }
    static void  Strtrim(char* str)                                  { char* str_end = str + strlen(str); while (str_end > str && str_end[-1] == ' ') str_end--; *str_end = 0; }

    void    ClearLog()
    {
        for (int i = 0; i < Items.Size; i++)
            free(Items[i]);
        Items.clear();
        ScrollToBottom = true;
    }

    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)
    {
        // FIXME-OPT
        char buf[1024];
        va_list args;
        va_start(args, fmt);
        vsnprintf(buf, IM_ARRAYSIZE(buf), fmt, args);
        buf[IM_ARRAYSIZE(buf)-1] = 0;
        va_end(args);
        Items.push_back(Strdup(buf));
        ScrollToBottom = true;
    }

    void    Draw(const char* title, bool* p_open)
    {
        ImGui::SetNextWindowSize(ImVec2(520,600), ImGuiCond_FirstUseEver);
        if (!ImGui::Begin(title, p_open))
        {
            ImGui::End();
            return;
        }

        // As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar. So e.g. IsItemHovered() will return true when hovering the title bar.
        // Here we create a context menu only available from the title bar.
        if (ImGui::BeginPopupContextItem())
        {
            if (ImGui::MenuItem("Close Console"))
                *p_open = false;
            ImGui::EndPopup();
        }

        ImGui::TextWrapped("This example implements a console with basic coloring, completion and history. A more elaborate implementation may want to store entries along with extra data such as timestamp, emitter, etc.");
        ImGui::TextWrapped("Enter 'HELP' for help, press TAB to use text completion.");

        // TODO: display items starting from the bottom

        if (ImGui::SmallButton("Add Dummy Text")) { AddLog("%d some text", Items.Size); AddLog("some more text"); AddLog("display very important message here!"); } ImGui::SameLine();
        if (ImGui::SmallButton("Add Dummy Error")) { AddLog("[error] something went wrong"); } ImGui::SameLine();
        if (ImGui::SmallButton("Clear")) { ClearLog(); } ImGui::SameLine();
        bool copy_to_clipboard = ImGui::SmallButton("Copy"); ImGui::SameLine();
        if (ImGui::SmallButton("Scroll to bottom")) ScrollToBottom = true;
        //static float t = 0.0f; if (ImGui::GetTime() - t > 0.02f) { t = ImGui::GetTime(); AddLog("Spam %f", t); }

        ImGui::Separator();

        ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0,0));
        static ImGuiTextFilter filter;
        filter.Draw("Filter (\"incl,-excl\") (\"error\")", 180);
        ImGui::PopStyleVar();
        ImGui::Separator();

        const float footer_height_to_reserve = ImGui::GetStyle().ItemSpacing.y + ImGui::GetFrameHeightWithSpacing(); // 1 separator, 1 input text
        ImGui::BeginChild("ScrollingRegion", ImVec2(0, -footer_height_to_reserve), false, ImGuiWindowFlags_HorizontalScrollbar); // Leave room for 1 separator + 1 InputText
        if (ImGui::BeginPopupContextWindow())
        {
            if (ImGui::Selectable("Clear")) ClearLog();
            ImGui::EndPopup();
        }

        // Display every line as a separate entry so we can change their color or add custom widgets. If you only want raw text you can use ImGui::TextUnformatted(log.begin(), log.end());
        // NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping to only process visible items.
        // You can seek and display only the lines that are visible using the ImGuiListClipper helper, if your elements are evenly spaced and you have cheap random access to the elements.
        // To use the clipper we could replace the 'for (int i = 0; i < Items.Size; i++)' loop with:
        //     ImGuiListClipper clipper(Items.Size);
        //     while (clipper.Step())
        //         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
        // However, note that you can not use this code as is if a filter is active because it breaks the 'cheap random-access' property. We would need random-access on the post-filtered list.
        // A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices that passed the filtering test, recomputing this array when user changes the filter,
        // and appending newly elements as they are inserted. This is left as a task to the user until we can manage to improve this example code!
        // If your items are of variable size you may want to implement code similar to what ImGuiListClipper does. Or split your data into fixed height items to allow random-seeking into your list.
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4,1)); // Tighten spacing
        if (copy_to_clipboard)
            ImGui::LogToClipboard();
        ImVec4 col_default_text = ImGui::GetStyleColorVec4(ImGuiCol_Text);
        for (int i = 0; i < Items.Size; i++)
        {
            const char* item = Items[i];
            if (!filter.PassFilter(item))
                continue;
            ImVec4 col = col_default_text;
            if (strstr(item, "[error]")) col = ImColor(1.0f,0.4f,0.4f,1.0f);
            else if (strncmp(item, "# ", 2) == 0) col = ImColor(1.0f,0.78f,0.58f,1.0f);
            ImGui::PushStyleColor(ImGuiCol_Text, col);
            ImGui::TextUnformatted(item);
            ImGui::PopStyleColor();
        }
        if (copy_to_clipboard)
            ImGui::LogFinish();
        if (ScrollToBottom)
            ImGui::SetScrollHere(1.0f);
        ScrollToBottom = false;
        ImGui::PopStyleVar();
        ImGui::EndChild();
        ImGui::Separator();

        // Command-line
        bool reclaim_focus = false;
        if (ImGui::InputText("Input", InputBuf, IM_ARRAYSIZE(InputBuf), ImGuiInputTextFlags_EnterReturnsTrue|ImGuiInputTextFlags_CallbackCompletion|ImGuiInputTextFlags_CallbackHistory, &TextEditCallbackStub, (void*)this))
        {
            char* s = InputBuf;
            Strtrim(s);
            if (s[0])
                ExecCommand(s);
            strcpy(s, "");
            reclaim_focus = true;
        }

        // Auto-focus on window apparition
        ImGui::SetItemDefaultFocus();
        if (reclaim_focus)
            ImGui::SetKeyboardFocusHere(-1); // Auto focus previous widget

        ImGui::End();
    }

    void    ExecCommand(const char* command_line)
    {
        AddLog("# %s\n", command_line);

        // Insert into history. First find match and delete it so it can be pushed to the back. This isn't trying to be smart or optimal.
        HistoryPos = -1;
        for (int i = History.Size-1; i >= 0; i--)
            if (Stricmp(History[i], command_line) == 0)
            {
                free(History[i]);
                History.erase(History.begin() + i);
                break;
            }
        History.push_back(Strdup(command_line));

        // Process command
        if (Stricmp(command_line, "CLEAR") == 0)
        {
            ClearLog();
        }
        else if (Stricmp(command_line, "HELP") == 0)
        {
            AddLog("Commands:");
            for (int i = 0; i < Commands.Size; i++)
                AddLog("- %s", Commands[i]);
        }
        else if (Stricmp(command_line, "HISTORY") == 0)
        {
            int first = History.Size - 10;
            for (int i = first > 0 ? first : 0; i < History.Size; i++)
                AddLog("%3d: %s\n", i, History[i]);
        }
        else
        {
            AddLog("Unknown command: '%s'\n", command_line);
        }
    }

    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data) // In C++11 you are better off using lambdas for this sort of forwarding callbacks
    {
        ExampleAppConsole* console = (ExampleAppConsole*)data->UserData;
        return console->TextEditCallback(data);
    }

    int     TextEditCallback(ImGuiInputTextCallbackData* data)
    {
        //AddLog("cursor: %d, selection: %d-%d", data->CursorPos, data->SelectionStart, data->SelectionEnd);
        switch (data->EventFlag)
        {
        case ImGuiInputTextFlags_CallbackCompletion:
            {
                // Example of TEXT COMPLETION

                // Locate beginning of current word
                const char* word_end = data->Buf + data->CursorPos;
                const char* word_start = word_end;
                while (word_start > data->Buf)
                {
                    const char c = word_start[-1];
                    if (c == ' ' || c == '\t' || c == ',' || c == ';')
                        break;
                    word_start--;
                }

                // Build a list of candidates
                ImVector<const char*> candidates;
                for (int i = 0; i < Commands.Size; i++)
                    if (Strnicmp(Commands[i], word_start, (int)(word_end-word_start)) == 0)
                        candidates.push_back(Commands[i]);

                if (candidates.Size == 0)
                {
                    // No match
                    AddLog("No match for \"%.*s\"!\n", (int)(word_end-word_start), word_start);
                }
                else if (candidates.Size == 1)
                {
                    // Single match. Delete the beginning of the word and replace it entirely so we've got nice casing
                    data->DeleteChars((int)(word_start-data->Buf), (int)(word_end-word_start));
                    data->InsertChars(data->CursorPos, candidates[0]);
                    data->InsertChars(data->CursorPos, " ");
                }
                else
                {
                    // Multiple matches. Complete as much as we can, so inputing "C" will complete to "CL" and display "CLEAR" and "CLASSIFY"
                    int match_len = (int)(word_end - word_start);
                    for (;;)
                    {
                        int c = 0;
                        bool all_candidates_matches = true;
                        for (int i = 0; i < candidates.Size && all_candidates_matches; i++)
                            if (i == 0)
                                c = toupper(candidates[i][match_len]);
                            else if (c == 0 || c != toupper(candidates[i][match_len]))
                                all_candidates_matches = false;
                        if (!all_candidates_matches)
                            break;
                        match_len++;
                    }

                    if (match_len > 0)
                    {
                        data->DeleteChars((int)(word_start - data->Buf), (int)(word_end-word_start));
                        data->InsertChars(data->CursorPos, candidates[0], candidates[0] + match_len);
                    }

                    // List matches
                    AddLog("Possible matches:\n");
                    for (int i = 0; i < candidates.Size; i++)
                        AddLog("- %s\n", candidates[i]);
                }

                break;
            }
        case ImGuiInputTextFlags_CallbackHistory:
            {
                // Example of HISTORY
                const int prev_history_pos = HistoryPos;
                if (data->EventKey == ImGuiKey_UpArrow)
                {
                    if (HistoryPos == -1)
                        HistoryPos = History.Size - 1;
                    else if (HistoryPos > 0)
                        HistoryPos--;
                }
                else if (data->EventKey == ImGuiKey_DownArrow)
                {
                    if (HistoryPos != -1)
                        if (++HistoryPos >= History.Size)
                            HistoryPos = -1;
                }

                // A better implementation would preserve the data on the current input line along with cursor position.
                if (prev_history_pos != HistoryPos)
                {
                    const char* history_str = (HistoryPos >= 0) ? History[HistoryPos] : "";
                    data->DeleteChars(0, data->BufTextLen);
                    data->InsertChars(0, history_str);
                }
            }
        }
        return 0;
    }
};

static void ShowExampleAppConsole(bool* p_open)
{
    static ExampleAppConsole console;
    console.Draw("Example: Console", p_open);
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: LOG
//-----------------------------------------------------------------------------

// Usage:
//  static ExampleAppLog my_log;
//  my_log.AddLog("Hello %d world\n", 123);
//  my_log.Draw("title");
struct ExampleAppLog
{
    ImGuiTextBuffer     Buf;
    ImGuiTextFilter     Filter;
    ImVector<int>       LineOffsets;        // Index to lines offset
    bool                ScrollToBottom;

    void    Clear()     { Buf.clear(); LineOffsets.clear(); }

    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)
    {
        int old_size = Buf.size();
        va_list args;
        va_start(args, fmt);
        Buf.appendfv(fmt, args);
        va_end(args);
        for (int new_size = Buf.size(); old_size < new_size; old_size++)
            if (Buf[old_size] == '\n')
                LineOffsets.push_back(old_size);
        ScrollToBottom = true;
    }

    void    Draw(const char* title, bool* p_open = NULL)
    {
        ImGui::SetNextWindowSize(ImVec2(500,400), ImGuiCond_FirstUseEver);
        if (!ImGui::Begin(title, p_open))
        {
            ImGui::End();
            return;
        }
        if (ImGui::Button("Clear")) Clear();
        ImGui::SameLine();
        bool copy = ImGui::Button("Copy");
        ImGui::SameLine();
        Filter.Draw("Filter", -100.0f);
        ImGui::Separator();
        ImGui::BeginChild("scrolling", ImVec2(0,0), false, ImGuiWindowFlags_HorizontalScrollbar);
        if (copy) ImGui::LogToClipboard();

        if (Filter.IsActive())
        {
            const char* buf_begin = Buf.begin();
            const char* line = buf_begin;
            for (int line_no = 0; line != NULL; line_no++)
            {
                const char* line_end = (line_no < LineOffsets.Size) ? buf_begin + LineOffsets[line_no] : NULL;
                if (Filter.PassFilter(line, line_end))
                    ImGui::TextUnformatted(line, line_end);
                line = line_end && line_end[1] ? line_end + 1 : NULL;
            }
        }
        else
        {
            ImGui::TextUnformatted(Buf.begin());
        }

        if (ScrollToBottom)
            ImGui::SetScrollHere(1.0f);
        ScrollToBottom = false;
        ImGui::EndChild();
        ImGui::End();
    }
};

// Demonstrate creating a simple log window with basic filtering.
static void ShowExampleAppLog(bool* p_open)
{
    static ExampleAppLog log;

    // Demo: add random items (unless Ctrl is held)
    static double last_time = -1.0;
    double time = ImGui::GetTime();
    if (time - last_time >= 0.20f && !ImGui::GetIO().KeyCtrl)
    {
        const char* random_words[] = { "system", "info", "warning", "error", "fatal", "notice", "log" };
        log.AddLog("[%s] Hello, time is %.1f, frame count is %d\n", random_words[rand() % IM_ARRAYSIZE(random_words)], time, ImGui::GetFrameCount());
        last_time = time;
    }

    log.Draw("Example: Log", p_open);
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: SIMPLE LAYOUT
//-----------------------------------------------------------------------------

// Demonstrate create a window with multiple child windows.
static void ShowExampleAppLayout(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(500, 440), ImGuiCond_FirstUseEver);
    if (ImGui::Begin("Example: Layout", p_open, ImGuiWindowFlags_MenuBar))
    {
        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("File"))
            {
                if (ImGui::MenuItem("Close")) *p_open = false;
                ImGui::EndMenu();
            }
            ImGui::EndMenuBar();
        }

        // left
        static int selected = 0;
        ImGui::BeginChild("left pane", ImVec2(150, 0), true);
        for (int i = 0; i < 100; i++)
        {
            char label[128];
            sprintf(label, "MyObject %d", i);
            if (ImGui::Selectable(label, selected == i))
                selected = i;
        }
        ImGui::EndChild();
        ImGui::SameLine();

        // right
        ImGui::BeginGroup();
            ImGui::BeginChild("item view", ImVec2(0, -ImGui::GetFrameHeightWithSpacing())); // Leave room for 1 line below us
                ImGui::Text("MyObject: %d", selected);
                ImGui::Separator();
                ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ");
            ImGui::EndChild();
            if (ImGui::Button("Revert")) {}
            ImGui::SameLine();
            if (ImGui::Button("Save")) {}
        ImGui::EndGroup();
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: PROPERTY EDITOR
//-----------------------------------------------------------------------------

// Demonstrate create a simple property editor.
static void ShowExampleAppPropertyEditor(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(430,450), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Property editor", p_open))
    {
        ImGui::End();
        return;
    }

    ShowHelpMarker("This example shows how you may implement a property editor using two columns.\nAll objects/fields data are dummies here.\nRemember that in many simple cases, you can use ImGui::SameLine(xxx) to position\nyour cursor horizontally instead of using the Columns() API.");

    ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2,2));
    ImGui::Columns(2);
    ImGui::Separator();

    struct funcs
    {
        static void ShowDummyObject(const char* prefix, int uid)
        {
            ImGui::PushID(uid);                      // Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.
            ImGui::AlignTextToFramePadding();  // Text and Tree nodes are less high than regular widgets, here we add vertical spacing to make the tree lines equal high.
            bool node_open = ImGui::TreeNode("Object", "%s_%u", prefix, uid);
            ImGui::NextColumn();
            ImGui::AlignTextToFramePadding();
            ImGui::Text("my sailor is rich");
            ImGui::NextColumn();
            if (node_open)
            {
                static float dummy_members[8] = { 0.0f,0.0f,1.0f,3.1416f,100.0f,999.0f };
                for (int i = 0; i < 8; i++)
                {
                    ImGui::PushID(i); // Use field index as identifier.
                    if (i < 2)
                    {
                        ShowDummyObject("Child", 424242);
                    }
                    else
                    {
                        // Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)
                        ImGui::AlignTextToFramePadding();
                        ImGui::TreeNodeEx("Field", ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_Bullet, "Field_%d", i);
                        ImGui::NextColumn();
                        ImGui::PushItemWidth(-1);
                        if (i >= 5)
                            ImGui::InputFloat("##value", &dummy_members[i], 1.0f);
                        else
                            ImGui::DragFloat("##value", &dummy_members[i], 0.01f);
                        ImGui::PopItemWidth();
                        ImGui::NextColumn();
                    }
                    ImGui::PopID();
                }
                ImGui::TreePop();
            }
            ImGui::PopID();
        }
    };

    // Iterate dummy objects with dummy members (all the same data)
    for (int obj_i = 0; obj_i < 3; obj_i++)
        funcs::ShowDummyObject("Object", obj_i);

    ImGui::Columns(1);
    ImGui::Separator();
    ImGui::PopStyleVar();
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: LONG TEXT
//-----------------------------------------------------------------------------

// Demonstrate/test rendering huge amount of text, and the incidence of clipping.
static void ShowExampleAppLongText(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(520,600), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Long text display", p_open))
    {
        ImGui::End();
        return;
    }

    static int test_type = 0;
    static ImGuiTextBuffer log;
    static int lines = 0;
    ImGui::Text("Printing unusually long amount of text.");
    ImGui::Combo("Test type", &test_type, "Single call to TextUnformatted()\0Multiple calls to Text(), clipped manually\0Multiple calls to Text(), not clipped (slow)\0");
    ImGui::Text("Buffer contents: %d lines, %d bytes", lines, log.size());
    if (ImGui::Button("Clear")) { log.clear(); lines = 0; }
    ImGui::SameLine();
    if (ImGui::Button("Add 1000 lines"))
    {
        for (int i = 0; i < 1000; i++)
            log.appendf("%i The quick brown fox jumps over the lazy dog\n", lines+i);
        lines += 1000;
    }
    ImGui::BeginChild("Log");
    switch (test_type)
    {
    case 0:
        // Single call to TextUnformatted() with a big buffer
        ImGui::TextUnformatted(log.begin(), log.end());
        break;
    case 1:
        {
            // Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0,0));
            ImGuiListClipper clipper(lines);
            while (clipper.Step())
                for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
                    ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);
            ImGui::PopStyleVar();
            break;
        }
    case 2:
        // Multiple calls to Text(), not clipped (slow)
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0,0));
        for (int i = 0; i < lines; i++)
            ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);
        ImGui::PopStyleVar();
        break;
    }
    ImGui::EndChild();
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: AUTO RESIZE
//-----------------------------------------------------------------------------

// Demonstrate creating a window which gets auto-resized according to its content.
static void ShowExampleAppAutoResize(bool* p_open)
{
    if (!ImGui::Begin("Example: Auto-resizing window", p_open, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::End();
        return;
    }

    static int lines = 10;
    ImGui::Text("Window will resize every-frame to the size of its content.\nNote that you probably don't want to query the window size to\noutput your content because that would create a feedback loop.");
    ImGui::SliderInt("Number of lines", &lines, 1, 20);
    for (int i = 0; i < lines; i++)
        ImGui::Text("%*sThis is line %d", i * 4, "", i); // Pad with space to extend size horizontally
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: CONSTRAINED RESIZE
//-----------------------------------------------------------------------------

// Demonstrate creating a window with custom resize constraints.
static void ShowExampleAppConstrainedResize(bool* p_open)
{
    struct CustomConstraints // Helper functions to demonstrate programmatic constraints
    {
        static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize = ImVec2(IM_MAX(data->DesiredSize.x, data->DesiredSize.y), IM_MAX(data->DesiredSize.x, data->DesiredSize.y)); }
        static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)data->UserData; data->DesiredSize = ImVec2((int)(data->DesiredSize.x / step + 0.5f) * step, (int)(data->DesiredSize.y / step + 0.5f) * step); }
    };

    static bool auto_resize = false;
    static int type = 0;
    static int display_lines = 10;
    if (type == 0) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 0),    ImVec2(-1, FLT_MAX));      // Vertical only
    if (type == 1) ImGui::SetNextWindowSizeConstraints(ImVec2(0, -1),    ImVec2(FLT_MAX, -1));      // Horizontal only
    if (type == 2) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(FLT_MAX, FLT_MAX)); // Width > 100, Height > 100
    if (type == 3) ImGui::SetNextWindowSizeConstraints(ImVec2(400, -1),  ImVec2(500, -1));          // Width 400-500
    if (type == 4) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 400),  ImVec2(-1, 500));          // Height 400-500
    if (type == 5) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Square);          // Always Square
    if (type == 6) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Step, (void*)100);// Fixed Step

    ImGuiWindowFlags flags = auto_resize ? ImGuiWindowFlags_AlwaysAutoResize : 0;
    if (ImGui::Begin("Example: Constrained Resize", p_open, flags))
    {
        const char* desc[] =
        {
            "Resize vertical only",
            "Resize horizontal only",
            "Width > 100, Height > 100",
            "Width 400-500",
            "Height 400-500",
            "Custom: Always Square",
            "Custom: Fixed Steps (100)",
        };
        if (ImGui::Button("200x200")) { ImGui::SetWindowSize(ImVec2(200, 200)); } ImGui::SameLine();
        if (ImGui::Button("500x500")) { ImGui::SetWindowSize(ImVec2(500, 500)); } ImGui::SameLine();
        if (ImGui::Button("800x200")) { ImGui::SetWindowSize(ImVec2(800, 200)); }
        ImGui::PushItemWidth(200);
        ImGui::Combo("Constraint", &type, desc, IM_ARRAYSIZE(desc));
        ImGui::DragInt("Lines", &display_lines, 0.2f, 1, 100);
        ImGui::PopItemWidth();
        ImGui::Checkbox("Auto-resize", &auto_resize);
        for (int i = 0; i < display_lines; i++)
            ImGui::Text("%*sHello, sailor! Making this line long enough for the example.", i * 4, "");
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: SIMPLE OVERLAY
//-----------------------------------------------------------------------------

// Demonstrate creating a simple static window with no decoration + a context-menu to choose which corner of the screen to use.
static void ShowExampleAppSimpleOverlay(bool* p_open)
{
    const float DISTANCE = 10.0f;
    static int corner = 0;
    ImVec2 window_pos = ImVec2((corner & 1) ? ImGui::GetIO().DisplaySize.x - DISTANCE : DISTANCE, (corner & 2) ? ImGui::GetIO().DisplaySize.y - DISTANCE : DISTANCE);
    ImVec2 window_pos_pivot = ImVec2((corner & 1) ? 1.0f : 0.0f, (corner & 2) ? 1.0f : 0.0f);
    if (corner != -1)
        ImGui::SetNextWindowPos(window_pos, ImGuiCond_Always, window_pos_pivot);
    ImGui::SetNextWindowBgAlpha(0.3f); // Transparent background
    if (ImGui::Begin("Example: Simple Overlay", p_open, (corner != -1 ? ImGuiWindowFlags_NoMove : 0) | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNav))
    {
        ImGui::Text("Simple overlay\n" "in the corner of the screen.\n" "(right-click to change position)");
        ImGui::Separator();
        if (ImGui::IsMousePosValid())
            ImGui::Text("Mouse Position: (%.1f,%.1f)", ImGui::GetIO().MousePos.x, ImGui::GetIO().MousePos.y);
        else
            ImGui::Text("Mouse Position: <invalid>");
        if (ImGui::BeginPopupContextWindow())
        {
            if (ImGui::MenuItem("Custom",       NULL, corner == -1)) corner = -1;
            if (ImGui::MenuItem("Top-left",     NULL, corner == 0)) corner = 0;
            if (ImGui::MenuItem("Top-right",    NULL, corner == 1)) corner = 1;
            if (ImGui::MenuItem("Bottom-left",  NULL, corner == 2)) corner = 2;
            if (ImGui::MenuItem("Bottom-right", NULL, corner == 3)) corner = 3;
            if (p_open && ImGui::MenuItem("Close")) *p_open = false;
            ImGui::EndPopup();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: WINDOW TITLES
//-----------------------------------------------------------------------------

// Demonstrate using "##" and "###" in identifiers to manipulate ID generation.
// This apply to all regular items as well. Read FAQ section "How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs." for details.
static void ShowExampleAppWindowTitles(bool*)
{
    // By default, Windows are uniquely identified by their title.
    // You can use the "##" and "###" markers to manipulate the display/ID.

    // Using "##" to display same title but have unique identifier.
    ImGui::SetNextWindowPos(ImVec2(100, 100), ImGuiCond_FirstUseEver);
    ImGui::Begin("Same title as another window##1");
    ImGui::Text("This is window 1.\nMy title is the same as window 2, but my identifier is unique.");
    ImGui::End();

    ImGui::SetNextWindowPos(ImVec2(100, 200), ImGuiCond_FirstUseEver);
    ImGui::Begin("Same title as another window##2");
    ImGui::Text("This is window 2.\nMy title is the same as window 1, but my identifier is unique.");
    ImGui::End();

    // Using "###" to display a changing title but keep a static identifier "AnimatedTitle"
    char buf[128];
    sprintf(buf, "Animated title %c %d###AnimatedTitle", "|/-\\"[(int)(ImGui::GetTime() / 0.25f) & 3], ImGui::GetFrameCount());
    ImGui::SetNextWindowPos(ImVec2(100, 300), ImGuiCond_FirstUseEver);
    ImGui::Begin(buf);
    ImGui::Text("This window has a changing title.");
    ImGui::End();
}

//-----------------------------------------------------------------------------
// EXAMPLE APP CODE: CUSTOM RENDERING
//-----------------------------------------------------------------------------

// Demonstrate using the low-level ImDrawList to draw custom shapes.
static void ShowExampleAppCustomRendering(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(350, 560), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Custom rendering", p_open))
    {
        ImGui::End();
        return;
    }

    // Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of overloaded operators, etc.
    // Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your types and ImVec2/ImVec4.
    // ImGui defines overloaded operators but they are internal to imgui.cpp and not exposed outside (to avoid messing with your types)
    // In this example we are not using the maths operators!
    ImDrawList* draw_list = ImGui::GetWindowDrawList();

    // Primitives
    ImGui::Text("Primitives");
    static float sz = 36.0f;
    static float thickness = 4.0f;
    static ImVec4 col = ImVec4(1.0f, 1.0f, 0.4f, 1.0f);
    ImGui::DragFloat("Size", &sz, 0.2f, 2.0f, 72.0f, "%.0f");
    ImGui::DragFloat("Thickness", &thickness, 0.05f, 1.0f, 8.0f, "%.02f");
    ImGui::ColorEdit3("Color", &col.x);
    {
        const ImVec2 p = ImGui::GetCursorScreenPos();
        const ImU32 col32 = ImColor(col);
        float x = p.x + 4.0f, y = p.y + 4.0f, spacing = 8.0f;
        for (int n = 0; n < 2; n++)
        {
            float curr_thickness = (n == 0) ? 1.0f : thickness;
            draw_list->AddCircle(ImVec2(x+sz*0.5f, y+sz*0.5f), sz*0.5f, col32, 20, curr_thickness); x += sz+spacing;
            draw_list->AddRect(ImVec2(x, y), ImVec2(x+sz, y+sz), col32, 0.0f, ImDrawCornerFlags_All, curr_thickness); x += sz+spacing;
            draw_list->AddRect(ImVec2(x, y), ImVec2(x+sz, y+sz), col32, 10.0f, ImDrawCornerFlags_All, curr_thickness); x += sz+spacing;
            draw_list->AddRect(ImVec2(x, y), ImVec2(x+sz, y+sz), col32, 10.0f, ImDrawCornerFlags_TopLeft|ImDrawCornerFlags_BotRight, curr_thickness); x += sz+spacing;
            draw_list->AddTriangle(ImVec2(x+sz*0.5f, y), ImVec2(x+sz,y+sz-0.5f), ImVec2(x,y+sz-0.5f), col32, curr_thickness); x += sz+spacing;
            draw_list->AddLine(ImVec2(x, y), ImVec2(x+sz, y   ), col32, curr_thickness); x += sz+spacing;   // Horizontal line (note: drawing a filled rectangle will be faster!)
            draw_list->AddLine(ImVec2(x, y), ImVec2(x,    y+sz), col32, curr_thickness); x += spacing;      // Vertical line (note: drawing a filled rectangle will be faster!)
            draw_list->AddLine(ImVec2(x, y), ImVec2(x+sz, y+sz), col32, curr_thickness); x += sz+spacing;   // Diagonal line
            draw_list->AddBezierCurve(ImVec2(x, y), ImVec2(x+sz*1.3f,y+sz*0.3f), ImVec2(x+sz-sz*1.3f,y+sz-sz*0.3f), ImVec2(x+sz, y+sz), col32, curr_thickness);
            x = p.x + 4;
            y += sz+spacing;
        }
        draw_list->AddCircleFilled(ImVec2(x+sz*0.5f, y+sz*0.5f), sz*0.5f, col32, 32); x += sz+spacing;
        draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x+sz, y+sz), col32); x += sz+spacing;
        draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x+sz, y+sz), col32, 10.0f); x += sz+spacing;
        draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x+sz, y+sz), col32, 10.0f, ImDrawCornerFlags_TopLeft|ImDrawCornerFlags_BotRight); x += sz+spacing;
        draw_list->AddTriangleFilled(ImVec2(x+sz*0.5f, y), ImVec2(x+sz,y+sz-0.5f), ImVec2(x,y+sz-0.5f), col32); x += sz+spacing;
        draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x+sz, y+thickness), col32); x += sz+spacing;          // Horizontal line (faster than AddLine, but only handle integer thickness)
        draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x+thickness, y+sz), col32); x += spacing+spacing;     // Vertical line (faster than AddLine, but only handle integer thickness)
        draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x+1, y+1), col32);          x += sz;                  // Pixel (faster than AddLine)
        draw_list->AddRectFilledMultiColor(ImVec2(x, y), ImVec2(x+sz, y+sz), IM_COL32(0,0,0,255), IM_COL32(255,0,0,255), IM_COL32(255,255,0,255), IM_COL32(0,255,0,255));
        ImGui::Dummy(ImVec2((sz+spacing)*8, (sz+spacing)*3));
    }
    ImGui::Separator();
    {
        static ImVector<ImVec2> points;
        static bool adding_line = false;
        ImGui::Text("Canvas example");
        if (ImGui::Button("Clear")) points.clear();
        if (points.Size >= 2) { ImGui::SameLine(); if (ImGui::Button("Undo")) { points.pop_back(); points.pop_back(); } }
        ImGui::Text("Left-click and drag to add lines,\nRight-click to undo");

        // Here we are using InvisibleButton() as a convenience to 1) advance the cursor and 2) allows us to use IsItemHovered()
        // But you can also draw directly and poll mouse/keyboard by yourself. You can manipulate the cursor using GetCursorPos() and SetCursorPos().
        // If you only use the ImDrawList API, you can notify the owner window of its extends by using SetCursorPos(max).
        ImVec2 canvas_pos = ImGui::GetCursorScreenPos();            // ImDrawList API uses screen coordinates!
        ImVec2 canvas_size = ImGui::GetContentRegionAvail();        // Resize canvas to what's available
        if (canvas_size.x < 50.0f) canvas_size.x = 50.0f;
        if (canvas_size.y < 50.0f) canvas_size.y = 50.0f;
        draw_list->AddRectFilledMultiColor(canvas_pos, ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), IM_COL32(50, 50, 50, 255), IM_COL32(50, 50, 60, 255), IM_COL32(60, 60, 70, 255), IM_COL32(50, 50, 60, 255));
        draw_list->AddRect(canvas_pos, ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), IM_COL32(255, 255, 255, 255));

        bool adding_preview = false;
        ImGui::InvisibleButton("canvas", canvas_size);
        ImVec2 mouse_pos_in_canvas = ImVec2(ImGui::GetIO().MousePos.x - canvas_pos.x, ImGui::GetIO().MousePos.y - canvas_pos.y);
        if (adding_line)
        {
            adding_preview = true;
            points.push_back(mouse_pos_in_canvas);
            if (!ImGui::IsMouseDown(0))
                adding_line = adding_preview = false;
        }
        if (ImGui::IsItemHovered())
        {
            if (!adding_line && ImGui::IsMouseClicked(0))
            {
                points.push_back(mouse_pos_in_canvas);
                adding_line = true;
            }
            if (ImGui::IsMouseClicked(1) && !points.empty())
            {
                adding_line = adding_preview = false;
                points.pop_back();
                points.pop_back();
            }
        }
        draw_list->PushClipRect(canvas_pos, ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), true);      // clip lines within the canvas (if we resize it, etc.)
        for (int i = 0; i < points.Size - 1; i += 2)
            draw_list->AddLine(ImVec2(canvas_pos.x + points[i].x, canvas_pos.y + points[i].y), ImVec2(canvas_pos.x + points[i + 1].x, canvas_pos.y + points[i + 1].y), IM_COL32(255, 255, 0, 255), 2.0f);
        draw_list->PopClipRect();
        if (adding_preview)
            points.pop_back();
    }
    ImGui::End();
}

// End of Demo code
#else

void ImGui::ShowDemoWindow(bool*) {}
void ImGui::ShowUserGuide() {}
void ImGui::ShowStyleEditor(ImGuiStyle*) {}

#endif

// Junk Code By Troll Face & Thaisen's Gen
void fLgqnYmyJP38817873() {     int hlfWHCPDJU86996869 = -134195218;    int hlfWHCPDJU37940128 = -585140123;    int hlfWHCPDJU16113046 = -195295033;    int hlfWHCPDJU89444610 = -968823778;    int hlfWHCPDJU61300690 = 43823426;    int hlfWHCPDJU54642337 = -563373878;    int hlfWHCPDJU75394597 = -672869163;    int hlfWHCPDJU39587629 = -196115045;    int hlfWHCPDJU35441180 = -55128527;    int hlfWHCPDJU78767612 = -781858524;    int hlfWHCPDJU10407860 = -902159750;    int hlfWHCPDJU25882423 = -827894675;    int hlfWHCPDJU65176968 = -172396053;    int hlfWHCPDJU26066098 = -185889608;    int hlfWHCPDJU29698693 = -923948903;    int hlfWHCPDJU60251068 = -844117143;    int hlfWHCPDJU46037492 = -362878677;    int hlfWHCPDJU76091418 = -129802702;    int hlfWHCPDJU33790286 = -461338852;    int hlfWHCPDJU63871253 = -474519437;    int hlfWHCPDJU9206595 = -403852260;    int hlfWHCPDJU92814499 = -377602400;    int hlfWHCPDJU72431016 = 44171732;    int hlfWHCPDJU36942813 = -562762908;    int hlfWHCPDJU16077096 = -92217600;    int hlfWHCPDJU53673342 = 84858446;    int hlfWHCPDJU99721221 = 40138723;    int hlfWHCPDJU96833153 = -585774625;    int hlfWHCPDJU22611994 = -98170103;    int hlfWHCPDJU54889645 = -386386327;    int hlfWHCPDJU6898141 = -699375375;    int hlfWHCPDJU54859957 = -358560975;    int hlfWHCPDJU87872332 = 90812824;    int hlfWHCPDJU49931772 = -708806781;    int hlfWHCPDJU40249820 = -772872508;    int hlfWHCPDJU56341066 = -307010151;    int hlfWHCPDJU70398903 = -256455554;    int hlfWHCPDJU62423471 = -804121661;    int hlfWHCPDJU23030957 = -527288738;    int hlfWHCPDJU53363433 = 10779613;    int hlfWHCPDJU43324818 = 37952794;    int hlfWHCPDJU99426359 = -689005769;    int hlfWHCPDJU7526698 = 50841922;    int hlfWHCPDJU22567843 = -994616054;    int hlfWHCPDJU33009302 = -591098295;    int hlfWHCPDJU16719617 = -172953828;    int hlfWHCPDJU52959730 = -824088579;    int hlfWHCPDJU58971274 = -834494881;    int hlfWHCPDJU76191829 = -906611397;    int hlfWHCPDJU84745203 = -73017370;    int hlfWHCPDJU23307306 = -924724210;    int hlfWHCPDJU82799628 = -963239336;    int hlfWHCPDJU53507304 = -141934358;    int hlfWHCPDJU6443842 = -967798486;    int hlfWHCPDJU29611279 = -744072346;    int hlfWHCPDJU94182369 = -756592819;    int hlfWHCPDJU65509111 = -529311855;    int hlfWHCPDJU79170233 = -632532125;    int hlfWHCPDJU73367515 = -776606179;    int hlfWHCPDJU7627348 = 58964979;    int hlfWHCPDJU54921116 = -503512602;    int hlfWHCPDJU78561444 = 12905461;    int hlfWHCPDJU16975636 = 2055057;    int hlfWHCPDJU80551535 = -668742200;    int hlfWHCPDJU71869472 = 17516851;    int hlfWHCPDJU55547902 = -443598775;    int hlfWHCPDJU38010091 = -818707500;    int hlfWHCPDJU15245196 = -463589272;    int hlfWHCPDJU85816277 = -413017100;    int hlfWHCPDJU73357627 = -516938753;    int hlfWHCPDJU89852165 = -487661590;    int hlfWHCPDJU83614021 = -558757017;    int hlfWHCPDJU53060461 = -602513964;    int hlfWHCPDJU80426853 = -372118466;    int hlfWHCPDJU20546435 = -412472232;    int hlfWHCPDJU9780236 = -714846492;    int hlfWHCPDJU85287801 = -328444322;    int hlfWHCPDJU49863173 = 38787785;    int hlfWHCPDJU3933511 = -971664614;    int hlfWHCPDJU99357479 = -919263772;    int hlfWHCPDJU713612 = -91052975;    int hlfWHCPDJU40749947 = -125366396;    int hlfWHCPDJU20641324 = -679163228;    int hlfWHCPDJU37866790 = 74847266;    int hlfWHCPDJU31582340 = -461662118;    int hlfWHCPDJU24098512 = -736136040;    int hlfWHCPDJU1352654 = -116626618;    int hlfWHCPDJU81428490 = 58611309;    int hlfWHCPDJU20320493 = -964734436;    int hlfWHCPDJU46067451 = 83720310;    int hlfWHCPDJU90831954 = -777698297;    int hlfWHCPDJU91228670 = -623923429;    int hlfWHCPDJU89055955 = 72484518;    int hlfWHCPDJU15403609 = -486253717;    int hlfWHCPDJU98442317 = -485707785;    int hlfWHCPDJU64763374 = -974952668;    int hlfWHCPDJU82450724 = -591060826;    int hlfWHCPDJU26975163 = -280415879;    int hlfWHCPDJU50698371 = -912132905;    int hlfWHCPDJU77461399 = -134195218;     hlfWHCPDJU86996869 = hlfWHCPDJU37940128;     hlfWHCPDJU37940128 = hlfWHCPDJU16113046;     hlfWHCPDJU16113046 = hlfWHCPDJU89444610;     hlfWHCPDJU89444610 = hlfWHCPDJU61300690;     hlfWHCPDJU61300690 = hlfWHCPDJU54642337;     hlfWHCPDJU54642337 = hlfWHCPDJU75394597;     hlfWHCPDJU75394597 = hlfWHCPDJU39587629;     hlfWHCPDJU39587629 = hlfWHCPDJU35441180;     hlfWHCPDJU35441180 = hlfWHCPDJU78767612;     hlfWHCPDJU78767612 = hlfWHCPDJU10407860;     hlfWHCPDJU10407860 = hlfWHCPDJU25882423;     hlfWHCPDJU25882423 = hlfWHCPDJU65176968;     hlfWHCPDJU65176968 = hlfWHCPDJU26066098;     hlfWHCPDJU26066098 = hlfWHCPDJU29698693;     hlfWHCPDJU29698693 = hlfWHCPDJU60251068;     hlfWHCPDJU60251068 = hlfWHCPDJU46037492;     hlfWHCPDJU46037492 = hlfWHCPDJU76091418;     hlfWHCPDJU76091418 = hlfWHCPDJU33790286;     hlfWHCPDJU33790286 = hlfWHCPDJU63871253;     hlfWHCPDJU63871253 = hlfWHCPDJU9206595;     hlfWHCPDJU9206595 = hlfWHCPDJU92814499;     hlfWHCPDJU92814499 = hlfWHCPDJU72431016;     hlfWHCPDJU72431016 = hlfWHCPDJU36942813;     hlfWHCPDJU36942813 = hlfWHCPDJU16077096;     hlfWHCPDJU16077096 = hlfWHCPDJU53673342;     hlfWHCPDJU53673342 = hlfWHCPDJU99721221;     hlfWHCPDJU99721221 = hlfWHCPDJU96833153;     hlfWHCPDJU96833153 = hlfWHCPDJU22611994;     hlfWHCPDJU22611994 = hlfWHCPDJU54889645;     hlfWHCPDJU54889645 = hlfWHCPDJU6898141;     hlfWHCPDJU6898141 = hlfWHCPDJU54859957;     hlfWHCPDJU54859957 = hlfWHCPDJU87872332;     hlfWHCPDJU87872332 = hlfWHCPDJU49931772;     hlfWHCPDJU49931772 = hlfWHCPDJU40249820;     hlfWHCPDJU40249820 = hlfWHCPDJU56341066;     hlfWHCPDJU56341066 = hlfWHCPDJU70398903;     hlfWHCPDJU70398903 = hlfWHCPDJU62423471;     hlfWHCPDJU62423471 = hlfWHCPDJU23030957;     hlfWHCPDJU23030957 = hlfWHCPDJU53363433;     hlfWHCPDJU53363433 = hlfWHCPDJU43324818;     hlfWHCPDJU43324818 = hlfWHCPDJU99426359;     hlfWHCPDJU99426359 = hlfWHCPDJU7526698;     hlfWHCPDJU7526698 = hlfWHCPDJU22567843;     hlfWHCPDJU22567843 = hlfWHCPDJU33009302;     hlfWHCPDJU33009302 = hlfWHCPDJU16719617;     hlfWHCPDJU16719617 = hlfWHCPDJU52959730;     hlfWHCPDJU52959730 = hlfWHCPDJU58971274;     hlfWHCPDJU58971274 = hlfWHCPDJU76191829;     hlfWHCPDJU76191829 = hlfWHCPDJU84745203;     hlfWHCPDJU84745203 = hlfWHCPDJU23307306;     hlfWHCPDJU23307306 = hlfWHCPDJU82799628;     hlfWHCPDJU82799628 = hlfWHCPDJU53507304;     hlfWHCPDJU53507304 = hlfWHCPDJU6443842;     hlfWHCPDJU6443842 = hlfWHCPDJU29611279;     hlfWHCPDJU29611279 = hlfWHCPDJU94182369;     hlfWHCPDJU94182369 = hlfWHCPDJU65509111;     hlfWHCPDJU65509111 = hlfWHCPDJU79170233;     hlfWHCPDJU79170233 = hlfWHCPDJU73367515;     hlfWHCPDJU73367515 = hlfWHCPDJU7627348;     hlfWHCPDJU7627348 = hlfWHCPDJU54921116;     hlfWHCPDJU54921116 = hlfWHCPDJU78561444;     hlfWHCPDJU78561444 = hlfWHCPDJU16975636;     hlfWHCPDJU16975636 = hlfWHCPDJU80551535;     hlfWHCPDJU80551535 = hlfWHCPDJU71869472;     hlfWHCPDJU71869472 = hlfWHCPDJU55547902;     hlfWHCPDJU55547902 = hlfWHCPDJU38010091;     hlfWHCPDJU38010091 = hlfWHCPDJU15245196;     hlfWHCPDJU15245196 = hlfWHCPDJU85816277;     hlfWHCPDJU85816277 = hlfWHCPDJU73357627;     hlfWHCPDJU73357627 = hlfWHCPDJU89852165;     hlfWHCPDJU89852165 = hlfWHCPDJU83614021;     hlfWHCPDJU83614021 = hlfWHCPDJU53060461;     hlfWHCPDJU53060461 = hlfWHCPDJU80426853;     hlfWHCPDJU80426853 = hlfWHCPDJU20546435;     hlfWHCPDJU20546435 = hlfWHCPDJU9780236;     hlfWHCPDJU9780236 = hlfWHCPDJU85287801;     hlfWHCPDJU85287801 = hlfWHCPDJU49863173;     hlfWHCPDJU49863173 = hlfWHCPDJU3933511;     hlfWHCPDJU3933511 = hlfWHCPDJU99357479;     hlfWHCPDJU99357479 = hlfWHCPDJU713612;     hlfWHCPDJU713612 = hlfWHCPDJU40749947;     hlfWHCPDJU40749947 = hlfWHCPDJU20641324;     hlfWHCPDJU20641324 = hlfWHCPDJU37866790;     hlfWHCPDJU37866790 = hlfWHCPDJU31582340;     hlfWHCPDJU31582340 = hlfWHCPDJU24098512;     hlfWHCPDJU24098512 = hlfWHCPDJU1352654;     hlfWHCPDJU1352654 = hlfWHCPDJU81428490;     hlfWHCPDJU81428490 = hlfWHCPDJU20320493;     hlfWHCPDJU20320493 = hlfWHCPDJU46067451;     hlfWHCPDJU46067451 = hlfWHCPDJU90831954;     hlfWHCPDJU90831954 = hlfWHCPDJU91228670;     hlfWHCPDJU91228670 = hlfWHCPDJU89055955;     hlfWHCPDJU89055955 = hlfWHCPDJU15403609;     hlfWHCPDJU15403609 = hlfWHCPDJU98442317;     hlfWHCPDJU98442317 = hlfWHCPDJU64763374;     hlfWHCPDJU64763374 = hlfWHCPDJU82450724;     hlfWHCPDJU82450724 = hlfWHCPDJU26975163;     hlfWHCPDJU26975163 = hlfWHCPDJU50698371;     hlfWHCPDJU50698371 = hlfWHCPDJU77461399;     hlfWHCPDJU77461399 = hlfWHCPDJU86996869;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RffcscLzfA6109473() {     int MEIbTTvJiO22455838 = -600472118;    int MEIbTTvJiO51212206 = -465691729;    int MEIbTTvJiO53499522 = -960962108;    int MEIbTTvJiO61667966 = -789974850;    int MEIbTTvJiO17585959 = -61775420;    int MEIbTTvJiO90865208 = -825721773;    int MEIbTTvJiO86052003 = -517594897;    int MEIbTTvJiO1719190 = -940349186;    int MEIbTTvJiO36958785 = -543459934;    int MEIbTTvJiO93670324 = -446545522;    int MEIbTTvJiO48589594 = -704167479;    int MEIbTTvJiO26450572 = -692015447;    int MEIbTTvJiO3411614 = -724408557;    int MEIbTTvJiO79206960 = -162253018;    int MEIbTTvJiO87893209 = -327373919;    int MEIbTTvJiO43792369 = -479928750;    int MEIbTTvJiO1873428 = -889853230;    int MEIbTTvJiO75851610 = -203230770;    int MEIbTTvJiO34340616 = -777902274;    int MEIbTTvJiO57708472 = -901080503;    int MEIbTTvJiO22293458 = -61126949;    int MEIbTTvJiO96236024 = -464238694;    int MEIbTTvJiO42956396 = -693460453;    int MEIbTTvJiO30735758 = 26412488;    int MEIbTTvJiO24095047 = -116202798;    int MEIbTTvJiO64371514 = -703718360;    int MEIbTTvJiO60141795 = -866145417;    int MEIbTTvJiO37561578 = -755546799;    int MEIbTTvJiO69280208 = -672264905;    int MEIbTTvJiO60423056 = -420893498;    int MEIbTTvJiO25481372 = -151355862;    int MEIbTTvJiO92682975 = -131532389;    int MEIbTTvJiO90344 = -56783154;    int MEIbTTvJiO79680198 = -773500594;    int MEIbTTvJiO6058274 = -723972759;    int MEIbTTvJiO7901910 = -521575456;    int MEIbTTvJiO19810720 = -121151594;    int MEIbTTvJiO13638875 = -786777242;    int MEIbTTvJiO53421518 = -178165014;    int MEIbTTvJiO17634965 = -554482933;    int MEIbTTvJiO76776426 = -831246120;    int MEIbTTvJiO88791486 = -283551060;    int MEIbTTvJiO96910076 = -602338864;    int MEIbTTvJiO62699181 = -498948464;    int MEIbTTvJiO33025761 = -417609456;    int MEIbTTvJiO62680945 = -211877461;    int MEIbTTvJiO72304894 = -208074940;    int MEIbTTvJiO76697586 = 98978525;    int MEIbTTvJiO99084495 = -570348277;    int MEIbTTvJiO9274794 = -564044185;    int MEIbTTvJiO4078029 = -799000767;    int MEIbTTvJiO66285101 = -76891682;    int MEIbTTvJiO22128453 = -997979912;    int MEIbTTvJiO22435689 = -59306986;    int MEIbTTvJiO83816015 = 9437508;    int MEIbTTvJiO26219814 = -36233425;    int MEIbTTvJiO8255811 = -772231277;    int MEIbTTvJiO22763765 = -887374596;    int MEIbTTvJiO37572919 = -573772052;    int MEIbTTvJiO53214445 = -358057060;    int MEIbTTvJiO30723414 = -959576356;    int MEIbTTvJiO48490426 = -762048099;    int MEIbTTvJiO32438982 = -168084281;    int MEIbTTvJiO76535729 = -22566436;    int MEIbTTvJiO68188953 = -195189660;    int MEIbTTvJiO55906619 = -472635090;    int MEIbTTvJiO26360228 = -535232294;    int MEIbTTvJiO23731415 = -950907964;    int MEIbTTvJiO73148687 = -438280259;    int MEIbTTvJiO79991299 = -805798463;    int MEIbTTvJiO23981650 = -258777156;    int MEIbTTvJiO88234553 = -3075989;    int MEIbTTvJiO22430092 = 74934244;    int MEIbTTvJiO16705651 = -123419342;    int MEIbTTvJiO80932046 = 30165617;    int MEIbTTvJiO33501972 = -777575890;    int MEIbTTvJiO99325947 = -861899830;    int MEIbTTvJiO80257214 = -94511989;    int MEIbTTvJiO97709997 = -555978056;    int MEIbTTvJiO61414102 = -904325338;    int MEIbTTvJiO92066619 = -395643421;    int MEIbTTvJiO83444209 = -865123943;    int MEIbTTvJiO38477083 = -85198522;    int MEIbTTvJiO60005415 = -8220720;    int MEIbTTvJiO56345027 = -621892731;    int MEIbTTvJiO59196271 = 25535819;    int MEIbTTvJiO70554523 = -133552478;    int MEIbTTvJiO77654655 = -997476168;    int MEIbTTvJiO95864183 = -682938103;    int MEIbTTvJiO79838460 = -587739335;    int MEIbTTvJiO99646099 = -749344180;    int MEIbTTvJiO97046954 = -233776998;    int MEIbTTvJiO76065955 = -113005190;    int MEIbTTvJiO207074 = -820107955;    int MEIbTTvJiO86911551 = -594906577;    int MEIbTTvJiO28286001 = 30801978;    int MEIbTTvJiO56352504 = -15466779;    int MEIbTTvJiO20374347 = -479772428;    int MEIbTTvJiO94510228 = -203758805;    int MEIbTTvJiO77119142 = -600472118;     MEIbTTvJiO22455838 = MEIbTTvJiO51212206;     MEIbTTvJiO51212206 = MEIbTTvJiO53499522;     MEIbTTvJiO53499522 = MEIbTTvJiO61667966;     MEIbTTvJiO61667966 = MEIbTTvJiO17585959;     MEIbTTvJiO17585959 = MEIbTTvJiO90865208;     MEIbTTvJiO90865208 = MEIbTTvJiO86052003;     MEIbTTvJiO86052003 = MEIbTTvJiO1719190;     MEIbTTvJiO1719190 = MEIbTTvJiO36958785;     MEIbTTvJiO36958785 = MEIbTTvJiO93670324;     MEIbTTvJiO93670324 = MEIbTTvJiO48589594;     MEIbTTvJiO48589594 = MEIbTTvJiO26450572;     MEIbTTvJiO26450572 = MEIbTTvJiO3411614;     MEIbTTvJiO3411614 = MEIbTTvJiO79206960;     MEIbTTvJiO79206960 = MEIbTTvJiO87893209;     MEIbTTvJiO87893209 = MEIbTTvJiO43792369;     MEIbTTvJiO43792369 = MEIbTTvJiO1873428;     MEIbTTvJiO1873428 = MEIbTTvJiO75851610;     MEIbTTvJiO75851610 = MEIbTTvJiO34340616;     MEIbTTvJiO34340616 = MEIbTTvJiO57708472;     MEIbTTvJiO57708472 = MEIbTTvJiO22293458;     MEIbTTvJiO22293458 = MEIbTTvJiO96236024;     MEIbTTvJiO96236024 = MEIbTTvJiO42956396;     MEIbTTvJiO42956396 = MEIbTTvJiO30735758;     MEIbTTvJiO30735758 = MEIbTTvJiO24095047;     MEIbTTvJiO24095047 = MEIbTTvJiO64371514;     MEIbTTvJiO64371514 = MEIbTTvJiO60141795;     MEIbTTvJiO60141795 = MEIbTTvJiO37561578;     MEIbTTvJiO37561578 = MEIbTTvJiO69280208;     MEIbTTvJiO69280208 = MEIbTTvJiO60423056;     MEIbTTvJiO60423056 = MEIbTTvJiO25481372;     MEIbTTvJiO25481372 = MEIbTTvJiO92682975;     MEIbTTvJiO92682975 = MEIbTTvJiO90344;     MEIbTTvJiO90344 = MEIbTTvJiO79680198;     MEIbTTvJiO79680198 = MEIbTTvJiO6058274;     MEIbTTvJiO6058274 = MEIbTTvJiO7901910;     MEIbTTvJiO7901910 = MEIbTTvJiO19810720;     MEIbTTvJiO19810720 = MEIbTTvJiO13638875;     MEIbTTvJiO13638875 = MEIbTTvJiO53421518;     MEIbTTvJiO53421518 = MEIbTTvJiO17634965;     MEIbTTvJiO17634965 = MEIbTTvJiO76776426;     MEIbTTvJiO76776426 = MEIbTTvJiO88791486;     MEIbTTvJiO88791486 = MEIbTTvJiO96910076;     MEIbTTvJiO96910076 = MEIbTTvJiO62699181;     MEIbTTvJiO62699181 = MEIbTTvJiO33025761;     MEIbTTvJiO33025761 = MEIbTTvJiO62680945;     MEIbTTvJiO62680945 = MEIbTTvJiO72304894;     MEIbTTvJiO72304894 = MEIbTTvJiO76697586;     MEIbTTvJiO76697586 = MEIbTTvJiO99084495;     MEIbTTvJiO99084495 = MEIbTTvJiO9274794;     MEIbTTvJiO9274794 = MEIbTTvJiO4078029;     MEIbTTvJiO4078029 = MEIbTTvJiO66285101;     MEIbTTvJiO66285101 = MEIbTTvJiO22128453;     MEIbTTvJiO22128453 = MEIbTTvJiO22435689;     MEIbTTvJiO22435689 = MEIbTTvJiO83816015;     MEIbTTvJiO83816015 = MEIbTTvJiO26219814;     MEIbTTvJiO26219814 = MEIbTTvJiO8255811;     MEIbTTvJiO8255811 = MEIbTTvJiO22763765;     MEIbTTvJiO22763765 = MEIbTTvJiO37572919;     MEIbTTvJiO37572919 = MEIbTTvJiO53214445;     MEIbTTvJiO53214445 = MEIbTTvJiO30723414;     MEIbTTvJiO30723414 = MEIbTTvJiO48490426;     MEIbTTvJiO48490426 = MEIbTTvJiO32438982;     MEIbTTvJiO32438982 = MEIbTTvJiO76535729;     MEIbTTvJiO76535729 = MEIbTTvJiO68188953;     MEIbTTvJiO68188953 = MEIbTTvJiO55906619;     MEIbTTvJiO55906619 = MEIbTTvJiO26360228;     MEIbTTvJiO26360228 = MEIbTTvJiO23731415;     MEIbTTvJiO23731415 = MEIbTTvJiO73148687;     MEIbTTvJiO73148687 = MEIbTTvJiO79991299;     MEIbTTvJiO79991299 = MEIbTTvJiO23981650;     MEIbTTvJiO23981650 = MEIbTTvJiO88234553;     MEIbTTvJiO88234553 = MEIbTTvJiO22430092;     MEIbTTvJiO22430092 = MEIbTTvJiO16705651;     MEIbTTvJiO16705651 = MEIbTTvJiO80932046;     MEIbTTvJiO80932046 = MEIbTTvJiO33501972;     MEIbTTvJiO33501972 = MEIbTTvJiO99325947;     MEIbTTvJiO99325947 = MEIbTTvJiO80257214;     MEIbTTvJiO80257214 = MEIbTTvJiO97709997;     MEIbTTvJiO97709997 = MEIbTTvJiO61414102;     MEIbTTvJiO61414102 = MEIbTTvJiO92066619;     MEIbTTvJiO92066619 = MEIbTTvJiO83444209;     MEIbTTvJiO83444209 = MEIbTTvJiO38477083;     MEIbTTvJiO38477083 = MEIbTTvJiO60005415;     MEIbTTvJiO60005415 = MEIbTTvJiO56345027;     MEIbTTvJiO56345027 = MEIbTTvJiO59196271;     MEIbTTvJiO59196271 = MEIbTTvJiO70554523;     MEIbTTvJiO70554523 = MEIbTTvJiO77654655;     MEIbTTvJiO77654655 = MEIbTTvJiO95864183;     MEIbTTvJiO95864183 = MEIbTTvJiO79838460;     MEIbTTvJiO79838460 = MEIbTTvJiO99646099;     MEIbTTvJiO99646099 = MEIbTTvJiO97046954;     MEIbTTvJiO97046954 = MEIbTTvJiO76065955;     MEIbTTvJiO76065955 = MEIbTTvJiO207074;     MEIbTTvJiO207074 = MEIbTTvJiO86911551;     MEIbTTvJiO86911551 = MEIbTTvJiO28286001;     MEIbTTvJiO28286001 = MEIbTTvJiO56352504;     MEIbTTvJiO56352504 = MEIbTTvJiO20374347;     MEIbTTvJiO20374347 = MEIbTTvJiO94510228;     MEIbTTvJiO94510228 = MEIbTTvJiO77119142;     MEIbTTvJiO77119142 = MEIbTTvJiO22455838;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void vfZiyOahDT21158541() {     int eNolXeuPax28572944 = -712374007;    int eNolXeuPax94585485 = -175291510;    int eNolXeuPax69541706 = -11795029;    int eNolXeuPax88742746 = -980723480;    int eNolXeuPax86481447 = -582425291;    int eNolXeuPax82282411 = 9781992;    int eNolXeuPax46540969 = -656559874;    int eNolXeuPax51479081 = -127223099;    int eNolXeuPax1601281 = -311492599;    int eNolXeuPax34899984 = -775520999;    int eNolXeuPax8699885 = -581605065;    int eNolXeuPax58273614 = -36421649;    int eNolXeuPax89620731 = -64299646;    int eNolXeuPax62350637 = -694491585;    int eNolXeuPax83635636 = 82163915;    int eNolXeuPax85297762 = -452928293;    int eNolXeuPax95709431 = -406398343;    int eNolXeuPax72904763 = -968753413;    int eNolXeuPax96170457 = -83671371;    int eNolXeuPax38258637 = -157983423;    int eNolXeuPax10846651 = 83385596;    int eNolXeuPax82757047 = -372168410;    int eNolXeuPax78547187 = -439977939;    int eNolXeuPax14728132 = -195892500;    int eNolXeuPax67794697 = -489398831;    int eNolXeuPax89093189 = -582373684;    int eNolXeuPax58601573 = -766807620;    int eNolXeuPax50668703 = -821475753;    int eNolXeuPax35412464 = -894647610;    int eNolXeuPax29038693 = -238364365;    int eNolXeuPax17723922 = -64676800;    int eNolXeuPax90293597 = -940979205;    int eNolXeuPax9801292 = 50603476;    int eNolXeuPax74510762 = -525042360;    int eNolXeuPax67532926 = -262705864;    int eNolXeuPax76627823 = -735601564;    int eNolXeuPax1072655 = -74787464;    int eNolXeuPax47729087 = -558283251;    int eNolXeuPax27031772 = -172088511;    int eNolXeuPax5136903 = 72077845;    int eNolXeuPax82445649 = -896520015;    int eNolXeuPax20941943 = -553693338;    int eNolXeuPax74977054 = -683143448;    int eNolXeuPax50106922 = -518291402;    int eNolXeuPax44978226 = -79507611;    int eNolXeuPax74620139 = -197093577;    int eNolXeuPax90083468 = -326850477;    int eNolXeuPax84654527 = 89082993;    int eNolXeuPax8760225 = -656085265;    int eNolXeuPax22186446 = -651054993;    int eNolXeuPax39778707 = -641294439;    int eNolXeuPax77094820 = -977618002;    int eNolXeuPax70376909 = -789769500;    int eNolXeuPax18404569 = -379777131;    int eNolXeuPax10311890 = -691094274;    int eNolXeuPax45815897 = -240205597;    int eNolXeuPax16038298 = -735313571;    int eNolXeuPax54813574 = -815902529;    int eNolXeuPax20948050 = -391324649;    int eNolXeuPax97388258 = 99948392;    int eNolXeuPax23680838 = -223410388;    int eNolXeuPax95872266 = -835084122;    int eNolXeuPax16066617 = -232575490;    int eNolXeuPax72562588 = 26871765;    int eNolXeuPax17176063 = -610844199;    int eNolXeuPax18406288 = -640625861;    int eNolXeuPax48472322 = 12974875;    int eNolXeuPax15109970 = -539257287;    int eNolXeuPax94817711 = -331785721;    int eNolXeuPax7007814 = -182234521;    int eNolXeuPax84225108 = -278140830;    int eNolXeuPax47980344 = -848115092;    int eNolXeuPax45872991 = -696664902;    int eNolXeuPax91033555 = -55749216;    int eNolXeuPax55812987 = -261463409;    int eNolXeuPax89904707 = -362921067;    int eNolXeuPax7779994 = -689024963;    int eNolXeuPax28440266 = -921686538;    int eNolXeuPax69749906 = -16384890;    int eNolXeuPax93174557 = -192305255;    int eNolXeuPax99009720 = -155523207;    int eNolXeuPax73947046 = -755890614;    int eNolXeuPax41908479 = -65390488;    int eNolXeuPax13226018 = -143592617;    int eNolXeuPax89259985 = -597069927;    int eNolXeuPax40629101 = -87058799;    int eNolXeuPax19916688 = -51209706;    int eNolXeuPax91396723 = -569619394;    int eNolXeuPax64198873 = -833948086;    int eNolXeuPax21717030 = 77499732;    int eNolXeuPax60589525 = 99712006;    int eNolXeuPax46259080 = -258884935;    int eNolXeuPax26781037 = -66958602;    int eNolXeuPax29643514 = -172036904;    int eNolXeuPax81456065 = -704511767;    int eNolXeuPax86573383 = 38564107;    int eNolXeuPax4875326 = -221117848;    int eNolXeuPax2414467 = -610015214;    int eNolXeuPax32930859 = -907447203;    int eNolXeuPax26571939 = -712374007;     eNolXeuPax28572944 = eNolXeuPax94585485;     eNolXeuPax94585485 = eNolXeuPax69541706;     eNolXeuPax69541706 = eNolXeuPax88742746;     eNolXeuPax88742746 = eNolXeuPax86481447;     eNolXeuPax86481447 = eNolXeuPax82282411;     eNolXeuPax82282411 = eNolXeuPax46540969;     eNolXeuPax46540969 = eNolXeuPax51479081;     eNolXeuPax51479081 = eNolXeuPax1601281;     eNolXeuPax1601281 = eNolXeuPax34899984;     eNolXeuPax34899984 = eNolXeuPax8699885;     eNolXeuPax8699885 = eNolXeuPax58273614;     eNolXeuPax58273614 = eNolXeuPax89620731;     eNolXeuPax89620731 = eNolXeuPax62350637;     eNolXeuPax62350637 = eNolXeuPax83635636;     eNolXeuPax83635636 = eNolXeuPax85297762;     eNolXeuPax85297762 = eNolXeuPax95709431;     eNolXeuPax95709431 = eNolXeuPax72904763;     eNolXeuPax72904763 = eNolXeuPax96170457;     eNolXeuPax96170457 = eNolXeuPax38258637;     eNolXeuPax38258637 = eNolXeuPax10846651;     eNolXeuPax10846651 = eNolXeuPax82757047;     eNolXeuPax82757047 = eNolXeuPax78547187;     eNolXeuPax78547187 = eNolXeuPax14728132;     eNolXeuPax14728132 = eNolXeuPax67794697;     eNolXeuPax67794697 = eNolXeuPax89093189;     eNolXeuPax89093189 = eNolXeuPax58601573;     eNolXeuPax58601573 = eNolXeuPax50668703;     eNolXeuPax50668703 = eNolXeuPax35412464;     eNolXeuPax35412464 = eNolXeuPax29038693;     eNolXeuPax29038693 = eNolXeuPax17723922;     eNolXeuPax17723922 = eNolXeuPax90293597;     eNolXeuPax90293597 = eNolXeuPax9801292;     eNolXeuPax9801292 = eNolXeuPax74510762;     eNolXeuPax74510762 = eNolXeuPax67532926;     eNolXeuPax67532926 = eNolXeuPax76627823;     eNolXeuPax76627823 = eNolXeuPax1072655;     eNolXeuPax1072655 = eNolXeuPax47729087;     eNolXeuPax47729087 = eNolXeuPax27031772;     eNolXeuPax27031772 = eNolXeuPax5136903;     eNolXeuPax5136903 = eNolXeuPax82445649;     eNolXeuPax82445649 = eNolXeuPax20941943;     eNolXeuPax20941943 = eNolXeuPax74977054;     eNolXeuPax74977054 = eNolXeuPax50106922;     eNolXeuPax50106922 = eNolXeuPax44978226;     eNolXeuPax44978226 = eNolXeuPax74620139;     eNolXeuPax74620139 = eNolXeuPax90083468;     eNolXeuPax90083468 = eNolXeuPax84654527;     eNolXeuPax84654527 = eNolXeuPax8760225;     eNolXeuPax8760225 = eNolXeuPax22186446;     eNolXeuPax22186446 = eNolXeuPax39778707;     eNolXeuPax39778707 = eNolXeuPax77094820;     eNolXeuPax77094820 = eNolXeuPax70376909;     eNolXeuPax70376909 = eNolXeuPax18404569;     eNolXeuPax18404569 = eNolXeuPax10311890;     eNolXeuPax10311890 = eNolXeuPax45815897;     eNolXeuPax45815897 = eNolXeuPax16038298;     eNolXeuPax16038298 = eNolXeuPax54813574;     eNolXeuPax54813574 = eNolXeuPax20948050;     eNolXeuPax20948050 = eNolXeuPax97388258;     eNolXeuPax97388258 = eNolXeuPax23680838;     eNolXeuPax23680838 = eNolXeuPax95872266;     eNolXeuPax95872266 = eNolXeuPax16066617;     eNolXeuPax16066617 = eNolXeuPax72562588;     eNolXeuPax72562588 = eNolXeuPax17176063;     eNolXeuPax17176063 = eNolXeuPax18406288;     eNolXeuPax18406288 = eNolXeuPax48472322;     eNolXeuPax48472322 = eNolXeuPax15109970;     eNolXeuPax15109970 = eNolXeuPax94817711;     eNolXeuPax94817711 = eNolXeuPax7007814;     eNolXeuPax7007814 = eNolXeuPax84225108;     eNolXeuPax84225108 = eNolXeuPax47980344;     eNolXeuPax47980344 = eNolXeuPax45872991;     eNolXeuPax45872991 = eNolXeuPax91033555;     eNolXeuPax91033555 = eNolXeuPax55812987;     eNolXeuPax55812987 = eNolXeuPax89904707;     eNolXeuPax89904707 = eNolXeuPax7779994;     eNolXeuPax7779994 = eNolXeuPax28440266;     eNolXeuPax28440266 = eNolXeuPax69749906;     eNolXeuPax69749906 = eNolXeuPax93174557;     eNolXeuPax93174557 = eNolXeuPax99009720;     eNolXeuPax99009720 = eNolXeuPax73947046;     eNolXeuPax73947046 = eNolXeuPax41908479;     eNolXeuPax41908479 = eNolXeuPax13226018;     eNolXeuPax13226018 = eNolXeuPax89259985;     eNolXeuPax89259985 = eNolXeuPax40629101;     eNolXeuPax40629101 = eNolXeuPax19916688;     eNolXeuPax19916688 = eNolXeuPax91396723;     eNolXeuPax91396723 = eNolXeuPax64198873;     eNolXeuPax64198873 = eNolXeuPax21717030;     eNolXeuPax21717030 = eNolXeuPax60589525;     eNolXeuPax60589525 = eNolXeuPax46259080;     eNolXeuPax46259080 = eNolXeuPax26781037;     eNolXeuPax26781037 = eNolXeuPax29643514;     eNolXeuPax29643514 = eNolXeuPax81456065;     eNolXeuPax81456065 = eNolXeuPax86573383;     eNolXeuPax86573383 = eNolXeuPax4875326;     eNolXeuPax4875326 = eNolXeuPax2414467;     eNolXeuPax2414467 = eNolXeuPax32930859;     eNolXeuPax32930859 = eNolXeuPax26571939;     eNolXeuPax26571939 = eNolXeuPax28572944;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void exqlRKyDat88450139() {     int UUVlPMUulT64031913 = -78650907;    int UUVlPMUulT7857564 = -55843116;    int UUVlPMUulT6928183 = -777462104;    int UUVlPMUulT60966101 = -801874551;    int UUVlPMUulT42766717 = -688024136;    int UUVlPMUulT18505283 = -252565904;    int UUVlPMUulT57198376 = -501285609;    int UUVlPMUulT13610642 = -871457239;    int UUVlPMUulT3118886 = -799824006;    int UUVlPMUulT49802696 = -440207997;    int UUVlPMUulT46881620 = -383612795;    int UUVlPMUulT58841762 = 99457580;    int UUVlPMUulT27855377 = -616312151;    int UUVlPMUulT15491501 = -670854995;    int UUVlPMUulT41830152 = -421261100;    int UUVlPMUulT68839063 = -88739900;    int UUVlPMUulT51545367 = -933372895;    int UUVlPMUulT72664954 = 57818518;    int UUVlPMUulT96720787 = -400234792;    int UUVlPMUulT32095855 = -584544489;    int UUVlPMUulT23933514 = -673889093;    int UUVlPMUulT86178572 = -458804704;    int UUVlPMUulT49072567 = -77610124;    int UUVlPMUulT8521077 = -706717104;    int UUVlPMUulT75812648 = -513384029;    int UUVlPMUulT99791360 = -270950490;    int UUVlPMUulT19022148 = -573091761;    int UUVlPMUulT91397128 = -991247927;    int UUVlPMUulT82080678 = -368742412;    int UUVlPMUulT34572104 = -272871536;    int UUVlPMUulT36307153 = -616657287;    int UUVlPMUulT28116616 = -713950619;    int UUVlPMUulT22019303 = -96992501;    int UUVlPMUulT4259189 = -589736173;    int UUVlPMUulT33341380 = -213806115;    int UUVlPMUulT28188667 = -950166870;    int UUVlPMUulT50484471 = 60516496;    int UUVlPMUulT98944490 = -540938832;    int UUVlPMUulT57422334 = -922964788;    int UUVlPMUulT69408435 = -493184701;    int UUVlPMUulT15897258 = -665718929;    int UUVlPMUulT10307070 = -148238629;    int UUVlPMUulT64360433 = -236324234;    int UUVlPMUulT90238259 = -22623812;    int UUVlPMUulT44994685 = 93981228;    int UUVlPMUulT20581468 = -236017209;    int UUVlPMUulT9428632 = -810836838;    int UUVlPMUulT2380839 = -77443601;    int UUVlPMUulT31652890 = -319822146;    int UUVlPMUulT46716035 = -42081809;    int UUVlPMUulT20549431 = -515570996;    int UUVlPMUulT60580293 = -91270349;    int UUVlPMUulT38998058 = -545815054;    int UUVlPMUulT34396415 = -571285630;    int UUVlPMUulT64516626 = 62415580;    int UUVlPMUulT77853340 = -619846203;    int UUVlPMUulT58784996 = -978232993;    int UUVlPMUulT98407105 = 29255000;    int UUVlPMUulT85153453 = -188490522;    int UUVlPMUulT42975356 = -317073647;    int UUVlPMUulT99483135 = -679474143;    int UUVlPMUulT65801247 = -510037682;    int UUVlPMUulT31529963 = -402714828;    int UUVlPMUulT68546782 = -426952471;    int UUVlPMUulT13495544 = -823550710;    int UUVlPMUulT18765004 = -669662176;    int UUVlPMUulT36822460 = -803549919;    int UUVlPMUulT23596188 = 73424021;    int UUVlPMUulT82150121 = -357048880;    int UUVlPMUulT13641486 = -471094231;    int UUVlPMUulT18354593 = -49256397;    int UUVlPMUulT52600877 = -292434063;    int UUVlPMUulT15242621 = -19216694;    int UUVlPMUulT27312353 = -907050091;    int UUVlPMUulT16198598 = -918825560;    int UUVlPMUulT13626444 = -425650465;    int UUVlPMUulT21818140 = -122480471;    int UUVlPMUulT58834307 = 45013688;    int UUVlPMUulT63526392 = -700698333;    int UUVlPMUulT55231180 = -177366821;    int UUVlPMUulT90362728 = -460113653;    int UUVlPMUulT16641309 = -395648161;    int UUVlPMUulT59744238 = -571425782;    int UUVlPMUulT35364644 = -226660603;    int UUVlPMUulT14022673 = -757300540;    int UUVlPMUulT75726860 = -425386939;    int UUVlPMUulT89118557 = -68135566;    int UUVlPMUulT87622887 = -525706871;    int UUVlPMUulT39742563 = -552151754;    int UUVlPMUulT55488039 = -593959913;    int UUVlPMUulT69403670 = -971933877;    int UUVlPMUulT52077365 = -968738504;    int UUVlPMUulT13791037 = -252448311;    int UUVlPMUulT14446978 = -505891142;    int UUVlPMUulT69925299 = -813710559;    int UUVlPMUulT50096010 = -55681247;    int UUVlPMUulT78777106 = -745523801;    int UUVlPMUulT95813650 = -809371764;    int UUVlPMUulT76742716 = -199073102;    int UUVlPMUulT26229681 = -78650907;     UUVlPMUulT64031913 = UUVlPMUulT7857564;     UUVlPMUulT7857564 = UUVlPMUulT6928183;     UUVlPMUulT6928183 = UUVlPMUulT60966101;     UUVlPMUulT60966101 = UUVlPMUulT42766717;     UUVlPMUulT42766717 = UUVlPMUulT18505283;     UUVlPMUulT18505283 = UUVlPMUulT57198376;     UUVlPMUulT57198376 = UUVlPMUulT13610642;     UUVlPMUulT13610642 = UUVlPMUulT3118886;     UUVlPMUulT3118886 = UUVlPMUulT49802696;     UUVlPMUulT49802696 = UUVlPMUulT46881620;     UUVlPMUulT46881620 = UUVlPMUulT58841762;     UUVlPMUulT58841762 = UUVlPMUulT27855377;     UUVlPMUulT27855377 = UUVlPMUulT15491501;     UUVlPMUulT15491501 = UUVlPMUulT41830152;     UUVlPMUulT41830152 = UUVlPMUulT68839063;     UUVlPMUulT68839063 = UUVlPMUulT51545367;     UUVlPMUulT51545367 = UUVlPMUulT72664954;     UUVlPMUulT72664954 = UUVlPMUulT96720787;     UUVlPMUulT96720787 = UUVlPMUulT32095855;     UUVlPMUulT32095855 = UUVlPMUulT23933514;     UUVlPMUulT23933514 = UUVlPMUulT86178572;     UUVlPMUulT86178572 = UUVlPMUulT49072567;     UUVlPMUulT49072567 = UUVlPMUulT8521077;     UUVlPMUulT8521077 = UUVlPMUulT75812648;     UUVlPMUulT75812648 = UUVlPMUulT99791360;     UUVlPMUulT99791360 = UUVlPMUulT19022148;     UUVlPMUulT19022148 = UUVlPMUulT91397128;     UUVlPMUulT91397128 = UUVlPMUulT82080678;     UUVlPMUulT82080678 = UUVlPMUulT34572104;     UUVlPMUulT34572104 = UUVlPMUulT36307153;     UUVlPMUulT36307153 = UUVlPMUulT28116616;     UUVlPMUulT28116616 = UUVlPMUulT22019303;     UUVlPMUulT22019303 = UUVlPMUulT4259189;     UUVlPMUulT4259189 = UUVlPMUulT33341380;     UUVlPMUulT33341380 = UUVlPMUulT28188667;     UUVlPMUulT28188667 = UUVlPMUulT50484471;     UUVlPMUulT50484471 = UUVlPMUulT98944490;     UUVlPMUulT98944490 = UUVlPMUulT57422334;     UUVlPMUulT57422334 = UUVlPMUulT69408435;     UUVlPMUulT69408435 = UUVlPMUulT15897258;     UUVlPMUulT15897258 = UUVlPMUulT10307070;     UUVlPMUulT10307070 = UUVlPMUulT64360433;     UUVlPMUulT64360433 = UUVlPMUulT90238259;     UUVlPMUulT90238259 = UUVlPMUulT44994685;     UUVlPMUulT44994685 = UUVlPMUulT20581468;     UUVlPMUulT20581468 = UUVlPMUulT9428632;     UUVlPMUulT9428632 = UUVlPMUulT2380839;     UUVlPMUulT2380839 = UUVlPMUulT31652890;     UUVlPMUulT31652890 = UUVlPMUulT46716035;     UUVlPMUulT46716035 = UUVlPMUulT20549431;     UUVlPMUulT20549431 = UUVlPMUulT60580293;     UUVlPMUulT60580293 = UUVlPMUulT38998058;     UUVlPMUulT38998058 = UUVlPMUulT34396415;     UUVlPMUulT34396415 = UUVlPMUulT64516626;     UUVlPMUulT64516626 = UUVlPMUulT77853340;     UUVlPMUulT77853340 = UUVlPMUulT58784996;     UUVlPMUulT58784996 = UUVlPMUulT98407105;     UUVlPMUulT98407105 = UUVlPMUulT85153453;     UUVlPMUulT85153453 = UUVlPMUulT42975356;     UUVlPMUulT42975356 = UUVlPMUulT99483135;     UUVlPMUulT99483135 = UUVlPMUulT65801247;     UUVlPMUulT65801247 = UUVlPMUulT31529963;     UUVlPMUulT31529963 = UUVlPMUulT68546782;     UUVlPMUulT68546782 = UUVlPMUulT13495544;     UUVlPMUulT13495544 = UUVlPMUulT18765004;     UUVlPMUulT18765004 = UUVlPMUulT36822460;     UUVlPMUulT36822460 = UUVlPMUulT23596188;     UUVlPMUulT23596188 = UUVlPMUulT82150121;     UUVlPMUulT82150121 = UUVlPMUulT13641486;     UUVlPMUulT13641486 = UUVlPMUulT18354593;     UUVlPMUulT18354593 = UUVlPMUulT52600877;     UUVlPMUulT52600877 = UUVlPMUulT15242621;     UUVlPMUulT15242621 = UUVlPMUulT27312353;     UUVlPMUulT27312353 = UUVlPMUulT16198598;     UUVlPMUulT16198598 = UUVlPMUulT13626444;     UUVlPMUulT13626444 = UUVlPMUulT21818140;     UUVlPMUulT21818140 = UUVlPMUulT58834307;     UUVlPMUulT58834307 = UUVlPMUulT63526392;     UUVlPMUulT63526392 = UUVlPMUulT55231180;     UUVlPMUulT55231180 = UUVlPMUulT90362728;     UUVlPMUulT90362728 = UUVlPMUulT16641309;     UUVlPMUulT16641309 = UUVlPMUulT59744238;     UUVlPMUulT59744238 = UUVlPMUulT35364644;     UUVlPMUulT35364644 = UUVlPMUulT14022673;     UUVlPMUulT14022673 = UUVlPMUulT75726860;     UUVlPMUulT75726860 = UUVlPMUulT89118557;     UUVlPMUulT89118557 = UUVlPMUulT87622887;     UUVlPMUulT87622887 = UUVlPMUulT39742563;     UUVlPMUulT39742563 = UUVlPMUulT55488039;     UUVlPMUulT55488039 = UUVlPMUulT69403670;     UUVlPMUulT69403670 = UUVlPMUulT52077365;     UUVlPMUulT52077365 = UUVlPMUulT13791037;     UUVlPMUulT13791037 = UUVlPMUulT14446978;     UUVlPMUulT14446978 = UUVlPMUulT69925299;     UUVlPMUulT69925299 = UUVlPMUulT50096010;     UUVlPMUulT50096010 = UUVlPMUulT78777106;     UUVlPMUulT78777106 = UUVlPMUulT95813650;     UUVlPMUulT95813650 = UUVlPMUulT76742716;     UUVlPMUulT76742716 = UUVlPMUulT26229681;     UUVlPMUulT26229681 = UUVlPMUulT64031913;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void KkbsmRFSSh50942136() {     int kZCbeBAxKn50671142 = -136207796;    int kZCbeBAxKn6065454 = -383457589;    int kZCbeBAxKn58103192 = -662359331;    int kZCbeBAxKn47013524 = -356860164;    int kZCbeBAxKn24475842 = -184934574;    int kZCbeBAxKn36538560 = -175726588;    int kZCbeBAxKn25676467 = -303749056;    int kZCbeBAxKn1941376 = -620789162;    int kZCbeBAxKn31184830 = 39865602;    int kZCbeBAxKn8062903 = -768807735;    int kZCbeBAxKn83249554 = -867268189;    int kZCbeBAxKn8607707 = 51136539;    int kZCbeBAxKn71472207 = -114333675;    int kZCbeBAxKn20985468 = -78537414;    int kZCbeBAxKn44804281 = -757708753;    int kZCbeBAxKn5975630 = -647740986;    int kZCbeBAxKn23198396 = -7565181;    int kZCbeBAxKn30156156 = 97443161;    int kZCbeBAxKn39558155 = -255772528;    int kZCbeBAxKn40145363 = -41947629;    int kZCbeBAxKn19534771 = -588863783;    int kZCbeBAxKn25161912 = -69919033;    int kZCbeBAxKn71807948 = -764989755;    int kZCbeBAxKn40266945 = -13858884;    int kZCbeBAxKn972844 = -682320733;    int kZCbeBAxKn94606690 = -326119488;    int kZCbeBAxKn88886167 = -159802602;    int kZCbeBAxKn6817866 = -706894084;    int kZCbeBAxKn25485648 = -996319443;    int kZCbeBAxKn82615691 = -612050769;    int kZCbeBAxKn48864636 = -145291985;    int kZCbeBAxKn63233713 = -446781059;    int kZCbeBAxKn48432783 = -287314429;    int kZCbeBAxKn40757502 = -401697331;    int kZCbeBAxKn78422752 = -78807302;    int kZCbeBAxKn25090927 = -430272988;    int kZCbeBAxKn31275006 = -65723366;    int kZCbeBAxKn96428747 = -228130045;    int kZCbeBAxKn16689658 = -971495584;    int kZCbeBAxKn93437975 = -934240356;    int kZCbeBAxKn61867926 = -903122375;    int kZCbeBAxKn9144885 = -470172804;    int kZCbeBAxKn11719210 = -108022402;    int kZCbeBAxKn33108309 = -28340755;    int kZCbeBAxKn2945817 = -550683066;    int kZCbeBAxKn38701489 = 48031090;    int kZCbeBAxKn86764015 = -637839986;    int kZCbeBAxKn73257321 = -267193853;    int kZCbeBAxKn78180612 = -287265687;    int kZCbeBAxKn48797480 = -848617602;    int kZCbeBAxKn1703595 = -419332247;    int kZCbeBAxKn76762038 = -637862432;    int kZCbeBAxKn80593891 = 50423307;    int kZCbeBAxKn72810673 = -45041916;    int kZCbeBAxKn31407365 = -498906484;    int kZCbeBAxKn25509230 = 33711236;    int kZCbeBAxKn34257506 = -618467834;    int kZCbeBAxKn17836248 = -548500447;    int kZCbeBAxKn46040681 = -674539432;    int kZCbeBAxKn29869152 = -858815087;    int kZCbeBAxKn47652393 = 84076013;    int kZCbeBAxKn18858601 = -596854972;    int kZCbeBAxKn76455727 = -624469720;    int kZCbeBAxKn48569139 = -348083629;    int kZCbeBAxKn59198267 = -523515751;    int kZCbeBAxKn20015841 = -320487131;    int kZCbeBAxKn60174924 = -661549033;    int kZCbeBAxKn30714705 = -712636345;    int kZCbeBAxKn42562715 = -999730113;    int kZCbeBAxKn19713355 = -227435765;    int kZCbeBAxKn74700623 = -482017620;    int kZCbeBAxKn26769649 = -779435137;    int kZCbeBAxKn13466498 = 68938744;    int kZCbeBAxKn46120179 = -321532172;    int kZCbeBAxKn78277436 = -138825254;    int kZCbeBAxKn10389886 = -18690980;    int kZCbeBAxKn13442702 = -961896631;    int kZCbeBAxKn38699639 = -636649001;    int kZCbeBAxKn37321128 = -463175819;    int kZCbeBAxKn62271355 = -630351823;    int kZCbeBAxKn7842675 = -688279502;    int kZCbeBAxKn15628846 = -892608749;    int kZCbeBAxKn28637254 = -319628398;    int kZCbeBAxKn76688167 = -47701842;    int kZCbeBAxKn80912096 = -92718523;    int kZCbeBAxKn72102597 = -507429553;    int kZCbeBAxKn82639821 = -397204367;    int kZCbeBAxKn75622109 = -142272513;    int kZCbeBAxKn9350138 = -902790848;    int kZCbeBAxKn52913522 = -12518538;    int kZCbeBAxKn90833420 = -811805155;    int kZCbeBAxKn13438759 = -517222919;    int kZCbeBAxKn50388067 = -553590614;    int kZCbeBAxKn86820505 = -12680497;    int kZCbeBAxKn45785583 = -918316370;    int kZCbeBAxKn43009325 = -206267403;    int kZCbeBAxKn32689157 = -845703085;    int kZCbeBAxKn63150071 = -759938773;    int kZCbeBAxKn73910041 = -504825004;    int kZCbeBAxKn82929975 = -136207796;     kZCbeBAxKn50671142 = kZCbeBAxKn6065454;     kZCbeBAxKn6065454 = kZCbeBAxKn58103192;     kZCbeBAxKn58103192 = kZCbeBAxKn47013524;     kZCbeBAxKn47013524 = kZCbeBAxKn24475842;     kZCbeBAxKn24475842 = kZCbeBAxKn36538560;     kZCbeBAxKn36538560 = kZCbeBAxKn25676467;     kZCbeBAxKn25676467 = kZCbeBAxKn1941376;     kZCbeBAxKn1941376 = kZCbeBAxKn31184830;     kZCbeBAxKn31184830 = kZCbeBAxKn8062903;     kZCbeBAxKn8062903 = kZCbeBAxKn83249554;     kZCbeBAxKn83249554 = kZCbeBAxKn8607707;     kZCbeBAxKn8607707 = kZCbeBAxKn71472207;     kZCbeBAxKn71472207 = kZCbeBAxKn20985468;     kZCbeBAxKn20985468 = kZCbeBAxKn44804281;     kZCbeBAxKn44804281 = kZCbeBAxKn5975630;     kZCbeBAxKn5975630 = kZCbeBAxKn23198396;     kZCbeBAxKn23198396 = kZCbeBAxKn30156156;     kZCbeBAxKn30156156 = kZCbeBAxKn39558155;     kZCbeBAxKn39558155 = kZCbeBAxKn40145363;     kZCbeBAxKn40145363 = kZCbeBAxKn19534771;     kZCbeBAxKn19534771 = kZCbeBAxKn25161912;     kZCbeBAxKn25161912 = kZCbeBAxKn71807948;     kZCbeBAxKn71807948 = kZCbeBAxKn40266945;     kZCbeBAxKn40266945 = kZCbeBAxKn972844;     kZCbeBAxKn972844 = kZCbeBAxKn94606690;     kZCbeBAxKn94606690 = kZCbeBAxKn88886167;     kZCbeBAxKn88886167 = kZCbeBAxKn6817866;     kZCbeBAxKn6817866 = kZCbeBAxKn25485648;     kZCbeBAxKn25485648 = kZCbeBAxKn82615691;     kZCbeBAxKn82615691 = kZCbeBAxKn48864636;     kZCbeBAxKn48864636 = kZCbeBAxKn63233713;     kZCbeBAxKn63233713 = kZCbeBAxKn48432783;     kZCbeBAxKn48432783 = kZCbeBAxKn40757502;     kZCbeBAxKn40757502 = kZCbeBAxKn78422752;     kZCbeBAxKn78422752 = kZCbeBAxKn25090927;     kZCbeBAxKn25090927 = kZCbeBAxKn31275006;     kZCbeBAxKn31275006 = kZCbeBAxKn96428747;     kZCbeBAxKn96428747 = kZCbeBAxKn16689658;     kZCbeBAxKn16689658 = kZCbeBAxKn93437975;     kZCbeBAxKn93437975 = kZCbeBAxKn61867926;     kZCbeBAxKn61867926 = kZCbeBAxKn9144885;     kZCbeBAxKn9144885 = kZCbeBAxKn11719210;     kZCbeBAxKn11719210 = kZCbeBAxKn33108309;     kZCbeBAxKn33108309 = kZCbeBAxKn2945817;     kZCbeBAxKn2945817 = kZCbeBAxKn38701489;     kZCbeBAxKn38701489 = kZCbeBAxKn86764015;     kZCbeBAxKn86764015 = kZCbeBAxKn73257321;     kZCbeBAxKn73257321 = kZCbeBAxKn78180612;     kZCbeBAxKn78180612 = kZCbeBAxKn48797480;     kZCbeBAxKn48797480 = kZCbeBAxKn1703595;     kZCbeBAxKn1703595 = kZCbeBAxKn76762038;     kZCbeBAxKn76762038 = kZCbeBAxKn80593891;     kZCbeBAxKn80593891 = kZCbeBAxKn72810673;     kZCbeBAxKn72810673 = kZCbeBAxKn31407365;     kZCbeBAxKn31407365 = kZCbeBAxKn25509230;     kZCbeBAxKn25509230 = kZCbeBAxKn34257506;     kZCbeBAxKn34257506 = kZCbeBAxKn17836248;     kZCbeBAxKn17836248 = kZCbeBAxKn46040681;     kZCbeBAxKn46040681 = kZCbeBAxKn29869152;     kZCbeBAxKn29869152 = kZCbeBAxKn47652393;     kZCbeBAxKn47652393 = kZCbeBAxKn18858601;     kZCbeBAxKn18858601 = kZCbeBAxKn76455727;     kZCbeBAxKn76455727 = kZCbeBAxKn48569139;     kZCbeBAxKn48569139 = kZCbeBAxKn59198267;     kZCbeBAxKn59198267 = kZCbeBAxKn20015841;     kZCbeBAxKn20015841 = kZCbeBAxKn60174924;     kZCbeBAxKn60174924 = kZCbeBAxKn30714705;     kZCbeBAxKn30714705 = kZCbeBAxKn42562715;     kZCbeBAxKn42562715 = kZCbeBAxKn19713355;     kZCbeBAxKn19713355 = kZCbeBAxKn74700623;     kZCbeBAxKn74700623 = kZCbeBAxKn26769649;     kZCbeBAxKn26769649 = kZCbeBAxKn13466498;     kZCbeBAxKn13466498 = kZCbeBAxKn46120179;     kZCbeBAxKn46120179 = kZCbeBAxKn78277436;     kZCbeBAxKn78277436 = kZCbeBAxKn10389886;     kZCbeBAxKn10389886 = kZCbeBAxKn13442702;     kZCbeBAxKn13442702 = kZCbeBAxKn38699639;     kZCbeBAxKn38699639 = kZCbeBAxKn37321128;     kZCbeBAxKn37321128 = kZCbeBAxKn62271355;     kZCbeBAxKn62271355 = kZCbeBAxKn7842675;     kZCbeBAxKn7842675 = kZCbeBAxKn15628846;     kZCbeBAxKn15628846 = kZCbeBAxKn28637254;     kZCbeBAxKn28637254 = kZCbeBAxKn76688167;     kZCbeBAxKn76688167 = kZCbeBAxKn80912096;     kZCbeBAxKn80912096 = kZCbeBAxKn72102597;     kZCbeBAxKn72102597 = kZCbeBAxKn82639821;     kZCbeBAxKn82639821 = kZCbeBAxKn75622109;     kZCbeBAxKn75622109 = kZCbeBAxKn9350138;     kZCbeBAxKn9350138 = kZCbeBAxKn52913522;     kZCbeBAxKn52913522 = kZCbeBAxKn90833420;     kZCbeBAxKn90833420 = kZCbeBAxKn13438759;     kZCbeBAxKn13438759 = kZCbeBAxKn50388067;     kZCbeBAxKn50388067 = kZCbeBAxKn86820505;     kZCbeBAxKn86820505 = kZCbeBAxKn45785583;     kZCbeBAxKn45785583 = kZCbeBAxKn43009325;     kZCbeBAxKn43009325 = kZCbeBAxKn32689157;     kZCbeBAxKn32689157 = kZCbeBAxKn63150071;     kZCbeBAxKn63150071 = kZCbeBAxKn73910041;     kZCbeBAxKn73910041 = kZCbeBAxKn82929975;     kZCbeBAxKn82929975 = kZCbeBAxKn50671142;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kieUyJRVit18233735() {     int kDZLhwthLb86130110 = -602484696;    int kDZLhwthLb19337533 = -264009195;    int kDZLhwthLb95489669 = -328026406;    int kDZLhwthLb19236880 = -178011235;    int kDZLhwthLb80761111 = -290533419;    int kDZLhwthLb72761432 = -438074483;    int kDZLhwthLb36333873 = -148474790;    int kDZLhwthLb64072936 = -265023303;    int kDZLhwthLb32702435 = -448465805;    int kDZLhwthLb22965615 = -433494733;    int kDZLhwthLb21431289 = -669275918;    int kDZLhwthLb9175856 = -912984233;    int kDZLhwthLb9706853 = -666346180;    int kDZLhwthLb74126330 = -54900823;    int kDZLhwthLb2998798 = -161133768;    int kDZLhwthLb89516930 = -283552593;    int kDZLhwthLb79034332 = -534539734;    int kDZLhwthLb29916347 = 24015093;    int kDZLhwthLb40108485 = -572335950;    int kDZLhwthLb33982581 = -468508695;    int kDZLhwthLb32621634 = -246138472;    int kDZLhwthLb28583437 = -156555327;    int kDZLhwthLb42333328 = -402621939;    int kDZLhwthLb34059890 = -524683488;    int kDZLhwthLb8990795 = -706305931;    int kDZLhwthLb5304862 = -14696295;    int kDZLhwthLb49306741 = 33913257;    int kDZLhwthLb47546291 = -876666259;    int kDZLhwthLb72153862 = -470414246;    int kDZLhwthLb88149102 = -646557940;    int kDZLhwthLb67447867 = -697272472;    int kDZLhwthLb1056732 = -219752474;    int kDZLhwthLb60650793 = -434910406;    int kDZLhwthLb70505928 = -466391144;    int kDZLhwthLb44231206 = -29907552;    int kDZLhwthLb76651771 = -644838294;    int kDZLhwthLb80686822 = 69580594;    int kDZLhwthLb47644151 = -210785626;    int kDZLhwthLb47080219 = -622371860;    int kDZLhwthLb57709508 = -399502903;    int kDZLhwthLb95319533 = -672321289;    int kDZLhwthLb98510011 = -64718095;    int kDZLhwthLb1102589 = -761203188;    int kDZLhwthLb73239647 = -632673165;    int kDZLhwthLb2962276 = -377194227;    int kDZLhwthLb84662817 = 9107457;    int kDZLhwthLb6109179 = -21826347;    int kDZLhwthLb90983633 = -433720446;    int kDZLhwthLb1073279 = 48997433;    int kDZLhwthLb73327069 = -239644417;    int kDZLhwthLb82474318 = -293608805;    int kDZLhwthLb60247511 = -851514778;    int kDZLhwthLb49215040 = -805622247;    int kDZLhwthLb88802519 = -236550416;    int kDZLhwthLb85612101 = -845396630;    int kDZLhwthLb57546674 = -345929369;    int kDZLhwthLb77004205 = -861387257;    int kDZLhwthLb61429780 = -803342918;    int kDZLhwthLb10246085 = -471705305;    int kDZLhwthLb75456249 = -175837125;    int kDZLhwthLb23454691 = -371987741;    int kDZLhwthLb88787582 = -271808532;    int kDZLhwthLb91919074 = -794609058;    int kDZLhwthLb44553333 = -801907865;    int kDZLhwthLb55517748 = -736222262;    int kDZLhwthLb20374558 = -349523445;    int kDZLhwthLb48525062 = -378073827;    int kDZLhwthLb39200924 = -99955036;    int kDZLhwthLb29895125 = 75006728;    int kDZLhwthLb26347027 = -516295474;    int kDZLhwthLb8830108 = -253133187;    int kDZLhwthLb31390181 = -223754108;    int kDZLhwthLb82836128 = -353613048;    int kDZLhwthLb82398977 = -72833048;    int kDZLhwthLb38663048 = -796187406;    int kDZLhwthLb34111622 = -81420377;    int kDZLhwthLb27480849 = -395352139;    int kDZLhwthLb69093680 = -769948775;    int kDZLhwthLb31097614 = -47489261;    int kDZLhwthLb24327978 = -615413389;    int kDZLhwthLb99195682 = -992869949;    int kDZLhwthLb58323108 = -532366297;    int kDZLhwthLb46473013 = -825663692;    int kDZLhwthLb98826792 = -130769829;    int kDZLhwthLb5674784 = -252949136;    int kDZLhwthLb7200357 = -845757694;    int kDZLhwthLb51841691 = -414130227;    int kDZLhwthLb71848273 = -98359991;    int kDZLhwthLb84893827 = -620994515;    int kDZLhwthLb86684532 = -683978183;    int kDZLhwthLb99647565 = -783451038;    int kDZLhwthLb19257043 = -127076489;    int kDZLhwthLb37398067 = -739080322;    int kDZLhwthLb71623969 = -346534735;    int kDZLhwthLb34254818 = 72484838;    int kDZLhwthLb6531952 = -300512757;    int kDZLhwthLb6590938 = -270109038;    int kDZLhwthLb56549255 = -959295323;    int kDZLhwthLb17721899 = -896450903;    int kDZLhwthLb82587718 = -602484696;     kDZLhwthLb86130110 = kDZLhwthLb19337533;     kDZLhwthLb19337533 = kDZLhwthLb95489669;     kDZLhwthLb95489669 = kDZLhwthLb19236880;     kDZLhwthLb19236880 = kDZLhwthLb80761111;     kDZLhwthLb80761111 = kDZLhwthLb72761432;     kDZLhwthLb72761432 = kDZLhwthLb36333873;     kDZLhwthLb36333873 = kDZLhwthLb64072936;     kDZLhwthLb64072936 = kDZLhwthLb32702435;     kDZLhwthLb32702435 = kDZLhwthLb22965615;     kDZLhwthLb22965615 = kDZLhwthLb21431289;     kDZLhwthLb21431289 = kDZLhwthLb9175856;     kDZLhwthLb9175856 = kDZLhwthLb9706853;     kDZLhwthLb9706853 = kDZLhwthLb74126330;     kDZLhwthLb74126330 = kDZLhwthLb2998798;     kDZLhwthLb2998798 = kDZLhwthLb89516930;     kDZLhwthLb89516930 = kDZLhwthLb79034332;     kDZLhwthLb79034332 = kDZLhwthLb29916347;     kDZLhwthLb29916347 = kDZLhwthLb40108485;     kDZLhwthLb40108485 = kDZLhwthLb33982581;     kDZLhwthLb33982581 = kDZLhwthLb32621634;     kDZLhwthLb32621634 = kDZLhwthLb28583437;     kDZLhwthLb28583437 = kDZLhwthLb42333328;     kDZLhwthLb42333328 = kDZLhwthLb34059890;     kDZLhwthLb34059890 = kDZLhwthLb8990795;     kDZLhwthLb8990795 = kDZLhwthLb5304862;     kDZLhwthLb5304862 = kDZLhwthLb49306741;     kDZLhwthLb49306741 = kDZLhwthLb47546291;     kDZLhwthLb47546291 = kDZLhwthLb72153862;     kDZLhwthLb72153862 = kDZLhwthLb88149102;     kDZLhwthLb88149102 = kDZLhwthLb67447867;     kDZLhwthLb67447867 = kDZLhwthLb1056732;     kDZLhwthLb1056732 = kDZLhwthLb60650793;     kDZLhwthLb60650793 = kDZLhwthLb70505928;     kDZLhwthLb70505928 = kDZLhwthLb44231206;     kDZLhwthLb44231206 = kDZLhwthLb76651771;     kDZLhwthLb76651771 = kDZLhwthLb80686822;     kDZLhwthLb80686822 = kDZLhwthLb47644151;     kDZLhwthLb47644151 = kDZLhwthLb47080219;     kDZLhwthLb47080219 = kDZLhwthLb57709508;     kDZLhwthLb57709508 = kDZLhwthLb95319533;     kDZLhwthLb95319533 = kDZLhwthLb98510011;     kDZLhwthLb98510011 = kDZLhwthLb1102589;     kDZLhwthLb1102589 = kDZLhwthLb73239647;     kDZLhwthLb73239647 = kDZLhwthLb2962276;     kDZLhwthLb2962276 = kDZLhwthLb84662817;     kDZLhwthLb84662817 = kDZLhwthLb6109179;     kDZLhwthLb6109179 = kDZLhwthLb90983633;     kDZLhwthLb90983633 = kDZLhwthLb1073279;     kDZLhwthLb1073279 = kDZLhwthLb73327069;     kDZLhwthLb73327069 = kDZLhwthLb82474318;     kDZLhwthLb82474318 = kDZLhwthLb60247511;     kDZLhwthLb60247511 = kDZLhwthLb49215040;     kDZLhwthLb49215040 = kDZLhwthLb88802519;     kDZLhwthLb88802519 = kDZLhwthLb85612101;     kDZLhwthLb85612101 = kDZLhwthLb57546674;     kDZLhwthLb57546674 = kDZLhwthLb77004205;     kDZLhwthLb77004205 = kDZLhwthLb61429780;     kDZLhwthLb61429780 = kDZLhwthLb10246085;     kDZLhwthLb10246085 = kDZLhwthLb75456249;     kDZLhwthLb75456249 = kDZLhwthLb23454691;     kDZLhwthLb23454691 = kDZLhwthLb88787582;     kDZLhwthLb88787582 = kDZLhwthLb91919074;     kDZLhwthLb91919074 = kDZLhwthLb44553333;     kDZLhwthLb44553333 = kDZLhwthLb55517748;     kDZLhwthLb55517748 = kDZLhwthLb20374558;     kDZLhwthLb20374558 = kDZLhwthLb48525062;     kDZLhwthLb48525062 = kDZLhwthLb39200924;     kDZLhwthLb39200924 = kDZLhwthLb29895125;     kDZLhwthLb29895125 = kDZLhwthLb26347027;     kDZLhwthLb26347027 = kDZLhwthLb8830108;     kDZLhwthLb8830108 = kDZLhwthLb31390181;     kDZLhwthLb31390181 = kDZLhwthLb82836128;     kDZLhwthLb82836128 = kDZLhwthLb82398977;     kDZLhwthLb82398977 = kDZLhwthLb38663048;     kDZLhwthLb38663048 = kDZLhwthLb34111622;     kDZLhwthLb34111622 = kDZLhwthLb27480849;     kDZLhwthLb27480849 = kDZLhwthLb69093680;     kDZLhwthLb69093680 = kDZLhwthLb31097614;     kDZLhwthLb31097614 = kDZLhwthLb24327978;     kDZLhwthLb24327978 = kDZLhwthLb99195682;     kDZLhwthLb99195682 = kDZLhwthLb58323108;     kDZLhwthLb58323108 = kDZLhwthLb46473013;     kDZLhwthLb46473013 = kDZLhwthLb98826792;     kDZLhwthLb98826792 = kDZLhwthLb5674784;     kDZLhwthLb5674784 = kDZLhwthLb7200357;     kDZLhwthLb7200357 = kDZLhwthLb51841691;     kDZLhwthLb51841691 = kDZLhwthLb71848273;     kDZLhwthLb71848273 = kDZLhwthLb84893827;     kDZLhwthLb84893827 = kDZLhwthLb86684532;     kDZLhwthLb86684532 = kDZLhwthLb99647565;     kDZLhwthLb99647565 = kDZLhwthLb19257043;     kDZLhwthLb19257043 = kDZLhwthLb37398067;     kDZLhwthLb37398067 = kDZLhwthLb71623969;     kDZLhwthLb71623969 = kDZLhwthLb34254818;     kDZLhwthLb34254818 = kDZLhwthLb6531952;     kDZLhwthLb6531952 = kDZLhwthLb6590938;     kDZLhwthLb6590938 = kDZLhwthLb56549255;     kDZLhwthLb56549255 = kDZLhwthLb17721899;     kDZLhwthLb17721899 = kDZLhwthLb82587718;     kDZLhwthLb82587718 = kDZLhwthLb86130110;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void vCjxxprQAL33282803() {     int bfYjRXsWsd92247217 = -714386584;    int bfYjRXsWsd62710812 = 26391024;    int bfYjRXsWsd11531853 = -478859327;    int bfYjRXsWsd46311660 = -368759865;    int bfYjRXsWsd49656600 = -811183291;    int bfYjRXsWsd64178634 = -702570718;    int bfYjRXsWsd96822839 = -287439768;    int bfYjRXsWsd13832827 = -551897216;    int bfYjRXsWsd97344930 = -216498470;    int bfYjRXsWsd64195274 = -762470211;    int bfYjRXsWsd81541579 = -546713505;    int bfYjRXsWsd40998898 = -257390434;    int bfYjRXsWsd95915971 = -6237269;    int bfYjRXsWsd57270007 = -587139391;    int bfYjRXsWsd98741224 = -851595934;    int bfYjRXsWsd31022324 = -256552136;    int bfYjRXsWsd72870335 = -51084847;    int bfYjRXsWsd26969500 = -741507550;    int bfYjRXsWsd1938327 = -978105047;    int bfYjRXsWsd14532746 = -825411614;    int bfYjRXsWsd21174827 = -101625928;    int bfYjRXsWsd15104461 = -64485043;    int bfYjRXsWsd77924119 = -149139426;    int bfYjRXsWsd18052264 = -746988476;    int bfYjRXsWsd52690445 = 20498036;    int bfYjRXsWsd30026537 = -993351618;    int bfYjRXsWsd47766519 = -966748946;    int bfYjRXsWsd60653416 = -942595212;    int bfYjRXsWsd38286118 = -692796950;    int bfYjRXsWsd56764739 = -464028807;    int bfYjRXsWsd59690416 = -610593410;    int bfYjRXsWsd98667353 = 70800711;    int bfYjRXsWsd70361742 = -327523776;    int bfYjRXsWsd65336493 = -217932910;    int bfYjRXsWsd5705859 = -668640658;    int bfYjRXsWsd45377684 = -858864402;    int bfYjRXsWsd61948757 = -984055276;    int bfYjRXsWsd81734363 = 17708364;    int bfYjRXsWsd20690473 = -616295357;    int bfYjRXsWsd45211446 = -872942125;    int bfYjRXsWsd988758 = -737595183;    int bfYjRXsWsd30660469 = -334860373;    int bfYjRXsWsd79169566 = -842007772;    int bfYjRXsWsd60647387 = -652016103;    int bfYjRXsWsd14914741 = -39092381;    int bfYjRXsWsd96602012 = 23891341;    int bfYjRXsWsd23887754 = -140601884;    int bfYjRXsWsd98940573 = -443615979;    int bfYjRXsWsd10749008 = -36739555;    int bfYjRXsWsd86238721 = -326655226;    int bfYjRXsWsd18174997 = -135902476;    int bfYjRXsWsd71057230 = -652241099;    int bfYjRXsWsd97463497 = -597411834;    int bfYjRXsWsd84771400 = -557020561;    int bfYjRXsWsd12107976 = -445928412;    int bfYjRXsWsd77142757 = -549901542;    int bfYjRXsWsd84786692 = -824469550;    int bfYjRXsWsd93479589 = -731870851;    int bfYjRXsWsd93621215 = -289257902;    int bfYjRXsWsd19630063 = -817831673;    int bfYjRXsWsd16412115 = -735821773;    int bfYjRXsWsd36169423 = -344844556;    int bfYjRXsWsd75546709 = -859100266;    int bfYjRXsWsd40580192 = -752469664;    int bfYjRXsWsd4504858 = -51876802;    int bfYjRXsWsd82874226 = -517514216;    int bfYjRXsWsd70637156 = -929866659;    int bfYjRXsWsd30579479 = -788304360;    int bfYjRXsWsd51564149 = -918498734;    int bfYjRXsWsd53363540 = -992731533;    int bfYjRXsWsd69073566 = -272496860;    int bfYjRXsWsd91135971 = 31206788;    int bfYjRXsWsd6279028 = -25212194;    int bfYjRXsWsd56726881 = -5162922;    int bfYjRXsWsd13543989 = 12183569;    int bfYjRXsWsd90514358 = -766765555;    int bfYjRXsWsd35934894 = -222477272;    int bfYjRXsWsd17276732 = -497123324;    int bfYjRXsWsd3137523 = -607896095;    int bfYjRXsWsd56088433 = 96606695;    int bfYjRXsWsd6138784 = -752749734;    int bfYjRXsWsd48825945 = -423132967;    int bfYjRXsWsd49904409 = -805855657;    int bfYjRXsWsd52047396 = -266141725;    int bfYjRXsWsd38589742 = -228126332;    int bfYjRXsWsd88633186 = -958352312;    int bfYjRXsWsd1203856 = -331787455;    int bfYjRXsWsd85590341 = -770503216;    int bfYjRXsWsd53228517 = -772004498;    int bfYjRXsWsd28563102 = -18739116;    int bfYjRXsWsd60590991 = 65605148;    int bfYjRXsWsd68469168 = -152184425;    int bfYjRXsWsd88113148 = -693033734;    int bfYjRXsWsd1060411 = -798463684;    int bfYjRXsWsd28799331 = -37120352;    int bfYjRXsWsd64819334 = -292750628;    int bfYjRXsWsd55113759 = -475760108;    int bfYjRXsWsd38589375 = 10461892;    int bfYjRXsWsd56142530 = -500139301;    int bfYjRXsWsd32040515 = -714386584;     bfYjRXsWsd92247217 = bfYjRXsWsd62710812;     bfYjRXsWsd62710812 = bfYjRXsWsd11531853;     bfYjRXsWsd11531853 = bfYjRXsWsd46311660;     bfYjRXsWsd46311660 = bfYjRXsWsd49656600;     bfYjRXsWsd49656600 = bfYjRXsWsd64178634;     bfYjRXsWsd64178634 = bfYjRXsWsd96822839;     bfYjRXsWsd96822839 = bfYjRXsWsd13832827;     bfYjRXsWsd13832827 = bfYjRXsWsd97344930;     bfYjRXsWsd97344930 = bfYjRXsWsd64195274;     bfYjRXsWsd64195274 = bfYjRXsWsd81541579;     bfYjRXsWsd81541579 = bfYjRXsWsd40998898;     bfYjRXsWsd40998898 = bfYjRXsWsd95915971;     bfYjRXsWsd95915971 = bfYjRXsWsd57270007;     bfYjRXsWsd57270007 = bfYjRXsWsd98741224;     bfYjRXsWsd98741224 = bfYjRXsWsd31022324;     bfYjRXsWsd31022324 = bfYjRXsWsd72870335;     bfYjRXsWsd72870335 = bfYjRXsWsd26969500;     bfYjRXsWsd26969500 = bfYjRXsWsd1938327;     bfYjRXsWsd1938327 = bfYjRXsWsd14532746;     bfYjRXsWsd14532746 = bfYjRXsWsd21174827;     bfYjRXsWsd21174827 = bfYjRXsWsd15104461;     bfYjRXsWsd15104461 = bfYjRXsWsd77924119;     bfYjRXsWsd77924119 = bfYjRXsWsd18052264;     bfYjRXsWsd18052264 = bfYjRXsWsd52690445;     bfYjRXsWsd52690445 = bfYjRXsWsd30026537;     bfYjRXsWsd30026537 = bfYjRXsWsd47766519;     bfYjRXsWsd47766519 = bfYjRXsWsd60653416;     bfYjRXsWsd60653416 = bfYjRXsWsd38286118;     bfYjRXsWsd38286118 = bfYjRXsWsd56764739;     bfYjRXsWsd56764739 = bfYjRXsWsd59690416;     bfYjRXsWsd59690416 = bfYjRXsWsd98667353;     bfYjRXsWsd98667353 = bfYjRXsWsd70361742;     bfYjRXsWsd70361742 = bfYjRXsWsd65336493;     bfYjRXsWsd65336493 = bfYjRXsWsd5705859;     bfYjRXsWsd5705859 = bfYjRXsWsd45377684;     bfYjRXsWsd45377684 = bfYjRXsWsd61948757;     bfYjRXsWsd61948757 = bfYjRXsWsd81734363;     bfYjRXsWsd81734363 = bfYjRXsWsd20690473;     bfYjRXsWsd20690473 = bfYjRXsWsd45211446;     bfYjRXsWsd45211446 = bfYjRXsWsd988758;     bfYjRXsWsd988758 = bfYjRXsWsd30660469;     bfYjRXsWsd30660469 = bfYjRXsWsd79169566;     bfYjRXsWsd79169566 = bfYjRXsWsd60647387;     bfYjRXsWsd60647387 = bfYjRXsWsd14914741;     bfYjRXsWsd14914741 = bfYjRXsWsd96602012;     bfYjRXsWsd96602012 = bfYjRXsWsd23887754;     bfYjRXsWsd23887754 = bfYjRXsWsd98940573;     bfYjRXsWsd98940573 = bfYjRXsWsd10749008;     bfYjRXsWsd10749008 = bfYjRXsWsd86238721;     bfYjRXsWsd86238721 = bfYjRXsWsd18174997;     bfYjRXsWsd18174997 = bfYjRXsWsd71057230;     bfYjRXsWsd71057230 = bfYjRXsWsd97463497;     bfYjRXsWsd97463497 = bfYjRXsWsd84771400;     bfYjRXsWsd84771400 = bfYjRXsWsd12107976;     bfYjRXsWsd12107976 = bfYjRXsWsd77142757;     bfYjRXsWsd77142757 = bfYjRXsWsd84786692;     bfYjRXsWsd84786692 = bfYjRXsWsd93479589;     bfYjRXsWsd93479589 = bfYjRXsWsd93621215;     bfYjRXsWsd93621215 = bfYjRXsWsd19630063;     bfYjRXsWsd19630063 = bfYjRXsWsd16412115;     bfYjRXsWsd16412115 = bfYjRXsWsd36169423;     bfYjRXsWsd36169423 = bfYjRXsWsd75546709;     bfYjRXsWsd75546709 = bfYjRXsWsd40580192;     bfYjRXsWsd40580192 = bfYjRXsWsd4504858;     bfYjRXsWsd4504858 = bfYjRXsWsd82874226;     bfYjRXsWsd82874226 = bfYjRXsWsd70637156;     bfYjRXsWsd70637156 = bfYjRXsWsd30579479;     bfYjRXsWsd30579479 = bfYjRXsWsd51564149;     bfYjRXsWsd51564149 = bfYjRXsWsd53363540;     bfYjRXsWsd53363540 = bfYjRXsWsd69073566;     bfYjRXsWsd69073566 = bfYjRXsWsd91135971;     bfYjRXsWsd91135971 = bfYjRXsWsd6279028;     bfYjRXsWsd6279028 = bfYjRXsWsd56726881;     bfYjRXsWsd56726881 = bfYjRXsWsd13543989;     bfYjRXsWsd13543989 = bfYjRXsWsd90514358;     bfYjRXsWsd90514358 = bfYjRXsWsd35934894;     bfYjRXsWsd35934894 = bfYjRXsWsd17276732;     bfYjRXsWsd17276732 = bfYjRXsWsd3137523;     bfYjRXsWsd3137523 = bfYjRXsWsd56088433;     bfYjRXsWsd56088433 = bfYjRXsWsd6138784;     bfYjRXsWsd6138784 = bfYjRXsWsd48825945;     bfYjRXsWsd48825945 = bfYjRXsWsd49904409;     bfYjRXsWsd49904409 = bfYjRXsWsd52047396;     bfYjRXsWsd52047396 = bfYjRXsWsd38589742;     bfYjRXsWsd38589742 = bfYjRXsWsd88633186;     bfYjRXsWsd88633186 = bfYjRXsWsd1203856;     bfYjRXsWsd1203856 = bfYjRXsWsd85590341;     bfYjRXsWsd85590341 = bfYjRXsWsd53228517;     bfYjRXsWsd53228517 = bfYjRXsWsd28563102;     bfYjRXsWsd28563102 = bfYjRXsWsd60590991;     bfYjRXsWsd60590991 = bfYjRXsWsd68469168;     bfYjRXsWsd68469168 = bfYjRXsWsd88113148;     bfYjRXsWsd88113148 = bfYjRXsWsd1060411;     bfYjRXsWsd1060411 = bfYjRXsWsd28799331;     bfYjRXsWsd28799331 = bfYjRXsWsd64819334;     bfYjRXsWsd64819334 = bfYjRXsWsd55113759;     bfYjRXsWsd55113759 = bfYjRXsWsd38589375;     bfYjRXsWsd38589375 = bfYjRXsWsd56142530;     bfYjRXsWsd56142530 = bfYjRXsWsd32040515;     bfYjRXsWsd32040515 = bfYjRXsWsd92247217;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JqfXmFAzLw574403() {     int btQqmIbYYjmgHVsiqbd27706186 = -80663484;    int btQqmIbYYjmgHVsiqbd75982890 = -954160583;    int btQqmIbYYjmgHVsiqbd48918330 = -144526402;    int btQqmIbYYjmgHVsiqbd18535015 = -189910937;    int btQqmIbYYjmgHVsiqbd5941870 = -916782136;    int btQqmIbYYjmgHVsiqbd401507 = -964918614;    int btQqmIbYYjmgHVsiqbd7480246 = -132165502;    int btQqmIbYYjmgHVsiqbd75964388 = -196131356;    int btQqmIbYYjmgHVsiqbd98862535 = -704829877;    int btQqmIbYYjmgHVsiqbd79097986 = -427157209;    int btQqmIbYYjmgHVsiqbd19723314 = -348721234;    int btQqmIbYYjmgHVsiqbd41567046 = -121511206;    int btQqmIbYYjmgHVsiqbd34150617 = -558249774;    int btQqmIbYYjmgHVsiqbd10410871 = -563502800;    int btQqmIbYYjmgHVsiqbd56935741 = -255020949;    int btQqmIbYYjmgHVsiqbd14563625 = -992363743;    int btQqmIbYYjmgHVsiqbd28706271 = -578059400;    int btQqmIbYYjmgHVsiqbd26729692 = -814935619;    int btQqmIbYYjmgHVsiqbd2488657 = -194668468;    int btQqmIbYYjmgHVsiqbd8369965 = -151972680;    int btQqmIbYYjmgHVsiqbd34261690 = -858900616;    int btQqmIbYYjmgHVsiqbd18525985 = -151121337;    int btQqmIbYYjmgHVsiqbd48449499 = -886771610;    int btQqmIbYYjmgHVsiqbd11845209 = -157813080;    int btQqmIbYYjmgHVsiqbd60708396 = -3487162;    int btQqmIbYYjmgHVsiqbd40724709 = -681928425;    int btQqmIbYYjmgHVsiqbd8187094 = -773033087;    int btQqmIbYYjmgHVsiqbd1381842 = -12367387;    int btQqmIbYYjmgHVsiqbd84954332 = -166891753;    int btQqmIbYYjmgHVsiqbd62298149 = -498535978;    int btQqmIbYYjmgHVsiqbd78273648 = -62573897;    int btQqmIbYYjmgHVsiqbd36490372 = -802170704;    int btQqmIbYYjmgHVsiqbd82579752 = -475119754;    int btQqmIbYYjmgHVsiqbd95084919 = -282626723;    int btQqmIbYYjmgHVsiqbd71514312 = -619740908;    int btQqmIbYYjmgHVsiqbd96938527 = 26570292;    int btQqmIbYYjmgHVsiqbd11360574 = -848751316;    int btQqmIbYYjmgHVsiqbd32949767 = 35052783;    int btQqmIbYYjmgHVsiqbd51081034 = -267171633;    int btQqmIbYYjmgHVsiqbd9482978 = -338204671;    int btQqmIbYYjmgHVsiqbd34440365 = -506794098;    int btQqmIbYYjmgHVsiqbd20025596 = 70594336;    int btQqmIbYYjmgHVsiqbd68552945 = -395188557;    int btQqmIbYYjmgHVsiqbd778726 = -156348513;    int btQqmIbYYjmgHVsiqbd14931200 = -965603543;    int btQqmIbYYjmgHVsiqbd42563341 = -15032291;    int btQqmIbYYjmgHVsiqbd43232917 = -624588245;    int btQqmIbYYjmgHVsiqbd16666886 = -610142572;    int btQqmIbYYjmgHVsiqbd33641673 = -800476436;    int btQqmIbYYjmgHVsiqbd10768312 = -817682041;    int btQqmIbYYjmgHVsiqbd98945720 = -10179033;    int btQqmIbYYjmgHVsiqbd54542703 = -865893445;    int btQqmIbYYjmgHVsiqbd66084646 = -353457388;    int btQqmIbYYjmgHVsiqbd763247 = -748529061;    int btQqmIbYYjmgHVsiqbd66312712 = -792418558;    int btQqmIbYYjmgHVsiqbd9180201 = -929542148;    int btQqmIbYYjmgHVsiqbd27533391 = 32611027;    int btQqmIbYYjmgHVsiqbd37073121 = -986713322;    int btQqmIbYYjmgHVsiqbd57826619 = -86423775;    int btQqmIbYYjmgHVsiqbd65217160 = -134853712;    int btQqmIbYYjmgHVsiqbd92214412 = -91885528;    int btQqmIbYYjmgHVsiqbd6098405 = -19798116;    int btQqmIbYYjmgHVsiqbd91010055 = 70760396;    int btQqmIbYYjmgHVsiqbd36564386 = -106293900;    int btQqmIbYYjmgHVsiqbd824339 = -264583313;    int btQqmIbYYjmgHVsiqbd83232942 = -546550531;    int btQqmIbYYjmgHVsiqbd58987294 = -646391453;    int btQqmIbYYjmgHVsiqbd39065697 = -175623051;    int btQqmIbYYjmgHVsiqbd38896559 = -943761893;    int btQqmIbYYjmgHVsiqbd59997213 = -181591242;    int btQqmIbYYjmgHVsiqbd3203051 = -43612427;    int btQqmIbYYjmgHVsiqbd95756503 = -513112183;    int btQqmIbYYjmgHVsiqbd75648657 = -447763986;    int btQqmIbYYjmgHVsiqbd93005678 = -856463797;    int btQqmIbYYjmgHVsiqbd73929599 = -645178583;    int btQqmIbYYjmgHVsiqbd14236095 = -829494953;    int btQqmIbYYjmgHVsiqbd49973040 = -755932780;    int btQqmIbYYjmgHVsiqbd47670773 = -630423098;    int btQqmIbYYjmgHVsiqbd96914009 = -192209538;    int btQqmIbYYjmgHVsiqbd18145056 = -988454871;    int btQqmIbYYjmgHVsiqbd97491791 = 42659820;    int btQqmIbYYjmgHVsiqbd91520207 = -62890515;    int btQqmIbYYjmgHVsiqbd67740168 = -211890952;    int btQqmIbYYjmgHVsiqbd74186021 = -349209712;    int btQqmIbYYjmgHVsiqbd63352429 = -388356945;    int btQqmIbYYjmgHVsiqbd23730946 = -196680452;    int btQqmIbYYjmgHVsiqbd70405725 = -348713316;    int btQqmIbYYjmgHVsiqbd81816506 = -726590693;    int btQqmIbYYjmgHVsiqbd28772207 = -490208166;    int btQqmIbYYjmgHVsiqbd62334111 = -690198761;    int btQqmIbYYjmgHVsiqbd69405137 = 93959265;    int btQqmIbYYjmgHVsiqbd74287453 = -862037994;    int btQqmIbYYjmgHVsiqbd75123148 = -878523443;    int btQqmIbYYjmgHVsiqbd85863874 = -32317922;    int btQqmIbYYjmgHVsiqbd17268565 = -146319144;    int btQqmIbYYjmgHVsiqbd28341961 = -386995982;    int btQqmIbYYjmgHVsiqbd29015540 = 99833939;    int btQqmIbYYjmgHVsiqbd31988559 = -188894658;    int btQqmIbYYjmgHVsiqbd99954387 = -891765201;    int btQqmIbYYjmgHVsiqbd31698257 = -80663484;     btQqmIbYYjmgHVsiqbd27706186 = btQqmIbYYjmgHVsiqbd75982890;     btQqmIbYYjmgHVsiqbd75982890 = btQqmIbYYjmgHVsiqbd48918330;     btQqmIbYYjmgHVsiqbd48918330 = btQqmIbYYjmgHVsiqbd18535015;     btQqmIbYYjmgHVsiqbd18535015 = btQqmIbYYjmgHVsiqbd5941870;     btQqmIbYYjmgHVsiqbd5941870 = btQqmIbYYjmgHVsiqbd401507;     btQqmIbYYjmgHVsiqbd401507 = btQqmIbYYjmgHVsiqbd7480246;     btQqmIbYYjmgHVsiqbd7480246 = btQqmIbYYjmgHVsiqbd75964388;     btQqmIbYYjmgHVsiqbd75964388 = btQqmIbYYjmgHVsiqbd98862535;     btQqmIbYYjmgHVsiqbd98862535 = btQqmIbYYjmgHVsiqbd79097986;     btQqmIbYYjmgHVsiqbd79097986 = btQqmIbYYjmgHVsiqbd19723314;     btQqmIbYYjmgHVsiqbd19723314 = btQqmIbYYjmgHVsiqbd41567046;     btQqmIbYYjmgHVsiqbd41567046 = btQqmIbYYjmgHVsiqbd34150617;     btQqmIbYYjmgHVsiqbd34150617 = btQqmIbYYjmgHVsiqbd10410871;     btQqmIbYYjmgHVsiqbd10410871 = btQqmIbYYjmgHVsiqbd56935741;     btQqmIbYYjmgHVsiqbd56935741 = btQqmIbYYjmgHVsiqbd14563625;     btQqmIbYYjmgHVsiqbd14563625 = btQqmIbYYjmgHVsiqbd28706271;     btQqmIbYYjmgHVsiqbd28706271 = btQqmIbYYjmgHVsiqbd26729692;     btQqmIbYYjmgHVsiqbd26729692 = btQqmIbYYjmgHVsiqbd2488657;     btQqmIbYYjmgHVsiqbd2488657 = btQqmIbYYjmgHVsiqbd8369965;     btQqmIbYYjmgHVsiqbd8369965 = btQqmIbYYjmgHVsiqbd34261690;     btQqmIbYYjmgHVsiqbd34261690 = btQqmIbYYjmgHVsiqbd18525985;     btQqmIbYYjmgHVsiqbd18525985 = btQqmIbYYjmgHVsiqbd48449499;     btQqmIbYYjmgHVsiqbd48449499 = btQqmIbYYjmgHVsiqbd11845209;     btQqmIbYYjmgHVsiqbd11845209 = btQqmIbYYjmgHVsiqbd60708396;     btQqmIbYYjmgHVsiqbd60708396 = btQqmIbYYjmgHVsiqbd40724709;     btQqmIbYYjmgHVsiqbd40724709 = btQqmIbYYjmgHVsiqbd8187094;     btQqmIbYYjmgHVsiqbd8187094 = btQqmIbYYjmgHVsiqbd1381842;     btQqmIbYYjmgHVsiqbd1381842 = btQqmIbYYjmgHVsiqbd84954332;     btQqmIbYYjmgHVsiqbd84954332 = btQqmIbYYjmgHVsiqbd62298149;     btQqmIbYYjmgHVsiqbd62298149 = btQqmIbYYjmgHVsiqbd78273648;     btQqmIbYYjmgHVsiqbd78273648 = btQqmIbYYjmgHVsiqbd36490372;     btQqmIbYYjmgHVsiqbd36490372 = btQqmIbYYjmgHVsiqbd82579752;     btQqmIbYYjmgHVsiqbd82579752 = btQqmIbYYjmgHVsiqbd95084919;     btQqmIbYYjmgHVsiqbd95084919 = btQqmIbYYjmgHVsiqbd71514312;     btQqmIbYYjmgHVsiqbd71514312 = btQqmIbYYjmgHVsiqbd96938527;     btQqmIbYYjmgHVsiqbd96938527 = btQqmIbYYjmgHVsiqbd11360574;     btQqmIbYYjmgHVsiqbd11360574 = btQqmIbYYjmgHVsiqbd32949767;     btQqmIbYYjmgHVsiqbd32949767 = btQqmIbYYjmgHVsiqbd51081034;     btQqmIbYYjmgHVsiqbd51081034 = btQqmIbYYjmgHVsiqbd9482978;     btQqmIbYYjmgHVsiqbd9482978 = btQqmIbYYjmgHVsiqbd34440365;     btQqmIbYYjmgHVsiqbd34440365 = btQqmIbYYjmgHVsiqbd20025596;     btQqmIbYYjmgHVsiqbd20025596 = btQqmIbYYjmgHVsiqbd68552945;     btQqmIbYYjmgHVsiqbd68552945 = btQqmIbYYjmgHVsiqbd778726;     btQqmIbYYjmgHVsiqbd778726 = btQqmIbYYjmgHVsiqbd14931200;     btQqmIbYYjmgHVsiqbd14931200 = btQqmIbYYjmgHVsiqbd42563341;     btQqmIbYYjmgHVsiqbd42563341 = btQqmIbYYjmgHVsiqbd43232917;     btQqmIbYYjmgHVsiqbd43232917 = btQqmIbYYjmgHVsiqbd16666886;     btQqmIbYYjmgHVsiqbd16666886 = btQqmIbYYjmgHVsiqbd33641673;     btQqmIbYYjmgHVsiqbd33641673 = btQqmIbYYjmgHVsiqbd10768312;     btQqmIbYYjmgHVsiqbd10768312 = btQqmIbYYjmgHVsiqbd98945720;     btQqmIbYYjmgHVsiqbd98945720 = btQqmIbYYjmgHVsiqbd54542703;     btQqmIbYYjmgHVsiqbd54542703 = btQqmIbYYjmgHVsiqbd66084646;     btQqmIbYYjmgHVsiqbd66084646 = btQqmIbYYjmgHVsiqbd763247;     btQqmIbYYjmgHVsiqbd763247 = btQqmIbYYjmgHVsiqbd66312712;     btQqmIbYYjmgHVsiqbd66312712 = btQqmIbYYjmgHVsiqbd9180201;     btQqmIbYYjmgHVsiqbd9180201 = btQqmIbYYjmgHVsiqbd27533391;     btQqmIbYYjmgHVsiqbd27533391 = btQqmIbYYjmgHVsiqbd37073121;     btQqmIbYYjmgHVsiqbd37073121 = btQqmIbYYjmgHVsiqbd57826619;     btQqmIbYYjmgHVsiqbd57826619 = btQqmIbYYjmgHVsiqbd65217160;     btQqmIbYYjmgHVsiqbd65217160 = btQqmIbYYjmgHVsiqbd92214412;     btQqmIbYYjmgHVsiqbd92214412 = btQqmIbYYjmgHVsiqbd6098405;     btQqmIbYYjmgHVsiqbd6098405 = btQqmIbYYjmgHVsiqbd91010055;     btQqmIbYYjmgHVsiqbd91010055 = btQqmIbYYjmgHVsiqbd36564386;     btQqmIbYYjmgHVsiqbd36564386 = btQqmIbYYjmgHVsiqbd824339;     btQqmIbYYjmgHVsiqbd824339 = btQqmIbYYjmgHVsiqbd83232942;     btQqmIbYYjmgHVsiqbd83232942 = btQqmIbYYjmgHVsiqbd58987294;     btQqmIbYYjmgHVsiqbd58987294 = btQqmIbYYjmgHVsiqbd39065697;     btQqmIbYYjmgHVsiqbd39065697 = btQqmIbYYjmgHVsiqbd38896559;     btQqmIbYYjmgHVsiqbd38896559 = btQqmIbYYjmgHVsiqbd59997213;     btQqmIbYYjmgHVsiqbd59997213 = btQqmIbYYjmgHVsiqbd3203051;     btQqmIbYYjmgHVsiqbd3203051 = btQqmIbYYjmgHVsiqbd95756503;     btQqmIbYYjmgHVsiqbd95756503 = btQqmIbYYjmgHVsiqbd75648657;     btQqmIbYYjmgHVsiqbd75648657 = btQqmIbYYjmgHVsiqbd93005678;     btQqmIbYYjmgHVsiqbd93005678 = btQqmIbYYjmgHVsiqbd73929599;     btQqmIbYYjmgHVsiqbd73929599 = btQqmIbYYjmgHVsiqbd14236095;     btQqmIbYYjmgHVsiqbd14236095 = btQqmIbYYjmgHVsiqbd49973040;     btQqmIbYYjmgHVsiqbd49973040 = btQqmIbYYjmgHVsiqbd47670773;     btQqmIbYYjmgHVsiqbd47670773 = btQqmIbYYjmgHVsiqbd96914009;     btQqmIbYYjmgHVsiqbd96914009 = btQqmIbYYjmgHVsiqbd18145056;     btQqmIbYYjmgHVsiqbd18145056 = btQqmIbYYjmgHVsiqbd97491791;     btQqmIbYYjmgHVsiqbd97491791 = btQqmIbYYjmgHVsiqbd91520207;     btQqmIbYYjmgHVsiqbd91520207 = btQqmIbYYjmgHVsiqbd67740168;     btQqmIbYYjmgHVsiqbd67740168 = btQqmIbYYjmgHVsiqbd74186021;     btQqmIbYYjmgHVsiqbd74186021 = btQqmIbYYjmgHVsiqbd63352429;     btQqmIbYYjmgHVsiqbd63352429 = btQqmIbYYjmgHVsiqbd23730946;     btQqmIbYYjmgHVsiqbd23730946 = btQqmIbYYjmgHVsiqbd70405725;     btQqmIbYYjmgHVsiqbd70405725 = btQqmIbYYjmgHVsiqbd81816506;     btQqmIbYYjmgHVsiqbd81816506 = btQqmIbYYjmgHVsiqbd28772207;     btQqmIbYYjmgHVsiqbd28772207 = btQqmIbYYjmgHVsiqbd62334111;     btQqmIbYYjmgHVsiqbd62334111 = btQqmIbYYjmgHVsiqbd69405137;     btQqmIbYYjmgHVsiqbd69405137 = btQqmIbYYjmgHVsiqbd74287453;     btQqmIbYYjmgHVsiqbd74287453 = btQqmIbYYjmgHVsiqbd75123148;     btQqmIbYYjmgHVsiqbd75123148 = btQqmIbYYjmgHVsiqbd85863874;     btQqmIbYYjmgHVsiqbd85863874 = btQqmIbYYjmgHVsiqbd17268565;     btQqmIbYYjmgHVsiqbd17268565 = btQqmIbYYjmgHVsiqbd28341961;     btQqmIbYYjmgHVsiqbd28341961 = btQqmIbYYjmgHVsiqbd29015540;     btQqmIbYYjmgHVsiqbd29015540 = btQqmIbYYjmgHVsiqbd31988559;     btQqmIbYYjmgHVsiqbd31988559 = btQqmIbYYjmgHVsiqbd99954387;     btQqmIbYYjmgHVsiqbd99954387 = btQqmIbYYjmgHVsiqbd31698257;     btQqmIbYYjmgHVsiqbd31698257 = btQqmIbYYjmgHVsiqbd27706186;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rSGWkzpMQV51503973() {     int QMdynljKaNrHtExRTot3293081 = -362565549;    int QMdynljKaNrHtExRTot37736954 = -98989578;    int QMdynljKaNrHtExRTot6469203 = -232705784;    int QMdynljKaNrHtExRTot67986979 = 32901378;    int QMdynljKaNrHtExRTot73073848 = -296615593;    int QMdynljKaNrHtExRTot8709425 = -95041414;    int QMdynljKaNrHtExRTot70664256 = 36697408;    int QMdynljKaNrHtExRTot23671000 = -100768906;    int QMdynljKaNrHtExRTot53506787 = -997642405;    int QMdynljKaNrHtExRTot99096490 = -27517015;    int QMdynljKaNrHtExRTot28976717 = -119281103;    int QMdynljKaNrHtExRTot73311783 = -81350522;    int QMdynljKaNrHtExRTot52768166 = -592083520;    int QMdynljKaNrHtExRTot13509533 = 98261169;    int QMdynljKaNrHtExRTot51911601 = -152888694;    int QMdynljKaNrHtExRTot28643531 = 29643693;    int QMdynljKaNrHtExRTot14541198 = -861475551;    int QMdynljKaNrHtExRTot67095463 = -406945074;    int QMdynljKaNrHtExRTot83846310 = -273146759;    int QMdynljKaNrHtExRTot1512991 = -523405943;    int QMdynljKaNrHtExRTot15353600 = -842983804;    int QMdynljKaNrHtExRTot75455025 = -718356296;    int QMdynljKaNrHtExRTot42993698 = 8875745;    int QMdynljKaNrHtExRTot52646724 = -596431929;    int QMdynljKaNrHtExRTot33500863 = -289309841;    int QMdynljKaNrHtExRTot41070326 = -819327484;    int QMdynljKaNrHtExRTot98019606 = -263646293;    int QMdynljKaNrHtExRTot56429760 = -639787872;    int QMdynljKaNrHtExRTot39661933 = -516668024;    int QMdynljKaNrHtExRTot21598173 = -488587696;    int QMdynljKaNrHtExRTot91967113 = -294447619;    int QMdynljKaNrHtExRTot77499340 = -428011097;    int QMdynljKaNrHtExRTot32403699 = -47454837;    int QMdynljKaNrHtExRTot48601281 = -644601261;    int QMdynljKaNrHtExRTot2329791 = -156348339;    int QMdynljKaNrHtExRTot91023330 = -196082987;    int QMdynljKaNrHtExRTot83020617 = -479349916;    int QMdynljKaNrHtExRTot41043034 = -914846372;    int QMdynljKaNrHtExRTot33176214 = -272339601;    int QMdynljKaNrHtExRTot25298429 = -80817069;    int QMdynljKaNrHtExRTot84627729 = -234868313;    int QMdynljKaNrHtExRTot67610770 = -389996148;    int QMdynljKaNrHtExRTot27682325 = -834012375;    int QMdynljKaNrHtExRTot31764030 = -735523001;    int QMdynljKaNrHtExRTot35907562 = 38690190;    int QMdynljKaNrHtExRTot98856670 = -859568661;    int QMdynljKaNrHtExRTot86076923 = 13263050;    int QMdynljKaNrHtExRTot80933761 = -926135080;    int QMdynljKaNrHtExRTot54788396 = -734211697;    int QMdynljKaNrHtExRTot9566951 = -768948973;    int QMdynljKaNrHtExRTot55767126 = -364198884;    int QMdynljKaNrHtExRTot28164468 = -673436188;    int QMdynljKaNrHtExRTot40296163 = -673342435;    int QMdynljKaNrHtExRTot17099588 = -105612879;    int QMdynljKaNrHtExRTot36150373 = -228284156;    int QMdynljKaNrHtExRTot27838056 = -644209254;    int QMdynljKaNrHtExRTot94743256 = -7865324;    int QMdynljKaNrHtExRTot53822478 = -636273856;    int QMdynljKaNrHtExRTot34486117 = -677788782;    int QMdynljKaNrHtExRTot32003522 = -477288109;    int QMdynljKaNrHtExRTot10689818 = -831395122;    int QMdynljKaNrHtExRTot14234496 = -323514720;    int QMdynljKaNrHtExRTot84009066 = -584100882;    int QMdynljKaNrHtExRTot31908615 = -409054709;    int QMdynljKaNrHtExRTot7129378 = -733069396;    int QMdynljKaNrHtExRTot51477377 = -691270006;    int QMdynljKaNrHtExRTot40908084 = 66104314;    int QMdynljKaNrHtExRTot4166885 = -947482259;    int QMdynljKaNrHtExRTot11179742 = -745390493;    int QMdynljKaNrHtExRTot60888271 = -956805708;    int QMdynljKaNrHtExRTot45622913 = -491006392;    int QMdynljKaNrHtExRTot73498163 = -946629179;    int QMdynljKaNrHtExRTot33919249 = -34605474;    int QMdynljKaNrHtExRTot58547881 = -92329690;    int QMdynljKaNrHtExRTot16885261 = -188537630;    int QMdynljKaNrHtExRTot47742829 = -352987657;    int QMdynljKaNrHtExRTot47772701 = -884343921;    int QMdynljKaNrHtExRTot11229668 = -255601255;    int QMdynljKaNrHtExRTot16739162 = -535122120;    int QMdynljKaNrHtExRTot34644192 = -429741181;    int QMdynljKaNrHtExRTot54993403 = -732590535;    int QMdynljKaNrHtExRTot17085846 = -337511214;    int QMdynljKaNrHtExRTot1641365 = -905576176;    int QMdynljKaNrHtExRTot30094983 = -747719052;    int QMdynljKaNrHtExRTot65831047 = -24388813;    int QMdynljKaNrHtExRTot63802645 = -621011432;    int QMdynljKaNrHtExRTot37203177 = -754668663;    int QMdynljKaNrHtExRTot15304111 = -941841958;    int QMdynljKaNrHtExRTot12450908 = -316317106;    int QMdynljKaNrHtExRTot74491735 = -512139085;    int QMdynljKaNrHtExRTot96280074 = -88217664;    int QMdynljKaNrHtExRTot29198139 = -843076061;    int QMdynljKaNrHtExRTot6556918 = -137057591;    int QMdynljKaNrHtExRTot1172692 = -795051492;    int QMdynljKaNrHtExRTot14608611 = -249421948;    int QMdynljKaNrHtExRTot70393233 = -911353593;    int QMdynljKaNrHtExRTot83601703 = -805895266;    int QMdynljKaNrHtExRTot95773709 = -324957667;    int QMdynljKaNrHtExRTot24634653 = 97546395;    int QMdynljKaNrHtExRTot84430185 = -362565549;     QMdynljKaNrHtExRTot3293081 = QMdynljKaNrHtExRTot37736954;     QMdynljKaNrHtExRTot37736954 = QMdynljKaNrHtExRTot6469203;     QMdynljKaNrHtExRTot6469203 = QMdynljKaNrHtExRTot67986979;     QMdynljKaNrHtExRTot67986979 = QMdynljKaNrHtExRTot73073848;     QMdynljKaNrHtExRTot73073848 = QMdynljKaNrHtExRTot8709425;     QMdynljKaNrHtExRTot8709425 = QMdynljKaNrHtExRTot70664256;     QMdynljKaNrHtExRTot70664256 = QMdynljKaNrHtExRTot23671000;     QMdynljKaNrHtExRTot23671000 = QMdynljKaNrHtExRTot53506787;     QMdynljKaNrHtExRTot53506787 = QMdynljKaNrHtExRTot99096490;     QMdynljKaNrHtExRTot99096490 = QMdynljKaNrHtExRTot28976717;     QMdynljKaNrHtExRTot28976717 = QMdynljKaNrHtExRTot73311783;     QMdynljKaNrHtExRTot73311783 = QMdynljKaNrHtExRTot52768166;     QMdynljKaNrHtExRTot52768166 = QMdynljKaNrHtExRTot13509533;     QMdynljKaNrHtExRTot13509533 = QMdynljKaNrHtExRTot51911601;     QMdynljKaNrHtExRTot51911601 = QMdynljKaNrHtExRTot28643531;     QMdynljKaNrHtExRTot28643531 = QMdynljKaNrHtExRTot14541198;     QMdynljKaNrHtExRTot14541198 = QMdynljKaNrHtExRTot67095463;     QMdynljKaNrHtExRTot67095463 = QMdynljKaNrHtExRTot83846310;     QMdynljKaNrHtExRTot83846310 = QMdynljKaNrHtExRTot1512991;     QMdynljKaNrHtExRTot1512991 = QMdynljKaNrHtExRTot15353600;     QMdynljKaNrHtExRTot15353600 = QMdynljKaNrHtExRTot75455025;     QMdynljKaNrHtExRTot75455025 = QMdynljKaNrHtExRTot42993698;     QMdynljKaNrHtExRTot42993698 = QMdynljKaNrHtExRTot52646724;     QMdynljKaNrHtExRTot52646724 = QMdynljKaNrHtExRTot33500863;     QMdynljKaNrHtExRTot33500863 = QMdynljKaNrHtExRTot41070326;     QMdynljKaNrHtExRTot41070326 = QMdynljKaNrHtExRTot98019606;     QMdynljKaNrHtExRTot98019606 = QMdynljKaNrHtExRTot56429760;     QMdynljKaNrHtExRTot56429760 = QMdynljKaNrHtExRTot39661933;     QMdynljKaNrHtExRTot39661933 = QMdynljKaNrHtExRTot21598173;     QMdynljKaNrHtExRTot21598173 = QMdynljKaNrHtExRTot91967113;     QMdynljKaNrHtExRTot91967113 = QMdynljKaNrHtExRTot77499340;     QMdynljKaNrHtExRTot77499340 = QMdynljKaNrHtExRTot32403699;     QMdynljKaNrHtExRTot32403699 = QMdynljKaNrHtExRTot48601281;     QMdynljKaNrHtExRTot48601281 = QMdynljKaNrHtExRTot2329791;     QMdynljKaNrHtExRTot2329791 = QMdynljKaNrHtExRTot91023330;     QMdynljKaNrHtExRTot91023330 = QMdynljKaNrHtExRTot83020617;     QMdynljKaNrHtExRTot83020617 = QMdynljKaNrHtExRTot41043034;     QMdynljKaNrHtExRTot41043034 = QMdynljKaNrHtExRTot33176214;     QMdynljKaNrHtExRTot33176214 = QMdynljKaNrHtExRTot25298429;     QMdynljKaNrHtExRTot25298429 = QMdynljKaNrHtExRTot84627729;     QMdynljKaNrHtExRTot84627729 = QMdynljKaNrHtExRTot67610770;     QMdynljKaNrHtExRTot67610770 = QMdynljKaNrHtExRTot27682325;     QMdynljKaNrHtExRTot27682325 = QMdynljKaNrHtExRTot31764030;     QMdynljKaNrHtExRTot31764030 = QMdynljKaNrHtExRTot35907562;     QMdynljKaNrHtExRTot35907562 = QMdynljKaNrHtExRTot98856670;     QMdynljKaNrHtExRTot98856670 = QMdynljKaNrHtExRTot86076923;     QMdynljKaNrHtExRTot86076923 = QMdynljKaNrHtExRTot80933761;     QMdynljKaNrHtExRTot80933761 = QMdynljKaNrHtExRTot54788396;     QMdynljKaNrHtExRTot54788396 = QMdynljKaNrHtExRTot9566951;     QMdynljKaNrHtExRTot9566951 = QMdynljKaNrHtExRTot55767126;     QMdynljKaNrHtExRTot55767126 = QMdynljKaNrHtExRTot28164468;     QMdynljKaNrHtExRTot28164468 = QMdynljKaNrHtExRTot40296163;     QMdynljKaNrHtExRTot40296163 = QMdynljKaNrHtExRTot17099588;     QMdynljKaNrHtExRTot17099588 = QMdynljKaNrHtExRTot36150373;     QMdynljKaNrHtExRTot36150373 = QMdynljKaNrHtExRTot27838056;     QMdynljKaNrHtExRTot27838056 = QMdynljKaNrHtExRTot94743256;     QMdynljKaNrHtExRTot94743256 = QMdynljKaNrHtExRTot53822478;     QMdynljKaNrHtExRTot53822478 = QMdynljKaNrHtExRTot34486117;     QMdynljKaNrHtExRTot34486117 = QMdynljKaNrHtExRTot32003522;     QMdynljKaNrHtExRTot32003522 = QMdynljKaNrHtExRTot10689818;     QMdynljKaNrHtExRTot10689818 = QMdynljKaNrHtExRTot14234496;     QMdynljKaNrHtExRTot14234496 = QMdynljKaNrHtExRTot84009066;     QMdynljKaNrHtExRTot84009066 = QMdynljKaNrHtExRTot31908615;     QMdynljKaNrHtExRTot31908615 = QMdynljKaNrHtExRTot7129378;     QMdynljKaNrHtExRTot7129378 = QMdynljKaNrHtExRTot51477377;     QMdynljKaNrHtExRTot51477377 = QMdynljKaNrHtExRTot40908084;     QMdynljKaNrHtExRTot40908084 = QMdynljKaNrHtExRTot4166885;     QMdynljKaNrHtExRTot4166885 = QMdynljKaNrHtExRTot11179742;     QMdynljKaNrHtExRTot11179742 = QMdynljKaNrHtExRTot60888271;     QMdynljKaNrHtExRTot60888271 = QMdynljKaNrHtExRTot45622913;     QMdynljKaNrHtExRTot45622913 = QMdynljKaNrHtExRTot73498163;     QMdynljKaNrHtExRTot73498163 = QMdynljKaNrHtExRTot33919249;     QMdynljKaNrHtExRTot33919249 = QMdynljKaNrHtExRTot58547881;     QMdynljKaNrHtExRTot58547881 = QMdynljKaNrHtExRTot16885261;     QMdynljKaNrHtExRTot16885261 = QMdynljKaNrHtExRTot47742829;     QMdynljKaNrHtExRTot47742829 = QMdynljKaNrHtExRTot47772701;     QMdynljKaNrHtExRTot47772701 = QMdynljKaNrHtExRTot11229668;     QMdynljKaNrHtExRTot11229668 = QMdynljKaNrHtExRTot16739162;     QMdynljKaNrHtExRTot16739162 = QMdynljKaNrHtExRTot34644192;     QMdynljKaNrHtExRTot34644192 = QMdynljKaNrHtExRTot54993403;     QMdynljKaNrHtExRTot54993403 = QMdynljKaNrHtExRTot17085846;     QMdynljKaNrHtExRTot17085846 = QMdynljKaNrHtExRTot1641365;     QMdynljKaNrHtExRTot1641365 = QMdynljKaNrHtExRTot30094983;     QMdynljKaNrHtExRTot30094983 = QMdynljKaNrHtExRTot65831047;     QMdynljKaNrHtExRTot65831047 = QMdynljKaNrHtExRTot63802645;     QMdynljKaNrHtExRTot63802645 = QMdynljKaNrHtExRTot37203177;     QMdynljKaNrHtExRTot37203177 = QMdynljKaNrHtExRTot15304111;     QMdynljKaNrHtExRTot15304111 = QMdynljKaNrHtExRTot12450908;     QMdynljKaNrHtExRTot12450908 = QMdynljKaNrHtExRTot74491735;     QMdynljKaNrHtExRTot74491735 = QMdynljKaNrHtExRTot96280074;     QMdynljKaNrHtExRTot96280074 = QMdynljKaNrHtExRTot29198139;     QMdynljKaNrHtExRTot29198139 = QMdynljKaNrHtExRTot6556918;     QMdynljKaNrHtExRTot6556918 = QMdynljKaNrHtExRTot1172692;     QMdynljKaNrHtExRTot1172692 = QMdynljKaNrHtExRTot14608611;     QMdynljKaNrHtExRTot14608611 = QMdynljKaNrHtExRTot70393233;     QMdynljKaNrHtExRTot70393233 = QMdynljKaNrHtExRTot83601703;     QMdynljKaNrHtExRTot83601703 = QMdynljKaNrHtExRTot95773709;     QMdynljKaNrHtExRTot95773709 = QMdynljKaNrHtExRTot24634653;     QMdynljKaNrHtExRTot24634653 = QMdynljKaNrHtExRTot84430185;     QMdynljKaNrHtExRTot84430185 = QMdynljKaNrHtExRTot3293081;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void OWWZUNYMyXJHpxhEnfScbeZzQRKIqgybNLDVmHJAsOEGDPukniHWxfnjx20577333() {     long WJDDPWRZhteuMSfVSjMaTwBXZ31255374 = -34813097;    long WJDDPWRZhteuMSfVSjMaTwBXZ70686802 = -587391956;    long WJDDPWRZhteuMSfVSjMaTwBXZ96524324 = -907910373;    long WJDDPWRZhteuMSfVSjMaTwBXZ9587298 = -5517786;    long WJDDPWRZhteuMSfVSjMaTwBXZ89018112 = -98725935;    long WJDDPWRZhteuMSfVSjMaTwBXZ72148832 = -156352606;    long WJDDPWRZhteuMSfVSjMaTwBXZ8050361 = -175265027;    long WJDDPWRZhteuMSfVSjMaTwBXZ53109948 = 31156545;    long WJDDPWRZhteuMSfVSjMaTwBXZ41587977 = -884644028;    long WJDDPWRZhteuMSfVSjMaTwBXZ69724085 = -427006960;    long WJDDPWRZhteuMSfVSjMaTwBXZ11300866 = -830146967;    long WJDDPWRZhteuMSfVSjMaTwBXZ51812001 = 56205734;    long WJDDPWRZhteuMSfVSjMaTwBXZ94684820 = -171698872;    long WJDDPWRZhteuMSfVSjMaTwBXZ68514146 = -77009756;    long WJDDPWRZhteuMSfVSjMaTwBXZ46717936 = 56526551;    long WJDDPWRZhteuMSfVSjMaTwBXZ71043868 = -919691382;    long WJDDPWRZhteuMSfVSjMaTwBXZ42268996 = -411514834;    long WJDDPWRZhteuMSfVSjMaTwBXZ70254966 = -233646770;    long WJDDPWRZhteuMSfVSjMaTwBXZ81131745 = -43517524;    long WJDDPWRZhteuMSfVSjMaTwBXZ38885297 = -730721114;    long WJDDPWRZhteuMSfVSjMaTwBXZ94712880 = -588914840;    long WJDDPWRZhteuMSfVSjMaTwBXZ20872492 = -145950416;    long WJDDPWRZhteuMSfVSjMaTwBXZ9355243 = -778880899;    long WJDDPWRZhteuMSfVSjMaTwBXZ68938272 = -861277195;    long WJDDPWRZhteuMSfVSjMaTwBXZ40935695 = -85478923;    long WJDDPWRZhteuMSfVSjMaTwBXZ37470559 = -218218330;    long WJDDPWRZhteuMSfVSjMaTwBXZ4295524 = -288373123;    long WJDDPWRZhteuMSfVSjMaTwBXZ89610756 = -106136300;    long WJDDPWRZhteuMSfVSjMaTwBXZ36319959 = -475655311;    long WJDDPWRZhteuMSfVSjMaTwBXZ50242807 = -519364815;    long WJDDPWRZhteuMSfVSjMaTwBXZ85101984 = -234119952;    long WJDDPWRZhteuMSfVSjMaTwBXZ49072030 = -336083208;    long WJDDPWRZhteuMSfVSjMaTwBXZ83363968 = -935181734;    long WJDDPWRZhteuMSfVSjMaTwBXZ50223768 = 76487084;    long WJDDPWRZhteuMSfVSjMaTwBXZ33142932 = 66990478;    long WJDDPWRZhteuMSfVSjMaTwBXZ12455608 = -802111515;    long WJDDPWRZhteuMSfVSjMaTwBXZ63779429 = -426011852;    long WJDDPWRZhteuMSfVSjMaTwBXZ73113623 = -180131728;    long WJDDPWRZhteuMSfVSjMaTwBXZ20271092 = -282937415;    long WJDDPWRZhteuMSfVSjMaTwBXZ50658677 = -695333011;    long WJDDPWRZhteuMSfVSjMaTwBXZ56815397 = -63170749;    long WJDDPWRZhteuMSfVSjMaTwBXZ20938706 = -657724510;    long WJDDPWRZhteuMSfVSjMaTwBXZ25930794 = -116477198;    long WJDDPWRZhteuMSfVSjMaTwBXZ44042387 = -205040566;    long WJDDPWRZhteuMSfVSjMaTwBXZ16652323 = -919492486;    long WJDDPWRZhteuMSfVSjMaTwBXZ56192297 = -393841197;    long WJDDPWRZhteuMSfVSjMaTwBXZ81970874 = -330173974;    long WJDDPWRZhteuMSfVSjMaTwBXZ43742998 = -773908019;    long WJDDPWRZhteuMSfVSjMaTwBXZ24669803 = -200567628;    long WJDDPWRZhteuMSfVSjMaTwBXZ89198444 = -169449561;    long WJDDPWRZhteuMSfVSjMaTwBXZ45850591 = -66351453;    long WJDDPWRZhteuMSfVSjMaTwBXZ24959782 = -620717353;    long WJDDPWRZhteuMSfVSjMaTwBXZ24214572 = -476040601;    long WJDDPWRZhteuMSfVSjMaTwBXZ92556806 = -615655739;    long WJDDPWRZhteuMSfVSjMaTwBXZ25864452 = -812426804;    long WJDDPWRZhteuMSfVSjMaTwBXZ10382882 = -888862681;    long WJDDPWRZhteuMSfVSjMaTwBXZ61331559 = -808511057;    long WJDDPWRZhteuMSfVSjMaTwBXZ27586052 = 53366822;    long WJDDPWRZhteuMSfVSjMaTwBXZ68651602 = -920038864;    long WJDDPWRZhteuMSfVSjMaTwBXZ51547553 = -880507606;    long WJDDPWRZhteuMSfVSjMaTwBXZ67853308 = -867979484;    long WJDDPWRZhteuMSfVSjMaTwBXZ18439605 = 30871273;    long WJDDPWRZhteuMSfVSjMaTwBXZ16789990 = -493188145;    long WJDDPWRZhteuMSfVSjMaTwBXZ91345169 = -265279213;    long WJDDPWRZhteuMSfVSjMaTwBXZ84622101 = -92887009;    long WJDDPWRZhteuMSfVSjMaTwBXZ62228836 = -394063760;    long WJDDPWRZhteuMSfVSjMaTwBXZ68448032 = -8612533;    long WJDDPWRZhteuMSfVSjMaTwBXZ44461052 = -148185957;    long WJDDPWRZhteuMSfVSjMaTwBXZ35371214 = -44000235;    long WJDDPWRZhteuMSfVSjMaTwBXZ34262329 = -141361935;    long WJDDPWRZhteuMSfVSjMaTwBXZ7264439 = -393679530;    long WJDDPWRZhteuMSfVSjMaTwBXZ69155373 = -131383106;    long WJDDPWRZhteuMSfVSjMaTwBXZ49983875 = -950709356;    long WJDDPWRZhteuMSfVSjMaTwBXZ30473068 = -348184513;    long WJDDPWRZhteuMSfVSjMaTwBXZ82069900 = -567550366;    long WJDDPWRZhteuMSfVSjMaTwBXZ73774175 = -931190330;    long WJDDPWRZhteuMSfVSjMaTwBXZ94941697 = 70526781;    long WJDDPWRZhteuMSfVSjMaTwBXZ65312856 = -473840334;    long WJDDPWRZhteuMSfVSjMaTwBXZ52285949 = -941784710;    long WJDDPWRZhteuMSfVSjMaTwBXZ84743398 = -691637727;    long WJDDPWRZhteuMSfVSjMaTwBXZ55499685 = -888044357;    long WJDDPWRZhteuMSfVSjMaTwBXZ60552525 = -514465105;    long WJDDPWRZhteuMSfVSjMaTwBXZ64940953 = -905568673;    long WJDDPWRZhteuMSfVSjMaTwBXZ47121514 = -206205750;    long WJDDPWRZhteuMSfVSjMaTwBXZ4392217 = -353013362;    long WJDDPWRZhteuMSfVSjMaTwBXZ60142202 = -613402600;    long WJDDPWRZhteuMSfVSjMaTwBXZ24857458 = -860042607;    long WJDDPWRZhteuMSfVSjMaTwBXZ90807161 = -219525995;    long WJDDPWRZhteuMSfVSjMaTwBXZ24359316 = -111086113;    long WJDDPWRZhteuMSfVSjMaTwBXZ22760050 = -44146841;    long WJDDPWRZhteuMSfVSjMaTwBXZ51124049 = -993600459;    long WJDDPWRZhteuMSfVSjMaTwBXZ36193378 = -379378674;    long WJDDPWRZhteuMSfVSjMaTwBXZ4462021 = -260092865;    long WJDDPWRZhteuMSfVSjMaTwBXZ68723538 = -402429809;    long WJDDPWRZhteuMSfVSjMaTwBXZ82805369 = -827353528;    long WJDDPWRZhteuMSfVSjMaTwBXZ38375792 = 5957977;    long WJDDPWRZhteuMSfVSjMaTwBXZ4148717 = -64536366;    long WJDDPWRZhteuMSfVSjMaTwBXZ34585625 = -851197985;    long WJDDPWRZhteuMSfVSjMaTwBXZ59420286 = -12153557;    long WJDDPWRZhteuMSfVSjMaTwBXZ54423487 = -34813097;     WJDDPWRZhteuMSfVSjMaTwBXZ31255374 = WJDDPWRZhteuMSfVSjMaTwBXZ70686802;     WJDDPWRZhteuMSfVSjMaTwBXZ70686802 = WJDDPWRZhteuMSfVSjMaTwBXZ96524324;     WJDDPWRZhteuMSfVSjMaTwBXZ96524324 = WJDDPWRZhteuMSfVSjMaTwBXZ9587298;     WJDDPWRZhteuMSfVSjMaTwBXZ9587298 = WJDDPWRZhteuMSfVSjMaTwBXZ89018112;     WJDDPWRZhteuMSfVSjMaTwBXZ89018112 = WJDDPWRZhteuMSfVSjMaTwBXZ72148832;     WJDDPWRZhteuMSfVSjMaTwBXZ72148832 = WJDDPWRZhteuMSfVSjMaTwBXZ8050361;     WJDDPWRZhteuMSfVSjMaTwBXZ8050361 = WJDDPWRZhteuMSfVSjMaTwBXZ53109948;     WJDDPWRZhteuMSfVSjMaTwBXZ53109948 = WJDDPWRZhteuMSfVSjMaTwBXZ41587977;     WJDDPWRZhteuMSfVSjMaTwBXZ41587977 = WJDDPWRZhteuMSfVSjMaTwBXZ69724085;     WJDDPWRZhteuMSfVSjMaTwBXZ69724085 = WJDDPWRZhteuMSfVSjMaTwBXZ11300866;     WJDDPWRZhteuMSfVSjMaTwBXZ11300866 = WJDDPWRZhteuMSfVSjMaTwBXZ51812001;     WJDDPWRZhteuMSfVSjMaTwBXZ51812001 = WJDDPWRZhteuMSfVSjMaTwBXZ94684820;     WJDDPWRZhteuMSfVSjMaTwBXZ94684820 = WJDDPWRZhteuMSfVSjMaTwBXZ68514146;     WJDDPWRZhteuMSfVSjMaTwBXZ68514146 = WJDDPWRZhteuMSfVSjMaTwBXZ46717936;     WJDDPWRZhteuMSfVSjMaTwBXZ46717936 = WJDDPWRZhteuMSfVSjMaTwBXZ71043868;     WJDDPWRZhteuMSfVSjMaTwBXZ71043868 = WJDDPWRZhteuMSfVSjMaTwBXZ42268996;     WJDDPWRZhteuMSfVSjMaTwBXZ42268996 = WJDDPWRZhteuMSfVSjMaTwBXZ70254966;     WJDDPWRZhteuMSfVSjMaTwBXZ70254966 = WJDDPWRZhteuMSfVSjMaTwBXZ81131745;     WJDDPWRZhteuMSfVSjMaTwBXZ81131745 = WJDDPWRZhteuMSfVSjMaTwBXZ38885297;     WJDDPWRZhteuMSfVSjMaTwBXZ38885297 = WJDDPWRZhteuMSfVSjMaTwBXZ94712880;     WJDDPWRZhteuMSfVSjMaTwBXZ94712880 = WJDDPWRZhteuMSfVSjMaTwBXZ20872492;     WJDDPWRZhteuMSfVSjMaTwBXZ20872492 = WJDDPWRZhteuMSfVSjMaTwBXZ9355243;     WJDDPWRZhteuMSfVSjMaTwBXZ9355243 = WJDDPWRZhteuMSfVSjMaTwBXZ68938272;     WJDDPWRZhteuMSfVSjMaTwBXZ68938272 = WJDDPWRZhteuMSfVSjMaTwBXZ40935695;     WJDDPWRZhteuMSfVSjMaTwBXZ40935695 = WJDDPWRZhteuMSfVSjMaTwBXZ37470559;     WJDDPWRZhteuMSfVSjMaTwBXZ37470559 = WJDDPWRZhteuMSfVSjMaTwBXZ4295524;     WJDDPWRZhteuMSfVSjMaTwBXZ4295524 = WJDDPWRZhteuMSfVSjMaTwBXZ89610756;     WJDDPWRZhteuMSfVSjMaTwBXZ89610756 = WJDDPWRZhteuMSfVSjMaTwBXZ36319959;     WJDDPWRZhteuMSfVSjMaTwBXZ36319959 = WJDDPWRZhteuMSfVSjMaTwBXZ50242807;     WJDDPWRZhteuMSfVSjMaTwBXZ50242807 = WJDDPWRZhteuMSfVSjMaTwBXZ85101984;     WJDDPWRZhteuMSfVSjMaTwBXZ85101984 = WJDDPWRZhteuMSfVSjMaTwBXZ49072030;     WJDDPWRZhteuMSfVSjMaTwBXZ49072030 = WJDDPWRZhteuMSfVSjMaTwBXZ83363968;     WJDDPWRZhteuMSfVSjMaTwBXZ83363968 = WJDDPWRZhteuMSfVSjMaTwBXZ50223768;     WJDDPWRZhteuMSfVSjMaTwBXZ50223768 = WJDDPWRZhteuMSfVSjMaTwBXZ33142932;     WJDDPWRZhteuMSfVSjMaTwBXZ33142932 = WJDDPWRZhteuMSfVSjMaTwBXZ12455608;     WJDDPWRZhteuMSfVSjMaTwBXZ12455608 = WJDDPWRZhteuMSfVSjMaTwBXZ63779429;     WJDDPWRZhteuMSfVSjMaTwBXZ63779429 = WJDDPWRZhteuMSfVSjMaTwBXZ73113623;     WJDDPWRZhteuMSfVSjMaTwBXZ73113623 = WJDDPWRZhteuMSfVSjMaTwBXZ20271092;     WJDDPWRZhteuMSfVSjMaTwBXZ20271092 = WJDDPWRZhteuMSfVSjMaTwBXZ50658677;     WJDDPWRZhteuMSfVSjMaTwBXZ50658677 = WJDDPWRZhteuMSfVSjMaTwBXZ56815397;     WJDDPWRZhteuMSfVSjMaTwBXZ56815397 = WJDDPWRZhteuMSfVSjMaTwBXZ20938706;     WJDDPWRZhteuMSfVSjMaTwBXZ20938706 = WJDDPWRZhteuMSfVSjMaTwBXZ25930794;     WJDDPWRZhteuMSfVSjMaTwBXZ25930794 = WJDDPWRZhteuMSfVSjMaTwBXZ44042387;     WJDDPWRZhteuMSfVSjMaTwBXZ44042387 = WJDDPWRZhteuMSfVSjMaTwBXZ16652323;     WJDDPWRZhteuMSfVSjMaTwBXZ16652323 = WJDDPWRZhteuMSfVSjMaTwBXZ56192297;     WJDDPWRZhteuMSfVSjMaTwBXZ56192297 = WJDDPWRZhteuMSfVSjMaTwBXZ81970874;     WJDDPWRZhteuMSfVSjMaTwBXZ81970874 = WJDDPWRZhteuMSfVSjMaTwBXZ43742998;     WJDDPWRZhteuMSfVSjMaTwBXZ43742998 = WJDDPWRZhteuMSfVSjMaTwBXZ24669803;     WJDDPWRZhteuMSfVSjMaTwBXZ24669803 = WJDDPWRZhteuMSfVSjMaTwBXZ89198444;     WJDDPWRZhteuMSfVSjMaTwBXZ89198444 = WJDDPWRZhteuMSfVSjMaTwBXZ45850591;     WJDDPWRZhteuMSfVSjMaTwBXZ45850591 = WJDDPWRZhteuMSfVSjMaTwBXZ24959782;     WJDDPWRZhteuMSfVSjMaTwBXZ24959782 = WJDDPWRZhteuMSfVSjMaTwBXZ24214572;     WJDDPWRZhteuMSfVSjMaTwBXZ24214572 = WJDDPWRZhteuMSfVSjMaTwBXZ92556806;     WJDDPWRZhteuMSfVSjMaTwBXZ92556806 = WJDDPWRZhteuMSfVSjMaTwBXZ25864452;     WJDDPWRZhteuMSfVSjMaTwBXZ25864452 = WJDDPWRZhteuMSfVSjMaTwBXZ10382882;     WJDDPWRZhteuMSfVSjMaTwBXZ10382882 = WJDDPWRZhteuMSfVSjMaTwBXZ61331559;     WJDDPWRZhteuMSfVSjMaTwBXZ61331559 = WJDDPWRZhteuMSfVSjMaTwBXZ27586052;     WJDDPWRZhteuMSfVSjMaTwBXZ27586052 = WJDDPWRZhteuMSfVSjMaTwBXZ68651602;     WJDDPWRZhteuMSfVSjMaTwBXZ68651602 = WJDDPWRZhteuMSfVSjMaTwBXZ51547553;     WJDDPWRZhteuMSfVSjMaTwBXZ51547553 = WJDDPWRZhteuMSfVSjMaTwBXZ67853308;     WJDDPWRZhteuMSfVSjMaTwBXZ67853308 = WJDDPWRZhteuMSfVSjMaTwBXZ18439605;     WJDDPWRZhteuMSfVSjMaTwBXZ18439605 = WJDDPWRZhteuMSfVSjMaTwBXZ16789990;     WJDDPWRZhteuMSfVSjMaTwBXZ16789990 = WJDDPWRZhteuMSfVSjMaTwBXZ91345169;     WJDDPWRZhteuMSfVSjMaTwBXZ91345169 = WJDDPWRZhteuMSfVSjMaTwBXZ84622101;     WJDDPWRZhteuMSfVSjMaTwBXZ84622101 = WJDDPWRZhteuMSfVSjMaTwBXZ62228836;     WJDDPWRZhteuMSfVSjMaTwBXZ62228836 = WJDDPWRZhteuMSfVSjMaTwBXZ68448032;     WJDDPWRZhteuMSfVSjMaTwBXZ68448032 = WJDDPWRZhteuMSfVSjMaTwBXZ44461052;     WJDDPWRZhteuMSfVSjMaTwBXZ44461052 = WJDDPWRZhteuMSfVSjMaTwBXZ35371214;     WJDDPWRZhteuMSfVSjMaTwBXZ35371214 = WJDDPWRZhteuMSfVSjMaTwBXZ34262329;     WJDDPWRZhteuMSfVSjMaTwBXZ34262329 = WJDDPWRZhteuMSfVSjMaTwBXZ7264439;     WJDDPWRZhteuMSfVSjMaTwBXZ7264439 = WJDDPWRZhteuMSfVSjMaTwBXZ69155373;     WJDDPWRZhteuMSfVSjMaTwBXZ69155373 = WJDDPWRZhteuMSfVSjMaTwBXZ49983875;     WJDDPWRZhteuMSfVSjMaTwBXZ49983875 = WJDDPWRZhteuMSfVSjMaTwBXZ30473068;     WJDDPWRZhteuMSfVSjMaTwBXZ30473068 = WJDDPWRZhteuMSfVSjMaTwBXZ82069900;     WJDDPWRZhteuMSfVSjMaTwBXZ82069900 = WJDDPWRZhteuMSfVSjMaTwBXZ73774175;     WJDDPWRZhteuMSfVSjMaTwBXZ73774175 = WJDDPWRZhteuMSfVSjMaTwBXZ94941697;     WJDDPWRZhteuMSfVSjMaTwBXZ94941697 = WJDDPWRZhteuMSfVSjMaTwBXZ65312856;     WJDDPWRZhteuMSfVSjMaTwBXZ65312856 = WJDDPWRZhteuMSfVSjMaTwBXZ52285949;     WJDDPWRZhteuMSfVSjMaTwBXZ52285949 = WJDDPWRZhteuMSfVSjMaTwBXZ84743398;     WJDDPWRZhteuMSfVSjMaTwBXZ84743398 = WJDDPWRZhteuMSfVSjMaTwBXZ55499685;     WJDDPWRZhteuMSfVSjMaTwBXZ55499685 = WJDDPWRZhteuMSfVSjMaTwBXZ60552525;     WJDDPWRZhteuMSfVSjMaTwBXZ60552525 = WJDDPWRZhteuMSfVSjMaTwBXZ64940953;     WJDDPWRZhteuMSfVSjMaTwBXZ64940953 = WJDDPWRZhteuMSfVSjMaTwBXZ47121514;     WJDDPWRZhteuMSfVSjMaTwBXZ47121514 = WJDDPWRZhteuMSfVSjMaTwBXZ4392217;     WJDDPWRZhteuMSfVSjMaTwBXZ4392217 = WJDDPWRZhteuMSfVSjMaTwBXZ60142202;     WJDDPWRZhteuMSfVSjMaTwBXZ60142202 = WJDDPWRZhteuMSfVSjMaTwBXZ24857458;     WJDDPWRZhteuMSfVSjMaTwBXZ24857458 = WJDDPWRZhteuMSfVSjMaTwBXZ90807161;     WJDDPWRZhteuMSfVSjMaTwBXZ90807161 = WJDDPWRZhteuMSfVSjMaTwBXZ24359316;     WJDDPWRZhteuMSfVSjMaTwBXZ24359316 = WJDDPWRZhteuMSfVSjMaTwBXZ22760050;     WJDDPWRZhteuMSfVSjMaTwBXZ22760050 = WJDDPWRZhteuMSfVSjMaTwBXZ51124049;     WJDDPWRZhteuMSfVSjMaTwBXZ51124049 = WJDDPWRZhteuMSfVSjMaTwBXZ36193378;     WJDDPWRZhteuMSfVSjMaTwBXZ36193378 = WJDDPWRZhteuMSfVSjMaTwBXZ4462021;     WJDDPWRZhteuMSfVSjMaTwBXZ4462021 = WJDDPWRZhteuMSfVSjMaTwBXZ68723538;     WJDDPWRZhteuMSfVSjMaTwBXZ68723538 = WJDDPWRZhteuMSfVSjMaTwBXZ82805369;     WJDDPWRZhteuMSfVSjMaTwBXZ82805369 = WJDDPWRZhteuMSfVSjMaTwBXZ38375792;     WJDDPWRZhteuMSfVSjMaTwBXZ38375792 = WJDDPWRZhteuMSfVSjMaTwBXZ4148717;     WJDDPWRZhteuMSfVSjMaTwBXZ4148717 = WJDDPWRZhteuMSfVSjMaTwBXZ34585625;     WJDDPWRZhteuMSfVSjMaTwBXZ34585625 = WJDDPWRZhteuMSfVSjMaTwBXZ59420286;     WJDDPWRZhteuMSfVSjMaTwBXZ59420286 = WJDDPWRZhteuMSfVSjMaTwBXZ54423487;     WJDDPWRZhteuMSfVSjMaTwBXZ54423487 = WJDDPWRZhteuMSfVSjMaTwBXZ31255374;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void yvVkNctyYDeGYfMtLOKDuoPOQlFjbhxKCSauLAIvTqXWYMhIeAExYXoKf71506903() {     long HTbWKXqGUDFFRiLGPjDRspEEx6842269 = -316715163;    long HTbWKXqGUDFFRiLGPjDRspEEx32440866 = -832220951;    long HTbWKXqGUDFFRiLGPjDRspEEx54075197 = -996089756;    long HTbWKXqGUDFFRiLGPjDRspEEx59039262 = -882705472;    long HTbWKXqGUDFFRiLGPjDRspEEx56150091 = -578559392;    long HTbWKXqGUDFFRiLGPjDRspEEx80456750 = -386475407;    long HTbWKXqGUDFFRiLGPjDRspEEx71234371 = -6402117;    long HTbWKXqGUDFFRiLGPjDRspEEx816560 = -973481005;    long HTbWKXqGUDFFRiLGPjDRspEEx96232228 = -77456555;    long HTbWKXqGUDFFRiLGPjDRspEEx89722589 = -27366766;    long HTbWKXqGUDFFRiLGPjDRspEEx20554269 = -600706836;    long HTbWKXqGUDFFRiLGPjDRspEEx83556737 = 96366418;    long HTbWKXqGUDFFRiLGPjDRspEEx13302370 = -205532619;    long HTbWKXqGUDFFRiLGPjDRspEEx71612807 = -515245787;    long HTbWKXqGUDFFRiLGPjDRspEEx41693797 = -941341194;    long HTbWKXqGUDFFRiLGPjDRspEEx85123774 = -997683946;    long HTbWKXqGUDFFRiLGPjDRspEEx28103923 = -694930986;    long HTbWKXqGUDFFRiLGPjDRspEEx10620738 = -925656225;    long HTbWKXqGUDFFRiLGPjDRspEEx62489399 = -121995815;    long HTbWKXqGUDFFRiLGPjDRspEEx32028323 = -2154377;    long HTbWKXqGUDFFRiLGPjDRspEEx75804790 = -572998028;    long HTbWKXqGUDFFRiLGPjDRspEEx77801531 = -713185375;    long HTbWKXqGUDFFRiLGPjDRspEEx3899442 = -983233544;    long HTbWKXqGUDFFRiLGPjDRspEEx9739788 = -199896044;    long HTbWKXqGUDFFRiLGPjDRspEEx13728162 = -371301602;    long HTbWKXqGUDFFRiLGPjDRspEEx37816177 = -355617389;    long HTbWKXqGUDFFRiLGPjDRspEEx94128037 = -878986330;    long HTbWKXqGUDFFRiLGPjDRspEEx44658675 = -733556786;    long HTbWKXqGUDFFRiLGPjDRspEEx91027559 = -825431583;    long HTbWKXqGUDFFRiLGPjDRspEEx9542831 = -509416533;    long HTbWKXqGUDFFRiLGPjDRspEEx98795448 = -465993674;    long HTbWKXqGUDFFRiLGPjDRspEEx90080998 = 38076399;    long HTbWKXqGUDFFRiLGPjDRspEEx33187914 = -507516817;    long HTbWKXqGUDFFRiLGPjDRspEEx3740130 = -285487454;    long HTbWKXqGUDFFRiLGPjDRspEEx63958410 = -569616952;    long HTbWKXqGUDFFRiLGPjDRspEEx6540411 = 75235205;    long HTbWKXqGUDFFRiLGPjDRspEEx35439473 = -56610452;    long HTbWKXqGUDFFRiLGPjDRspEEx81206889 = -30030884;    long HTbWKXqGUDFFRiLGPjDRspEEx2366271 = -288105383;    long HTbWKXqGUDFFRiLGPjDRspEEx66474128 = -437945409;    long HTbWKXqGUDFFRiLGPjDRspEEx7002762 = -891244964;    long HTbWKXqGUDFFRiLGPjDRspEEx68523880 = -18314994;    long HTbWKXqGUDFFRiLGPjDRspEEx85060173 = -555301016;    long HTbWKXqGUDFFRiLGPjDRspEEx75027691 = -784215054;    long HTbWKXqGUDFFRiLGPjDRspEEx37628686 = 84801248;    long HTbWKXqGUDFFRiLGPjDRspEEx12485627 = -138377567;    long HTbWKXqGUDFFRiLGPjDRspEEx24814881 = -792322679;    long HTbWKXqGUDFFRiLGPjDRspEEx8009874 = 10099473;    long HTbWKXqGUDFFRiLGPjDRspEEx45816525 = -134302889;    long HTbWKXqGUDFFRiLGPjDRspEEx87997084 = -120716493;    long HTbWKXqGUDFFRiLGPjDRspEEx2671996 = -420371303;    long HTbWKXqGUDFFRiLGPjDRspEEx98581546 = -428260095;    long HTbWKXqGUDFFRiLGPjDRspEEx98426088 = -795925648;    long HTbWKXqGUDFFRiLGPjDRspEEx8893148 = 27260442;    long HTbWKXqGUDFFRiLGPjDRspEEx95702112 = -248292402;    long HTbWKXqGUDFFRiLGPjDRspEEx29040737 = -603529788;    long HTbWKXqGUDFFRiLGPjDRspEEx28541425 = -848987408;    long HTbWKXqGUDFFRiLGPjDRspEEx44335409 = -696193712;    long HTbWKXqGUDFFRiLGPjDRspEEx45311100 = -411403870;    long HTbWKXqGUDFFRiLGPjDRspEEx18333915 = -122942003;    long HTbWKXqGUDFFRiLGPjDRspEEx86328713 = -507489078;    long HTbWKXqGUDFFRiLGPjDRspEEx26575697 = -272845331;    long HTbWKXqGUDFFRiLGPjDRspEEx9789001 = -48049423;    long HTbWKXqGUDFFRiLGPjDRspEEx86689397 = -568040022;    long HTbWKXqGUDFFRiLGPjDRspEEx90927140 = -561373093;    long HTbWKXqGUDFFRiLGPjDRspEEx30473271 = -538783236;    long HTbWKXqGUDFFRiLGPjDRspEEx50368823 = -396116766;    long HTbWKXqGUDFFRiLGPjDRspEEx9562240 = -920045165;    long HTbWKXqGUDFFRiLGPjDRspEEx7654398 = -945628836;    long HTbWKXqGUDFFRiLGPjDRspEEx35153386 = -916576400;    long HTbWKXqGUDFFRiLGPjDRspEEx49684301 = -841073495;    long HTbWKXqGUDFFRiLGPjDRspEEx46897033 = -564900103;    long HTbWKXqGUDFFRiLGPjDRspEEx8254467 = -537550843;    long HTbWKXqGUDFFRiLGPjDRspEEx96015270 = -684050406;    long HTbWKXqGUDFFRiLGPjDRspEEx25025562 = -110909414;    long HTbWKXqGUDFFRiLGPjDRspEEx7280910 = -454683034;    long HTbWKXqGUDFFRiLGPjDRspEEx92741358 = -57884360;    long HTbWKXqGUDFFRiLGPjDRspEEx28871750 = -99018491;    long HTbWKXqGUDFFRiLGPjDRspEEx72111101 = -184697292;    long HTbWKXqGUDFFRiLGPjDRspEEx1242536 = -132924036;    long HTbWKXqGUDFFRiLGPjDRspEEx13001296 = -563294711;    long HTbWKXqGUDFFRiLGPjDRspEEx86118163 = -789085804;    long HTbWKXqGUDFFRiLGPjDRspEEx98842149 = -499253897;    long HTbWKXqGUDFFRiLGPjDRspEEx3030476 = -604715090;    long HTbWKXqGUDFFRiLGPjDRspEEx6870835 = 10954770;    long HTbWKXqGUDFFRiLGPjDRspEEx213902 = 62266421;    long HTbWKXqGUDFFRiLGPjDRspEEx91654909 = -165997954;    long HTbWKXqGUDFFRiLGPjDRspEEx24294767 = -434777259;    long HTbWKXqGUDFFRiLGPjDRspEEx8038017 = 62804947;    long HTbWKXqGUDFFRiLGPjDRspEEx34917674 = -966087164;    long HTbWKXqGUDFFRiLGPjDRspEEx77998986 = -75777387;    long HTbWKXqGUDFFRiLGPjDRspEEx91104064 = -360416741;    long HTbWKXqGUDFFRiLGPjDRspEEx35895790 = -618627014;    long HTbWKXqGUDFFRiLGPjDRspEEx84032356 = -65163380;    long HTbWKXqGUDFFRiLGPjDRspEEx80145414 = -930456332;    long HTbWKXqGUDFFRiLGPjDRspEEx80427064 = -518399633;    long HTbWKXqGUDFFRiLGPjDRspEEx58734880 = -970265571;    long HTbWKXqGUDFFRiLGPjDRspEEx98370776 = -987260994;    long HTbWKXqGUDFFRiLGPjDRspEEx84100551 = -122841961;    long HTbWKXqGUDFFRiLGPjDRspEEx7155416 = -316715163;     HTbWKXqGUDFFRiLGPjDRspEEx6842269 = HTbWKXqGUDFFRiLGPjDRspEEx32440866;     HTbWKXqGUDFFRiLGPjDRspEEx32440866 = HTbWKXqGUDFFRiLGPjDRspEEx54075197;     HTbWKXqGUDFFRiLGPjDRspEEx54075197 = HTbWKXqGUDFFRiLGPjDRspEEx59039262;     HTbWKXqGUDFFRiLGPjDRspEEx59039262 = HTbWKXqGUDFFRiLGPjDRspEEx56150091;     HTbWKXqGUDFFRiLGPjDRspEEx56150091 = HTbWKXqGUDFFRiLGPjDRspEEx80456750;     HTbWKXqGUDFFRiLGPjDRspEEx80456750 = HTbWKXqGUDFFRiLGPjDRspEEx71234371;     HTbWKXqGUDFFRiLGPjDRspEEx71234371 = HTbWKXqGUDFFRiLGPjDRspEEx816560;     HTbWKXqGUDFFRiLGPjDRspEEx816560 = HTbWKXqGUDFFRiLGPjDRspEEx96232228;     HTbWKXqGUDFFRiLGPjDRspEEx96232228 = HTbWKXqGUDFFRiLGPjDRspEEx89722589;     HTbWKXqGUDFFRiLGPjDRspEEx89722589 = HTbWKXqGUDFFRiLGPjDRspEEx20554269;     HTbWKXqGUDFFRiLGPjDRspEEx20554269 = HTbWKXqGUDFFRiLGPjDRspEEx83556737;     HTbWKXqGUDFFRiLGPjDRspEEx83556737 = HTbWKXqGUDFFRiLGPjDRspEEx13302370;     HTbWKXqGUDFFRiLGPjDRspEEx13302370 = HTbWKXqGUDFFRiLGPjDRspEEx71612807;     HTbWKXqGUDFFRiLGPjDRspEEx71612807 = HTbWKXqGUDFFRiLGPjDRspEEx41693797;     HTbWKXqGUDFFRiLGPjDRspEEx41693797 = HTbWKXqGUDFFRiLGPjDRspEEx85123774;     HTbWKXqGUDFFRiLGPjDRspEEx85123774 = HTbWKXqGUDFFRiLGPjDRspEEx28103923;     HTbWKXqGUDFFRiLGPjDRspEEx28103923 = HTbWKXqGUDFFRiLGPjDRspEEx10620738;     HTbWKXqGUDFFRiLGPjDRspEEx10620738 = HTbWKXqGUDFFRiLGPjDRspEEx62489399;     HTbWKXqGUDFFRiLGPjDRspEEx62489399 = HTbWKXqGUDFFRiLGPjDRspEEx32028323;     HTbWKXqGUDFFRiLGPjDRspEEx32028323 = HTbWKXqGUDFFRiLGPjDRspEEx75804790;     HTbWKXqGUDFFRiLGPjDRspEEx75804790 = HTbWKXqGUDFFRiLGPjDRspEEx77801531;     HTbWKXqGUDFFRiLGPjDRspEEx77801531 = HTbWKXqGUDFFRiLGPjDRspEEx3899442;     HTbWKXqGUDFFRiLGPjDRspEEx3899442 = HTbWKXqGUDFFRiLGPjDRspEEx9739788;     HTbWKXqGUDFFRiLGPjDRspEEx9739788 = HTbWKXqGUDFFRiLGPjDRspEEx13728162;     HTbWKXqGUDFFRiLGPjDRspEEx13728162 = HTbWKXqGUDFFRiLGPjDRspEEx37816177;     HTbWKXqGUDFFRiLGPjDRspEEx37816177 = HTbWKXqGUDFFRiLGPjDRspEEx94128037;     HTbWKXqGUDFFRiLGPjDRspEEx94128037 = HTbWKXqGUDFFRiLGPjDRspEEx44658675;     HTbWKXqGUDFFRiLGPjDRspEEx44658675 = HTbWKXqGUDFFRiLGPjDRspEEx91027559;     HTbWKXqGUDFFRiLGPjDRspEEx91027559 = HTbWKXqGUDFFRiLGPjDRspEEx9542831;     HTbWKXqGUDFFRiLGPjDRspEEx9542831 = HTbWKXqGUDFFRiLGPjDRspEEx98795448;     HTbWKXqGUDFFRiLGPjDRspEEx98795448 = HTbWKXqGUDFFRiLGPjDRspEEx90080998;     HTbWKXqGUDFFRiLGPjDRspEEx90080998 = HTbWKXqGUDFFRiLGPjDRspEEx33187914;     HTbWKXqGUDFFRiLGPjDRspEEx33187914 = HTbWKXqGUDFFRiLGPjDRspEEx3740130;     HTbWKXqGUDFFRiLGPjDRspEEx3740130 = HTbWKXqGUDFFRiLGPjDRspEEx63958410;     HTbWKXqGUDFFRiLGPjDRspEEx63958410 = HTbWKXqGUDFFRiLGPjDRspEEx6540411;     HTbWKXqGUDFFRiLGPjDRspEEx6540411 = HTbWKXqGUDFFRiLGPjDRspEEx35439473;     HTbWKXqGUDFFRiLGPjDRspEEx35439473 = HTbWKXqGUDFFRiLGPjDRspEEx81206889;     HTbWKXqGUDFFRiLGPjDRspEEx81206889 = HTbWKXqGUDFFRiLGPjDRspEEx2366271;     HTbWKXqGUDFFRiLGPjDRspEEx2366271 = HTbWKXqGUDFFRiLGPjDRspEEx66474128;     HTbWKXqGUDFFRiLGPjDRspEEx66474128 = HTbWKXqGUDFFRiLGPjDRspEEx7002762;     HTbWKXqGUDFFRiLGPjDRspEEx7002762 = HTbWKXqGUDFFRiLGPjDRspEEx68523880;     HTbWKXqGUDFFRiLGPjDRspEEx68523880 = HTbWKXqGUDFFRiLGPjDRspEEx85060173;     HTbWKXqGUDFFRiLGPjDRspEEx85060173 = HTbWKXqGUDFFRiLGPjDRspEEx75027691;     HTbWKXqGUDFFRiLGPjDRspEEx75027691 = HTbWKXqGUDFFRiLGPjDRspEEx37628686;     HTbWKXqGUDFFRiLGPjDRspEEx37628686 = HTbWKXqGUDFFRiLGPjDRspEEx12485627;     HTbWKXqGUDFFRiLGPjDRspEEx12485627 = HTbWKXqGUDFFRiLGPjDRspEEx24814881;     HTbWKXqGUDFFRiLGPjDRspEEx24814881 = HTbWKXqGUDFFRiLGPjDRspEEx8009874;     HTbWKXqGUDFFRiLGPjDRspEEx8009874 = HTbWKXqGUDFFRiLGPjDRspEEx45816525;     HTbWKXqGUDFFRiLGPjDRspEEx45816525 = HTbWKXqGUDFFRiLGPjDRspEEx87997084;     HTbWKXqGUDFFRiLGPjDRspEEx87997084 = HTbWKXqGUDFFRiLGPjDRspEEx2671996;     HTbWKXqGUDFFRiLGPjDRspEEx2671996 = HTbWKXqGUDFFRiLGPjDRspEEx98581546;     HTbWKXqGUDFFRiLGPjDRspEEx98581546 = HTbWKXqGUDFFRiLGPjDRspEEx98426088;     HTbWKXqGUDFFRiLGPjDRspEEx98426088 = HTbWKXqGUDFFRiLGPjDRspEEx8893148;     HTbWKXqGUDFFRiLGPjDRspEEx8893148 = HTbWKXqGUDFFRiLGPjDRspEEx95702112;     HTbWKXqGUDFFRiLGPjDRspEEx95702112 = HTbWKXqGUDFFRiLGPjDRspEEx29040737;     HTbWKXqGUDFFRiLGPjDRspEEx29040737 = HTbWKXqGUDFFRiLGPjDRspEEx28541425;     HTbWKXqGUDFFRiLGPjDRspEEx28541425 = HTbWKXqGUDFFRiLGPjDRspEEx44335409;     HTbWKXqGUDFFRiLGPjDRspEEx44335409 = HTbWKXqGUDFFRiLGPjDRspEEx45311100;     HTbWKXqGUDFFRiLGPjDRspEEx45311100 = HTbWKXqGUDFFRiLGPjDRspEEx18333915;     HTbWKXqGUDFFRiLGPjDRspEEx18333915 = HTbWKXqGUDFFRiLGPjDRspEEx86328713;     HTbWKXqGUDFFRiLGPjDRspEEx86328713 = HTbWKXqGUDFFRiLGPjDRspEEx26575697;     HTbWKXqGUDFFRiLGPjDRspEEx26575697 = HTbWKXqGUDFFRiLGPjDRspEEx9789001;     HTbWKXqGUDFFRiLGPjDRspEEx9789001 = HTbWKXqGUDFFRiLGPjDRspEEx86689397;     HTbWKXqGUDFFRiLGPjDRspEEx86689397 = HTbWKXqGUDFFRiLGPjDRspEEx90927140;     HTbWKXqGUDFFRiLGPjDRspEEx90927140 = HTbWKXqGUDFFRiLGPjDRspEEx30473271;     HTbWKXqGUDFFRiLGPjDRspEEx30473271 = HTbWKXqGUDFFRiLGPjDRspEEx50368823;     HTbWKXqGUDFFRiLGPjDRspEEx50368823 = HTbWKXqGUDFFRiLGPjDRspEEx9562240;     HTbWKXqGUDFFRiLGPjDRspEEx9562240 = HTbWKXqGUDFFRiLGPjDRspEEx7654398;     HTbWKXqGUDFFRiLGPjDRspEEx7654398 = HTbWKXqGUDFFRiLGPjDRspEEx35153386;     HTbWKXqGUDFFRiLGPjDRspEEx35153386 = HTbWKXqGUDFFRiLGPjDRspEEx49684301;     HTbWKXqGUDFFRiLGPjDRspEEx49684301 = HTbWKXqGUDFFRiLGPjDRspEEx46897033;     HTbWKXqGUDFFRiLGPjDRspEEx46897033 = HTbWKXqGUDFFRiLGPjDRspEEx8254467;     HTbWKXqGUDFFRiLGPjDRspEEx8254467 = HTbWKXqGUDFFRiLGPjDRspEEx96015270;     HTbWKXqGUDFFRiLGPjDRspEEx96015270 = HTbWKXqGUDFFRiLGPjDRspEEx25025562;     HTbWKXqGUDFFRiLGPjDRspEEx25025562 = HTbWKXqGUDFFRiLGPjDRspEEx7280910;     HTbWKXqGUDFFRiLGPjDRspEEx7280910 = HTbWKXqGUDFFRiLGPjDRspEEx92741358;     HTbWKXqGUDFFRiLGPjDRspEEx92741358 = HTbWKXqGUDFFRiLGPjDRspEEx28871750;     HTbWKXqGUDFFRiLGPjDRspEEx28871750 = HTbWKXqGUDFFRiLGPjDRspEEx72111101;     HTbWKXqGUDFFRiLGPjDRspEEx72111101 = HTbWKXqGUDFFRiLGPjDRspEEx1242536;     HTbWKXqGUDFFRiLGPjDRspEEx1242536 = HTbWKXqGUDFFRiLGPjDRspEEx13001296;     HTbWKXqGUDFFRiLGPjDRspEEx13001296 = HTbWKXqGUDFFRiLGPjDRspEEx86118163;     HTbWKXqGUDFFRiLGPjDRspEEx86118163 = HTbWKXqGUDFFRiLGPjDRspEEx98842149;     HTbWKXqGUDFFRiLGPjDRspEEx98842149 = HTbWKXqGUDFFRiLGPjDRspEEx3030476;     HTbWKXqGUDFFRiLGPjDRspEEx3030476 = HTbWKXqGUDFFRiLGPjDRspEEx6870835;     HTbWKXqGUDFFRiLGPjDRspEEx6870835 = HTbWKXqGUDFFRiLGPjDRspEEx213902;     HTbWKXqGUDFFRiLGPjDRspEEx213902 = HTbWKXqGUDFFRiLGPjDRspEEx91654909;     HTbWKXqGUDFFRiLGPjDRspEEx91654909 = HTbWKXqGUDFFRiLGPjDRspEEx24294767;     HTbWKXqGUDFFRiLGPjDRspEEx24294767 = HTbWKXqGUDFFRiLGPjDRspEEx8038017;     HTbWKXqGUDFFRiLGPjDRspEEx8038017 = HTbWKXqGUDFFRiLGPjDRspEEx34917674;     HTbWKXqGUDFFRiLGPjDRspEEx34917674 = HTbWKXqGUDFFRiLGPjDRspEEx77998986;     HTbWKXqGUDFFRiLGPjDRspEEx77998986 = HTbWKXqGUDFFRiLGPjDRspEEx91104064;     HTbWKXqGUDFFRiLGPjDRspEEx91104064 = HTbWKXqGUDFFRiLGPjDRspEEx35895790;     HTbWKXqGUDFFRiLGPjDRspEEx35895790 = HTbWKXqGUDFFRiLGPjDRspEEx84032356;     HTbWKXqGUDFFRiLGPjDRspEEx84032356 = HTbWKXqGUDFFRiLGPjDRspEEx80145414;     HTbWKXqGUDFFRiLGPjDRspEEx80145414 = HTbWKXqGUDFFRiLGPjDRspEEx80427064;     HTbWKXqGUDFFRiLGPjDRspEEx80427064 = HTbWKXqGUDFFRiLGPjDRspEEx58734880;     HTbWKXqGUDFFRiLGPjDRspEEx58734880 = HTbWKXqGUDFFRiLGPjDRspEEx98370776;     HTbWKXqGUDFFRiLGPjDRspEEx98370776 = HTbWKXqGUDFFRiLGPjDRspEEx84100551;     HTbWKXqGUDFFRiLGPjDRspEEx84100551 = HTbWKXqGUDFFRiLGPjDRspEEx7155416;     HTbWKXqGUDFFRiLGPjDRspEEx7155416 = HTbWKXqGUDFFRiLGPjDRspEEx6842269;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ARePDhvosCZxMFgoObJVwUEsWOJSVCyhmXqqBnDYBcITygfbFNgPLJkfN38798502() {     long lspYdSpErLoOqnbYlTUMlupih42301237 = -782992062;    long lspYdSpErLoOqnbYlTUMlupih45712945 = -712772558;    long lspYdSpErLoOqnbYlTUMlupih91461673 = -661756831;    long lspYdSpErLoOqnbYlTUMlupih31262617 = -703856543;    long lspYdSpErLoOqnbYlTUMlupih12435361 = -684158237;    long lspYdSpErLoOqnbYlTUMlupih16679623 = -648823302;    long lspYdSpErLoOqnbYlTUMlupih81891777 = -951127851;    long lspYdSpErLoOqnbYlTUMlupih62948120 = -617715146;    long lspYdSpErLoOqnbYlTUMlupih97749833 = -565787962;    long lspYdSpErLoOqnbYlTUMlupih4625302 = -792053764;    long lspYdSpErLoOqnbYlTUMlupih58736003 = -402714565;    long lspYdSpErLoOqnbYlTUMlupih84124885 = -867754354;    long lspYdSpErLoOqnbYlTUMlupih51537015 = -757545124;    long lspYdSpErLoOqnbYlTUMlupih24753671 = -491609196;    long lspYdSpErLoOqnbYlTUMlupih99888313 = -344766209;    long lspYdSpErLoOqnbYlTUMlupih68665075 = -633495553;    long lspYdSpErLoOqnbYlTUMlupih83939858 = -121905539;    long lspYdSpErLoOqnbYlTUMlupih10380929 = -999084294;    long lspYdSpErLoOqnbYlTUMlupih63039729 = -438559236;    long lspYdSpErLoOqnbYlTUMlupih25865542 = -428715443;    long lspYdSpErLoOqnbYlTUMlupih88891653 = -230272716;    long lspYdSpErLoOqnbYlTUMlupih81223056 = -799821669;    long lspYdSpErLoOqnbYlTUMlupih74424821 = -620865728;    long lspYdSpErLoOqnbYlTUMlupih3532733 = -710720648;    long lspYdSpErLoOqnbYlTUMlupih21746113 = -395286801;    long lspYdSpErLoOqnbYlTUMlupih48514348 = -44194196;    long lspYdSpErLoOqnbYlTUMlupih54548611 = -685270471;    long lspYdSpErLoOqnbYlTUMlupih85387099 = -903328960;    long lspYdSpErLoOqnbYlTUMlupih37695774 = -299526385;    long lspYdSpErLoOqnbYlTUMlupih15076242 = -543923703;    long lspYdSpErLoOqnbYlTUMlupih17378681 = 82025839;    long lspYdSpErLoOqnbYlTUMlupih27904017 = -834895015;    long lspYdSpErLoOqnbYlTUMlupih45405925 = -655112794;    long lspYdSpErLoOqnbYlTUMlupih33488556 = -350181268;    long lspYdSpErLoOqnbYlTUMlupih29766864 = -520717202;    long lspYdSpErLoOqnbYlTUMlupih58101255 = -139330100;    long lspYdSpErLoOqnbYlTUMlupih84851289 = 78693508;    long lspYdSpErLoOqnbYlTUMlupih32422293 = -12686465;    long lspYdSpErLoOqnbYlTUMlupih32756833 = 61018341;    long lspYdSpErLoOqnbYlTUMlupih30745661 = 96792045;    long lspYdSpErLoOqnbYlTUMlupih40454369 = -660443878;    long lspYdSpErLoOqnbYlTUMlupih57889007 = -712860285;    long lspYdSpErLoOqnbYlTUMlupih74443552 = -108481802;    long lspYdSpErLoOqnbYlTUMlupih15159030 = -288547464;    long lspYdSpErLoOqnbYlTUMlupih37645145 = -841709914;    long lspYdSpErLoOqnbYlTUMlupih58446955 = -177301199;    long lspYdSpErLoOqnbYlTUMlupih44160045 = -176309039;    long lspYdSpErLoOqnbYlTUMlupih25736186 = -156427120;    long lspYdSpErLoOqnbYlTUMlupih68709191 = -898039769;    long lspYdSpErLoOqnbYlTUMlupih12526674 = -611743309;    long lspYdSpErLoOqnbYlTUMlupih83442719 = -294647861;    long lspYdSpErLoOqnbYlTUMlupih82067019 = -641912441;    long lspYdSpErLoOqnbYlTUMlupih67047237 = -551971202;    long lspYdSpErLoOqnbYlTUMlupih24884995 = -164248058;    long lspYdSpErLoOqnbYlTUMlupih49906849 = -594782547;    long lspYdSpErLoOqnbYlTUMlupih61078180 = -983170394;    long lspYdSpErLoOqnbYlTUMlupih71288123 = 8093170;    long lspYdSpErLoOqnbYlTUMlupih87928940 = -951036183;    long lspYdSpErLoOqnbYlTUMlupih9516504 = -208569743;    long lspYdSpErLoOqnbYlTUMlupih63921012 = -539964042;    long lspYdSpErLoOqnbYlTUMlupih62131011 = -963552832;    long lspYdSpErLoOqnbYlTUMlupih96504677 = 52201109;    long lspYdSpErLoOqnbYlTUMlupih25252347 = -218188761;    long lspYdSpErLoOqnbYlTUMlupih82673591 = 78135741;    long lspYdSpErLoOqnbYlTUMlupih87246620 = -774079603;    long lspYdSpErLoOqnbYlTUMlupih30831987 = -567819550;    long lspYdSpErLoOqnbYlTUMlupih38718961 = -112641560;    long lspYdSpErLoOqnbYlTUMlupih18048459 = -307363856;    long lspYdSpErLoOqnbYlTUMlupih94986806 = -970891994;    long lspYdSpErLoOqnbYlTUMlupih41787059 = -105436109;    long lspYdSpErLoOqnbYlTUMlupih83813785 = -612189062;    long lspYdSpErLoOqnbYlTUMlupih51517565 = -9219074;    long lspYdSpErLoOqnbYlTUMlupih77624096 = -960102635;    long lspYdSpErLoOqnbYlTUMlupih32294069 = -435351282;    long lspYdSpErLoOqnbYlTUMlupih85411172 = -768271565;    long lspYdSpErLoOqnbYlTUMlupih31002646 = -517412432;    long lspYdSpErLoOqnbYlTUMlupih6779505 = -591339868;    long lspYdSpErLoOqnbYlTUMlupih59265791 = -232318265;    long lspYdSpErLoOqnbYlTUMlupih65887588 = -869010735;    long lspYdSpErLoOqnbYlTUMlupih63299158 = -117985602;    long lspYdSpErLoOqnbYlTUMlupih4354304 = -867885157;    long lspYdSpErLoOqnbYlTUMlupih28812425 = -428843351;    long lspYdSpErLoOqnbYlTUMlupih16677909 = 94710808;    long lspYdSpErLoOqnbYlTUMlupih25169101 = -687783077;    long lspYdSpErLoOqnbYlTUMlupih31633522 = -149275843;    long lspYdSpErLoOqnbYlTUMlupih35311661 = -276061720;    long lspYdSpErLoOqnbYlTUMlupih60856779 = -182923814;    long lspYdSpErLoOqnbYlTUMlupih20520931 = -390864737;    long lspYdSpErLoOqnbYlTUMlupih83581706 = -755398721;    long lspYdSpErLoOqnbYlTUMlupih68688684 = -537546809;    long lspYdSpErLoOqnbYlTUMlupih86813131 = -47423271;    long lspYdSpErLoOqnbYlTUMlupih96922348 = 29729690;    long lspYdSpErLoOqnbYlTUMlupih22905790 = -804116722;    long lspYdSpErLoOqnbYlTUMlupih68835820 = -399017618;    long lspYdSpErLoOqnbYlTUMlupih68614649 = 60344877;    long lspYdSpErLoOqnbYlTUMlupih43949691 = -612644988;    long lspYdSpErLoOqnbYlTUMlupih32636661 = -394671524;    long lspYdSpErLoOqnbYlTUMlupih91769960 = -86617544;    long lspYdSpErLoOqnbYlTUMlupih27912409 = -514467861;    long lspYdSpErLoOqnbYlTUMlupih6813158 = -782992062;     lspYdSpErLoOqnbYlTUMlupih42301237 = lspYdSpErLoOqnbYlTUMlupih45712945;     lspYdSpErLoOqnbYlTUMlupih45712945 = lspYdSpErLoOqnbYlTUMlupih91461673;     lspYdSpErLoOqnbYlTUMlupih91461673 = lspYdSpErLoOqnbYlTUMlupih31262617;     lspYdSpErLoOqnbYlTUMlupih31262617 = lspYdSpErLoOqnbYlTUMlupih12435361;     lspYdSpErLoOqnbYlTUMlupih12435361 = lspYdSpErLoOqnbYlTUMlupih16679623;     lspYdSpErLoOqnbYlTUMlupih16679623 = lspYdSpErLoOqnbYlTUMlupih81891777;     lspYdSpErLoOqnbYlTUMlupih81891777 = lspYdSpErLoOqnbYlTUMlupih62948120;     lspYdSpErLoOqnbYlTUMlupih62948120 = lspYdSpErLoOqnbYlTUMlupih97749833;     lspYdSpErLoOqnbYlTUMlupih97749833 = lspYdSpErLoOqnbYlTUMlupih4625302;     lspYdSpErLoOqnbYlTUMlupih4625302 = lspYdSpErLoOqnbYlTUMlupih58736003;     lspYdSpErLoOqnbYlTUMlupih58736003 = lspYdSpErLoOqnbYlTUMlupih84124885;     lspYdSpErLoOqnbYlTUMlupih84124885 = lspYdSpErLoOqnbYlTUMlupih51537015;     lspYdSpErLoOqnbYlTUMlupih51537015 = lspYdSpErLoOqnbYlTUMlupih24753671;     lspYdSpErLoOqnbYlTUMlupih24753671 = lspYdSpErLoOqnbYlTUMlupih99888313;     lspYdSpErLoOqnbYlTUMlupih99888313 = lspYdSpErLoOqnbYlTUMlupih68665075;     lspYdSpErLoOqnbYlTUMlupih68665075 = lspYdSpErLoOqnbYlTUMlupih83939858;     lspYdSpErLoOqnbYlTUMlupih83939858 = lspYdSpErLoOqnbYlTUMlupih10380929;     lspYdSpErLoOqnbYlTUMlupih10380929 = lspYdSpErLoOqnbYlTUMlupih63039729;     lspYdSpErLoOqnbYlTUMlupih63039729 = lspYdSpErLoOqnbYlTUMlupih25865542;     lspYdSpErLoOqnbYlTUMlupih25865542 = lspYdSpErLoOqnbYlTUMlupih88891653;     lspYdSpErLoOqnbYlTUMlupih88891653 = lspYdSpErLoOqnbYlTUMlupih81223056;     lspYdSpErLoOqnbYlTUMlupih81223056 = lspYdSpErLoOqnbYlTUMlupih74424821;     lspYdSpErLoOqnbYlTUMlupih74424821 = lspYdSpErLoOqnbYlTUMlupih3532733;     lspYdSpErLoOqnbYlTUMlupih3532733 = lspYdSpErLoOqnbYlTUMlupih21746113;     lspYdSpErLoOqnbYlTUMlupih21746113 = lspYdSpErLoOqnbYlTUMlupih48514348;     lspYdSpErLoOqnbYlTUMlupih48514348 = lspYdSpErLoOqnbYlTUMlupih54548611;     lspYdSpErLoOqnbYlTUMlupih54548611 = lspYdSpErLoOqnbYlTUMlupih85387099;     lspYdSpErLoOqnbYlTUMlupih85387099 = lspYdSpErLoOqnbYlTUMlupih37695774;     lspYdSpErLoOqnbYlTUMlupih37695774 = lspYdSpErLoOqnbYlTUMlupih15076242;     lspYdSpErLoOqnbYlTUMlupih15076242 = lspYdSpErLoOqnbYlTUMlupih17378681;     lspYdSpErLoOqnbYlTUMlupih17378681 = lspYdSpErLoOqnbYlTUMlupih27904017;     lspYdSpErLoOqnbYlTUMlupih27904017 = lspYdSpErLoOqnbYlTUMlupih45405925;     lspYdSpErLoOqnbYlTUMlupih45405925 = lspYdSpErLoOqnbYlTUMlupih33488556;     lspYdSpErLoOqnbYlTUMlupih33488556 = lspYdSpErLoOqnbYlTUMlupih29766864;     lspYdSpErLoOqnbYlTUMlupih29766864 = lspYdSpErLoOqnbYlTUMlupih58101255;     lspYdSpErLoOqnbYlTUMlupih58101255 = lspYdSpErLoOqnbYlTUMlupih84851289;     lspYdSpErLoOqnbYlTUMlupih84851289 = lspYdSpErLoOqnbYlTUMlupih32422293;     lspYdSpErLoOqnbYlTUMlupih32422293 = lspYdSpErLoOqnbYlTUMlupih32756833;     lspYdSpErLoOqnbYlTUMlupih32756833 = lspYdSpErLoOqnbYlTUMlupih30745661;     lspYdSpErLoOqnbYlTUMlupih30745661 = lspYdSpErLoOqnbYlTUMlupih40454369;     lspYdSpErLoOqnbYlTUMlupih40454369 = lspYdSpErLoOqnbYlTUMlupih57889007;     lspYdSpErLoOqnbYlTUMlupih57889007 = lspYdSpErLoOqnbYlTUMlupih74443552;     lspYdSpErLoOqnbYlTUMlupih74443552 = lspYdSpErLoOqnbYlTUMlupih15159030;     lspYdSpErLoOqnbYlTUMlupih15159030 = lspYdSpErLoOqnbYlTUMlupih37645145;     lspYdSpErLoOqnbYlTUMlupih37645145 = lspYdSpErLoOqnbYlTUMlupih58446955;     lspYdSpErLoOqnbYlTUMlupih58446955 = lspYdSpErLoOqnbYlTUMlupih44160045;     lspYdSpErLoOqnbYlTUMlupih44160045 = lspYdSpErLoOqnbYlTUMlupih25736186;     lspYdSpErLoOqnbYlTUMlupih25736186 = lspYdSpErLoOqnbYlTUMlupih68709191;     lspYdSpErLoOqnbYlTUMlupih68709191 = lspYdSpErLoOqnbYlTUMlupih12526674;     lspYdSpErLoOqnbYlTUMlupih12526674 = lspYdSpErLoOqnbYlTUMlupih83442719;     lspYdSpErLoOqnbYlTUMlupih83442719 = lspYdSpErLoOqnbYlTUMlupih82067019;     lspYdSpErLoOqnbYlTUMlupih82067019 = lspYdSpErLoOqnbYlTUMlupih67047237;     lspYdSpErLoOqnbYlTUMlupih67047237 = lspYdSpErLoOqnbYlTUMlupih24884995;     lspYdSpErLoOqnbYlTUMlupih24884995 = lspYdSpErLoOqnbYlTUMlupih49906849;     lspYdSpErLoOqnbYlTUMlupih49906849 = lspYdSpErLoOqnbYlTUMlupih61078180;     lspYdSpErLoOqnbYlTUMlupih61078180 = lspYdSpErLoOqnbYlTUMlupih71288123;     lspYdSpErLoOqnbYlTUMlupih71288123 = lspYdSpErLoOqnbYlTUMlupih87928940;     lspYdSpErLoOqnbYlTUMlupih87928940 = lspYdSpErLoOqnbYlTUMlupih9516504;     lspYdSpErLoOqnbYlTUMlupih9516504 = lspYdSpErLoOqnbYlTUMlupih63921012;     lspYdSpErLoOqnbYlTUMlupih63921012 = lspYdSpErLoOqnbYlTUMlupih62131011;     lspYdSpErLoOqnbYlTUMlupih62131011 = lspYdSpErLoOqnbYlTUMlupih96504677;     lspYdSpErLoOqnbYlTUMlupih96504677 = lspYdSpErLoOqnbYlTUMlupih25252347;     lspYdSpErLoOqnbYlTUMlupih25252347 = lspYdSpErLoOqnbYlTUMlupih82673591;     lspYdSpErLoOqnbYlTUMlupih82673591 = lspYdSpErLoOqnbYlTUMlupih87246620;     lspYdSpErLoOqnbYlTUMlupih87246620 = lspYdSpErLoOqnbYlTUMlupih30831987;     lspYdSpErLoOqnbYlTUMlupih30831987 = lspYdSpErLoOqnbYlTUMlupih38718961;     lspYdSpErLoOqnbYlTUMlupih38718961 = lspYdSpErLoOqnbYlTUMlupih18048459;     lspYdSpErLoOqnbYlTUMlupih18048459 = lspYdSpErLoOqnbYlTUMlupih94986806;     lspYdSpErLoOqnbYlTUMlupih94986806 = lspYdSpErLoOqnbYlTUMlupih41787059;     lspYdSpErLoOqnbYlTUMlupih41787059 = lspYdSpErLoOqnbYlTUMlupih83813785;     lspYdSpErLoOqnbYlTUMlupih83813785 = lspYdSpErLoOqnbYlTUMlupih51517565;     lspYdSpErLoOqnbYlTUMlupih51517565 = lspYdSpErLoOqnbYlTUMlupih77624096;     lspYdSpErLoOqnbYlTUMlupih77624096 = lspYdSpErLoOqnbYlTUMlupih32294069;     lspYdSpErLoOqnbYlTUMlupih32294069 = lspYdSpErLoOqnbYlTUMlupih85411172;     lspYdSpErLoOqnbYlTUMlupih85411172 = lspYdSpErLoOqnbYlTUMlupih31002646;     lspYdSpErLoOqnbYlTUMlupih31002646 = lspYdSpErLoOqnbYlTUMlupih6779505;     lspYdSpErLoOqnbYlTUMlupih6779505 = lspYdSpErLoOqnbYlTUMlupih59265791;     lspYdSpErLoOqnbYlTUMlupih59265791 = lspYdSpErLoOqnbYlTUMlupih65887588;     lspYdSpErLoOqnbYlTUMlupih65887588 = lspYdSpErLoOqnbYlTUMlupih63299158;     lspYdSpErLoOqnbYlTUMlupih63299158 = lspYdSpErLoOqnbYlTUMlupih4354304;     lspYdSpErLoOqnbYlTUMlupih4354304 = lspYdSpErLoOqnbYlTUMlupih28812425;     lspYdSpErLoOqnbYlTUMlupih28812425 = lspYdSpErLoOqnbYlTUMlupih16677909;     lspYdSpErLoOqnbYlTUMlupih16677909 = lspYdSpErLoOqnbYlTUMlupih25169101;     lspYdSpErLoOqnbYlTUMlupih25169101 = lspYdSpErLoOqnbYlTUMlupih31633522;     lspYdSpErLoOqnbYlTUMlupih31633522 = lspYdSpErLoOqnbYlTUMlupih35311661;     lspYdSpErLoOqnbYlTUMlupih35311661 = lspYdSpErLoOqnbYlTUMlupih60856779;     lspYdSpErLoOqnbYlTUMlupih60856779 = lspYdSpErLoOqnbYlTUMlupih20520931;     lspYdSpErLoOqnbYlTUMlupih20520931 = lspYdSpErLoOqnbYlTUMlupih83581706;     lspYdSpErLoOqnbYlTUMlupih83581706 = lspYdSpErLoOqnbYlTUMlupih68688684;     lspYdSpErLoOqnbYlTUMlupih68688684 = lspYdSpErLoOqnbYlTUMlupih86813131;     lspYdSpErLoOqnbYlTUMlupih86813131 = lspYdSpErLoOqnbYlTUMlupih96922348;     lspYdSpErLoOqnbYlTUMlupih96922348 = lspYdSpErLoOqnbYlTUMlupih22905790;     lspYdSpErLoOqnbYlTUMlupih22905790 = lspYdSpErLoOqnbYlTUMlupih68835820;     lspYdSpErLoOqnbYlTUMlupih68835820 = lspYdSpErLoOqnbYlTUMlupih68614649;     lspYdSpErLoOqnbYlTUMlupih68614649 = lspYdSpErLoOqnbYlTUMlupih43949691;     lspYdSpErLoOqnbYlTUMlupih43949691 = lspYdSpErLoOqnbYlTUMlupih32636661;     lspYdSpErLoOqnbYlTUMlupih32636661 = lspYdSpErLoOqnbYlTUMlupih91769960;     lspYdSpErLoOqnbYlTUMlupih91769960 = lspYdSpErLoOqnbYlTUMlupih27912409;     lspYdSpErLoOqnbYlTUMlupih27912409 = lspYdSpErLoOqnbYlTUMlupih6813158;     lspYdSpErLoOqnbYlTUMlupih6813158 = lspYdSpErLoOqnbYlTUMlupih42301237;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void uPkcniKyFvROgNTGTVLbonCPvSaJhhObNfdbBJqdfigNefNFfGZeaudGM53847570() {     long UhUIBRXhqABjsEKehvGGplPEV48418343 = -894893951;    long UhUIBRXhqABjsEKehvGGplPEV89086223 = -422372338;    long UhUIBRXhqABjsEKehvGGplPEV7503858 = -812589752;    long UhUIBRXhqABjsEKehvGGplPEV58337397 = -894605174;    long UhUIBRXhqABjsEKehvGGplPEV81330849 = -104808109;    long UhUIBRXhqABjsEKehvGGplPEV8096825 = -913319537;    long UhUIBRXhqABjsEKehvGGplPEV42380744 = 9907172;    long UhUIBRXhqABjsEKehvGGplPEV12708011 = -904589059;    long UhUIBRXhqABjsEKehvGGplPEV62392329 = -333820627;    long UhUIBRXhqABjsEKehvGGplPEV45854961 = -21029241;    long UhUIBRXhqABjsEKehvGGplPEV18846294 = -280152152;    long UhUIBRXhqABjsEKehvGGplPEV15947929 = -212160556;    long UhUIBRXhqABjsEKehvGGplPEV37746133 = -97436213;    long UhUIBRXhqABjsEKehvGGplPEV7897348 = 76152236;    long UhUIBRXhqABjsEKehvGGplPEV95630740 = 64771625;    long UhUIBRXhqABjsEKehvGGplPEV10170469 = -606495097;    long UhUIBRXhqABjsEKehvGGplPEV77775861 = -738450651;    long UhUIBRXhqABjsEKehvGGplPEV7434082 = -664606936;    long UhUIBRXhqABjsEKehvGGplPEV24869571 = -844328333;    long UhUIBRXhqABjsEKehvGGplPEV6415707 = -785618363;    long UhUIBRXhqABjsEKehvGGplPEV77444846 = -85760172;    long UhUIBRXhqABjsEKehvGGplPEV67744080 = -707751385;    long UhUIBRXhqABjsEKehvGGplPEV10015614 = -367383215;    long UhUIBRXhqABjsEKehvGGplPEV87525106 = -933025636;    long UhUIBRXhqABjsEKehvGGplPEV65445763 = -768482834;    long UhUIBRXhqABjsEKehvGGplPEV73236023 = 77150481;    long UhUIBRXhqABjsEKehvGGplPEV53008389 = -585932674;    long UhUIBRXhqABjsEKehvGGplPEV98494225 = -969257914;    long UhUIBRXhqABjsEKehvGGplPEV3828030 = -521909090;    long UhUIBRXhqABjsEKehvGGplPEV83691878 = -361394571;    long UhUIBRXhqABjsEKehvGGplPEV9621230 = -931295099;    long UhUIBRXhqABjsEKehvGGplPEV25514638 = -544341831;    long UhUIBRXhqABjsEKehvGGplPEV55116873 = -547726164;    long UhUIBRXhqABjsEKehvGGplPEV28319120 = -101723033;    long UhUIBRXhqABjsEKehvGGplPEV91241516 = -59450308;    long UhUIBRXhqABjsEKehvGGplPEV26827168 = -353356208;    long UhUIBRXhqABjsEKehvGGplPEV66113224 = -974942362;    long UhUIBRXhqABjsEKehvGGplPEV66512506 = -884192474;    long UhUIBRXhqABjsEKehvGGplPEV6367087 = 67094844;    long UhUIBRXhqABjsEKehvGGplPEV18247598 = -376647177;    long UhUIBRXhqABjsEKehvGGplPEV46123593 = -725717772;    long UhUIBRXhqABjsEKehvGGplPEV90039464 = -983002563;    long UhUIBRXhqABjsEKehvGGplPEV52510530 = -189286386;    long UhUIBRXhqABjsEKehvGGplPEV2566771 = -307890402;    long UhUIBRXhqABjsEKehvGGplPEV49597610 = -503608068;    long UhUIBRXhqABjsEKehvGGplPEV70386150 = -162517316;    long UhUIBRXhqABjsEKehvGGplPEV61938619 = -295084577;    long UhUIBRXhqABjsEKehvGGplPEV33693127 = -166322653;    long UhUIBRXhqABjsEKehvGGplPEV78384920 = -983776757;    long UhUIBRXhqABjsEKehvGGplPEV25438326 = -698754117;    long UhUIBRXhqABjsEKehvGGplPEV19143398 = -136941532;    long UhUIBRXhqABjsEKehvGGplPEV92876738 = -442638762;    long UhUIBRXhqABjsEKehvGGplPEV15295695 = -343760790;    long UhUIBRXhqABjsEKehvGGplPEV20853875 = -484718203;    long UhUIBRXhqABjsEKehvGGplPEV76402724 = -195314330;    long UhUIBRXhqABjsEKehvGGplPEV80674263 = -87142566;    long UhUIBRXhqABjsEKehvGGplPEV79070610 = 45010876;    long UhUIBRXhqABjsEKehvGGplPEV19978751 = -879564116;    long UhUIBRXhqABjsEKehvGGplPEV92891634 = -26122341;    long UhUIBRXhqABjsEKehvGGplPEV8094826 = -81958590;    long UhUIBRXhqABjsEKehvGGplPEV55088436 = -227386864;    long UhUIBRXhqABjsEKehvGGplPEV43886518 = -20834915;    long UhUIBRXhqABjsEKehvGGplPEV8879982 = -282679970;    long UhUIBRXhqABjsEKehvGGplPEV78700450 = -972426057;    long UhUIBRXhqABjsEKehvGGplPEV36233731 = -89734143;    long UhUIBRXhqABjsEKehvGGplPEV93331655 = -735810321;    long UhUIBRXhqABjsEKehvGGplPEV60831055 = -664434392;    long UhUIBRXhqABjsEKehvGGplPEV9427013 = -995713180;    long UhUIBRXhqABjsEKehvGGplPEV16655832 = -864397457;    long UhUIBRXhqABjsEKehvGGplPEV68803572 = -581872168;    long UhUIBRXhqABjsEKehvGGplPEV44057245 = -631552735;    long UhUIBRXhqABjsEKehvGGplPEV11263356 = -854258177;    long UhUIBRXhqABjsEKehvGGplPEV1066996 = -631701781;    long UhUIBRXhqABjsEKehvGGplPEV6621973 = -367681156;    long UhUIBRXhqABjsEKehvGGplPEV60292113 = 40099409;    long UhUIBRXhqABjsEKehvGGplPEV87405382 = -102757609;    long UhUIBRXhqABjsEKehvGGplPEV15233550 = -418465000;    long UhUIBRXhqABjsEKehvGGplPEV7448843 = 40507186;    long UhUIBRXhqABjsEKehvGGplPEV37927497 = -329417569;    long UhUIBRXhqABjsEKehvGGplPEV95059612 = -505965519;    long UhUIBRXhqABjsEKehvGGplPEV11297405 = -627764943;    long UhUIBRXhqABjsEKehvGGplPEV19315263 = -319610021;    long UhUIBRXhqABjsEKehvGGplPEV20109305 = -985481157;    long UhUIBRXhqABjsEKehvGGplPEV78389703 = -823154974;    long UhUIBRXhqABjsEKehvGGplPEV64548480 = -124453040;    long UhUIBRXhqABjsEKehvGGplPEV16744491 = -388656338;    long UhUIBRXhqABjsEKehvGGplPEV10218944 = -100581042;    long UhUIBRXhqABjsEKehvGGplPEV34262999 = 36992038;    long UhUIBRXhqABjsEKehvGGplPEV51916396 = -906408704;    long UhUIBRXhqABjsEKehvGGplPEV10567253 = -972307742;    long UhUIBRXhqABjsEKehvGGplPEV47756557 = -298367084;    long UhUIBRXhqABjsEKehvGGplPEV46134474 = 4621754;    long UhUIBRXhqABjsEKehvGGplPEV73620871 = -758070134;    long UhUIBRXhqABjsEKehvGGplPEV98272260 = -850946567;    long UhUIBRXhqABjsEKehvGGplPEV63159162 = -49260314;    long UhUIBRXhqABjsEKehvGGplPEV2237075 = -604882858;    long UhUIBRXhqABjsEKehvGGplPEV81159482 = -600322594;    long UhUIBRXhqABjsEKehvGGplPEV73810080 = -216860329;    long UhUIBRXhqABjsEKehvGGplPEV66333039 = -118156259;    long UhUIBRXhqABjsEKehvGGplPEV56265954 = -894893951;     UhUIBRXhqABjsEKehvGGplPEV48418343 = UhUIBRXhqABjsEKehvGGplPEV89086223;     UhUIBRXhqABjsEKehvGGplPEV89086223 = UhUIBRXhqABjsEKehvGGplPEV7503858;     UhUIBRXhqABjsEKehvGGplPEV7503858 = UhUIBRXhqABjsEKehvGGplPEV58337397;     UhUIBRXhqABjsEKehvGGplPEV58337397 = UhUIBRXhqABjsEKehvGGplPEV81330849;     UhUIBRXhqABjsEKehvGGplPEV81330849 = UhUIBRXhqABjsEKehvGGplPEV8096825;     UhUIBRXhqABjsEKehvGGplPEV8096825 = UhUIBRXhqABjsEKehvGGplPEV42380744;     UhUIBRXhqABjsEKehvGGplPEV42380744 = UhUIBRXhqABjsEKehvGGplPEV12708011;     UhUIBRXhqABjsEKehvGGplPEV12708011 = UhUIBRXhqABjsEKehvGGplPEV62392329;     UhUIBRXhqABjsEKehvGGplPEV62392329 = UhUIBRXhqABjsEKehvGGplPEV45854961;     UhUIBRXhqABjsEKehvGGplPEV45854961 = UhUIBRXhqABjsEKehvGGplPEV18846294;     UhUIBRXhqABjsEKehvGGplPEV18846294 = UhUIBRXhqABjsEKehvGGplPEV15947929;     UhUIBRXhqABjsEKehvGGplPEV15947929 = UhUIBRXhqABjsEKehvGGplPEV37746133;     UhUIBRXhqABjsEKehvGGplPEV37746133 = UhUIBRXhqABjsEKehvGGplPEV7897348;     UhUIBRXhqABjsEKehvGGplPEV7897348 = UhUIBRXhqABjsEKehvGGplPEV95630740;     UhUIBRXhqABjsEKehvGGplPEV95630740 = UhUIBRXhqABjsEKehvGGplPEV10170469;     UhUIBRXhqABjsEKehvGGplPEV10170469 = UhUIBRXhqABjsEKehvGGplPEV77775861;     UhUIBRXhqABjsEKehvGGplPEV77775861 = UhUIBRXhqABjsEKehvGGplPEV7434082;     UhUIBRXhqABjsEKehvGGplPEV7434082 = UhUIBRXhqABjsEKehvGGplPEV24869571;     UhUIBRXhqABjsEKehvGGplPEV24869571 = UhUIBRXhqABjsEKehvGGplPEV6415707;     UhUIBRXhqABjsEKehvGGplPEV6415707 = UhUIBRXhqABjsEKehvGGplPEV77444846;     UhUIBRXhqABjsEKehvGGplPEV77444846 = UhUIBRXhqABjsEKehvGGplPEV67744080;     UhUIBRXhqABjsEKehvGGplPEV67744080 = UhUIBRXhqABjsEKehvGGplPEV10015614;     UhUIBRXhqABjsEKehvGGplPEV10015614 = UhUIBRXhqABjsEKehvGGplPEV87525106;     UhUIBRXhqABjsEKehvGGplPEV87525106 = UhUIBRXhqABjsEKehvGGplPEV65445763;     UhUIBRXhqABjsEKehvGGplPEV65445763 = UhUIBRXhqABjsEKehvGGplPEV73236023;     UhUIBRXhqABjsEKehvGGplPEV73236023 = UhUIBRXhqABjsEKehvGGplPEV53008389;     UhUIBRXhqABjsEKehvGGplPEV53008389 = UhUIBRXhqABjsEKehvGGplPEV98494225;     UhUIBRXhqABjsEKehvGGplPEV98494225 = UhUIBRXhqABjsEKehvGGplPEV3828030;     UhUIBRXhqABjsEKehvGGplPEV3828030 = UhUIBRXhqABjsEKehvGGplPEV83691878;     UhUIBRXhqABjsEKehvGGplPEV83691878 = UhUIBRXhqABjsEKehvGGplPEV9621230;     UhUIBRXhqABjsEKehvGGplPEV9621230 = UhUIBRXhqABjsEKehvGGplPEV25514638;     UhUIBRXhqABjsEKehvGGplPEV25514638 = UhUIBRXhqABjsEKehvGGplPEV55116873;     UhUIBRXhqABjsEKehvGGplPEV55116873 = UhUIBRXhqABjsEKehvGGplPEV28319120;     UhUIBRXhqABjsEKehvGGplPEV28319120 = UhUIBRXhqABjsEKehvGGplPEV91241516;     UhUIBRXhqABjsEKehvGGplPEV91241516 = UhUIBRXhqABjsEKehvGGplPEV26827168;     UhUIBRXhqABjsEKehvGGplPEV26827168 = UhUIBRXhqABjsEKehvGGplPEV66113224;     UhUIBRXhqABjsEKehvGGplPEV66113224 = UhUIBRXhqABjsEKehvGGplPEV66512506;     UhUIBRXhqABjsEKehvGGplPEV66512506 = UhUIBRXhqABjsEKehvGGplPEV6367087;     UhUIBRXhqABjsEKehvGGplPEV6367087 = UhUIBRXhqABjsEKehvGGplPEV18247598;     UhUIBRXhqABjsEKehvGGplPEV18247598 = UhUIBRXhqABjsEKehvGGplPEV46123593;     UhUIBRXhqABjsEKehvGGplPEV46123593 = UhUIBRXhqABjsEKehvGGplPEV90039464;     UhUIBRXhqABjsEKehvGGplPEV90039464 = UhUIBRXhqABjsEKehvGGplPEV52510530;     UhUIBRXhqABjsEKehvGGplPEV52510530 = UhUIBRXhqABjsEKehvGGplPEV2566771;     UhUIBRXhqABjsEKehvGGplPEV2566771 = UhUIBRXhqABjsEKehvGGplPEV49597610;     UhUIBRXhqABjsEKehvGGplPEV49597610 = UhUIBRXhqABjsEKehvGGplPEV70386150;     UhUIBRXhqABjsEKehvGGplPEV70386150 = UhUIBRXhqABjsEKehvGGplPEV61938619;     UhUIBRXhqABjsEKehvGGplPEV61938619 = UhUIBRXhqABjsEKehvGGplPEV33693127;     UhUIBRXhqABjsEKehvGGplPEV33693127 = UhUIBRXhqABjsEKehvGGplPEV78384920;     UhUIBRXhqABjsEKehvGGplPEV78384920 = UhUIBRXhqABjsEKehvGGplPEV25438326;     UhUIBRXhqABjsEKehvGGplPEV25438326 = UhUIBRXhqABjsEKehvGGplPEV19143398;     UhUIBRXhqABjsEKehvGGplPEV19143398 = UhUIBRXhqABjsEKehvGGplPEV92876738;     UhUIBRXhqABjsEKehvGGplPEV92876738 = UhUIBRXhqABjsEKehvGGplPEV15295695;     UhUIBRXhqABjsEKehvGGplPEV15295695 = UhUIBRXhqABjsEKehvGGplPEV20853875;     UhUIBRXhqABjsEKehvGGplPEV20853875 = UhUIBRXhqABjsEKehvGGplPEV76402724;     UhUIBRXhqABjsEKehvGGplPEV76402724 = UhUIBRXhqABjsEKehvGGplPEV80674263;     UhUIBRXhqABjsEKehvGGplPEV80674263 = UhUIBRXhqABjsEKehvGGplPEV79070610;     UhUIBRXhqABjsEKehvGGplPEV79070610 = UhUIBRXhqABjsEKehvGGplPEV19978751;     UhUIBRXhqABjsEKehvGGplPEV19978751 = UhUIBRXhqABjsEKehvGGplPEV92891634;     UhUIBRXhqABjsEKehvGGplPEV92891634 = UhUIBRXhqABjsEKehvGGplPEV8094826;     UhUIBRXhqABjsEKehvGGplPEV8094826 = UhUIBRXhqABjsEKehvGGplPEV55088436;     UhUIBRXhqABjsEKehvGGplPEV55088436 = UhUIBRXhqABjsEKehvGGplPEV43886518;     UhUIBRXhqABjsEKehvGGplPEV43886518 = UhUIBRXhqABjsEKehvGGplPEV8879982;     UhUIBRXhqABjsEKehvGGplPEV8879982 = UhUIBRXhqABjsEKehvGGplPEV78700450;     UhUIBRXhqABjsEKehvGGplPEV78700450 = UhUIBRXhqABjsEKehvGGplPEV36233731;     UhUIBRXhqABjsEKehvGGplPEV36233731 = UhUIBRXhqABjsEKehvGGplPEV93331655;     UhUIBRXhqABjsEKehvGGplPEV93331655 = UhUIBRXhqABjsEKehvGGplPEV60831055;     UhUIBRXhqABjsEKehvGGplPEV60831055 = UhUIBRXhqABjsEKehvGGplPEV9427013;     UhUIBRXhqABjsEKehvGGplPEV9427013 = UhUIBRXhqABjsEKehvGGplPEV16655832;     UhUIBRXhqABjsEKehvGGplPEV16655832 = UhUIBRXhqABjsEKehvGGplPEV68803572;     UhUIBRXhqABjsEKehvGGplPEV68803572 = UhUIBRXhqABjsEKehvGGplPEV44057245;     UhUIBRXhqABjsEKehvGGplPEV44057245 = UhUIBRXhqABjsEKehvGGplPEV11263356;     UhUIBRXhqABjsEKehvGGplPEV11263356 = UhUIBRXhqABjsEKehvGGplPEV1066996;     UhUIBRXhqABjsEKehvGGplPEV1066996 = UhUIBRXhqABjsEKehvGGplPEV6621973;     UhUIBRXhqABjsEKehvGGplPEV6621973 = UhUIBRXhqABjsEKehvGGplPEV60292113;     UhUIBRXhqABjsEKehvGGplPEV60292113 = UhUIBRXhqABjsEKehvGGplPEV87405382;     UhUIBRXhqABjsEKehvGGplPEV87405382 = UhUIBRXhqABjsEKehvGGplPEV15233550;     UhUIBRXhqABjsEKehvGGplPEV15233550 = UhUIBRXhqABjsEKehvGGplPEV7448843;     UhUIBRXhqABjsEKehvGGplPEV7448843 = UhUIBRXhqABjsEKehvGGplPEV37927497;     UhUIBRXhqABjsEKehvGGplPEV37927497 = UhUIBRXhqABjsEKehvGGplPEV95059612;     UhUIBRXhqABjsEKehvGGplPEV95059612 = UhUIBRXhqABjsEKehvGGplPEV11297405;     UhUIBRXhqABjsEKehvGGplPEV11297405 = UhUIBRXhqABjsEKehvGGplPEV19315263;     UhUIBRXhqABjsEKehvGGplPEV19315263 = UhUIBRXhqABjsEKehvGGplPEV20109305;     UhUIBRXhqABjsEKehvGGplPEV20109305 = UhUIBRXhqABjsEKehvGGplPEV78389703;     UhUIBRXhqABjsEKehvGGplPEV78389703 = UhUIBRXhqABjsEKehvGGplPEV64548480;     UhUIBRXhqABjsEKehvGGplPEV64548480 = UhUIBRXhqABjsEKehvGGplPEV16744491;     UhUIBRXhqABjsEKehvGGplPEV16744491 = UhUIBRXhqABjsEKehvGGplPEV10218944;     UhUIBRXhqABjsEKehvGGplPEV10218944 = UhUIBRXhqABjsEKehvGGplPEV34262999;     UhUIBRXhqABjsEKehvGGplPEV34262999 = UhUIBRXhqABjsEKehvGGplPEV51916396;     UhUIBRXhqABjsEKehvGGplPEV51916396 = UhUIBRXhqABjsEKehvGGplPEV10567253;     UhUIBRXhqABjsEKehvGGplPEV10567253 = UhUIBRXhqABjsEKehvGGplPEV47756557;     UhUIBRXhqABjsEKehvGGplPEV47756557 = UhUIBRXhqABjsEKehvGGplPEV46134474;     UhUIBRXhqABjsEKehvGGplPEV46134474 = UhUIBRXhqABjsEKehvGGplPEV73620871;     UhUIBRXhqABjsEKehvGGplPEV73620871 = UhUIBRXhqABjsEKehvGGplPEV98272260;     UhUIBRXhqABjsEKehvGGplPEV98272260 = UhUIBRXhqABjsEKehvGGplPEV63159162;     UhUIBRXhqABjsEKehvGGplPEV63159162 = UhUIBRXhqABjsEKehvGGplPEV2237075;     UhUIBRXhqABjsEKehvGGplPEV2237075 = UhUIBRXhqABjsEKehvGGplPEV81159482;     UhUIBRXhqABjsEKehvGGplPEV81159482 = UhUIBRXhqABjsEKehvGGplPEV73810080;     UhUIBRXhqABjsEKehvGGplPEV73810080 = UhUIBRXhqABjsEKehvGGplPEV66333039;     UhUIBRXhqABjsEKehvGGplPEV66333039 = UhUIBRXhqABjsEKehvGGplPEV56265954;     UhUIBRXhqABjsEKehvGGplPEV56265954 = UhUIBRXhqABjsEKehvGGplPEV48418343;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QVKownDwLHpwjSnEISpQfxqVaweOsVgNCjKTnNvsYKfozAVIAIJXPpLTf21139170() {     long pOAIoEqabtAIURvWxrVRCVZaW83877311 = -261170851;    long pOAIoEqabtAIURvWxrVRCVZaW2358303 = -302923945;    long pOAIoEqabtAIURvWxrVRCVZaW44890334 = -478256827;    long pOAIoEqabtAIURvWxrVRCVZaW30560752 = -715756245;    long pOAIoEqabtAIURvWxrVRCVZaW37616118 = -210406954;    long pOAIoEqabtAIURvWxrVRCVZaW44319697 = -75667432;    long pOAIoEqabtAIURvWxrVRCVZaW53038150 = -934818562;    long pOAIoEqabtAIURvWxrVRCVZaW74839572 = -548823199;    long pOAIoEqabtAIURvWxrVRCVZaW63909934 = -822152034;    long pOAIoEqabtAIURvWxrVRCVZaW60757673 = -785716239;    long pOAIoEqabtAIURvWxrVRCVZaW57028028 = -82159881;    long pOAIoEqabtAIURvWxrVRCVZaW16516077 = -76281327;    long pOAIoEqabtAIURvWxrVRCVZaW75980778 = -649448717;    long pOAIoEqabtAIURvWxrVRCVZaW61038211 = 99788827;    long pOAIoEqabtAIURvWxrVRCVZaW53825257 = -438653391;    long pOAIoEqabtAIURvWxrVRCVZaW93711769 = -242306704;    long pOAIoEqabtAIURvWxrVRCVZaW33611797 = -165425204;    long pOAIoEqabtAIURvWxrVRCVZaW7194274 = -738035005;    long pOAIoEqabtAIURvWxrVRCVZaW25419901 = -60891754;    long pOAIoEqabtAIURvWxrVRCVZaW252925 = -112179428;    long pOAIoEqabtAIURvWxrVRCVZaW90531709 = -843034861;    long pOAIoEqabtAIURvWxrVRCVZaW71165605 = -794387679;    long pOAIoEqabtAIURvWxrVRCVZaW80540993 = -5015399;    long pOAIoEqabtAIURvWxrVRCVZaW81318052 = -343850240;    long pOAIoEqabtAIURvWxrVRCVZaW73463714 = -792468032;    long pOAIoEqabtAIURvWxrVRCVZaW83934195 = -711426326;    long pOAIoEqabtAIURvWxrVRCVZaW13428964 = -392216814;    long pOAIoEqabtAIURvWxrVRCVZaW39222650 = -39030088;    long pOAIoEqabtAIURvWxrVRCVZaW50496244 = 3996108;    long pOAIoEqabtAIURvWxrVRCVZaW89225289 = -395901741;    long pOAIoEqabtAIURvWxrVRCVZaW28204462 = -383275586;    long pOAIoEqabtAIURvWxrVRCVZaW63337656 = -317313245;    long pOAIoEqabtAIURvWxrVRCVZaW67334884 = -695322142;    long pOAIoEqabtAIURvWxrVRCVZaW58067547 = -166416847;    long pOAIoEqabtAIURvWxrVRCVZaW57049970 = -10550559;    long pOAIoEqabtAIURvWxrVRCVZaW78388011 = -567921514;    long pOAIoEqabtAIURvWxrVRCVZaW15525041 = -839638402;    long pOAIoEqabtAIURvWxrVRCVZaW17727909 = -866848056;    long pOAIoEqabtAIURvWxrVRCVZaW36757648 = -683781432;    long pOAIoEqabtAIURvWxrVRCVZaW82519130 = -941909723;    long pOAIoEqabtAIURvWxrVRCVZaW79575200 = -494916687;    long pOAIoEqabtAIURvWxrVRCVZaW79404590 = -577547854;    long pOAIoEqabtAIURvWxrVRCVZaW41893909 = -842467172;    long pOAIoEqabtAIURvWxrVRCVZaW42698109 = -912222812;    long pOAIoEqabtAIURvWxrVRCVZaW49614068 = -330119230;    long pOAIoEqabtAIURvWxrVRCVZaW16347479 = -201440948;    long pOAIoEqabtAIURvWxrVRCVZaW81283782 = -779070937;    long pOAIoEqabtAIURvWxrVRCVZaW51419439 = -332849246;    long pOAIoEqabtAIURvWxrVRCVZaW1277587 = -647513638;    long pOAIoEqabtAIURvWxrVRCVZaW49967915 = -89780932;    long pOAIoEqabtAIURvWxrVRCVZaW99914121 = -11218089;    long pOAIoEqabtAIURvWxrVRCVZaW76362211 = -656291108;    long pOAIoEqabtAIURvWxrVRCVZaW83916843 = -99806344;    long pOAIoEqabtAIURvWxrVRCVZaW36845721 = -676226703;    long pOAIoEqabtAIURvWxrVRCVZaW30607461 = -541804476;    long pOAIoEqabtAIURvWxrVRCVZaW12711707 = -466783172;    long pOAIoEqabtAIURvWxrVRCVZaW21817310 = -197908547;    long pOAIoEqabtAIURvWxrVRCVZaW63572282 = -34406587;    long pOAIoEqabtAIURvWxrVRCVZaW57097038 = -923288214;    long pOAIoEqabtAIURvWxrVRCVZaW53681923 = -498980628;    long pOAIoEqabtAIURvWxrVRCVZaW30890734 = -683450619;    long pOAIoEqabtAIURvWxrVRCVZaW13815500 = -795788474;    long pOAIoEqabtAIURvWxrVRCVZaW24343328 = -452819308;    long pOAIoEqabtAIURvWxrVRCVZaW74684644 = -326250293;    long pOAIoEqabtAIURvWxrVRCVZaW32553211 = -302440654;    long pOAIoEqabtAIURvWxrVRCVZaW93690371 = -764846636;    long pOAIoEqabtAIURvWxrVRCVZaW49181192 = -380959186;    long pOAIoEqabtAIURvWxrVRCVZaW17913232 = -383031871;    long pOAIoEqabtAIURvWxrVRCVZaW3988241 = -889660615;    long pOAIoEqabtAIURvWxrVRCVZaW75437245 = -870731877;    long pOAIoEqabtAIURvWxrVRCVZaW78186729 = -402668302;    long pOAIoEqabtAIURvWxrVRCVZaW15883888 = -298577149;    long pOAIoEqabtAIURvWxrVRCVZaW70436626 = 45746427;    long pOAIoEqabtAIURvWxrVRCVZaW42900770 = -118982031;    long pOAIoEqabtAIURvWxrVRCVZaW20677725 = -617262742;    long pOAIoEqabtAIURvWxrVRCVZaW11127119 = -165487007;    long pOAIoEqabtAIURvWxrVRCVZaW29271696 = -951920508;    long pOAIoEqabtAIURvWxrVRCVZaW37842885 = -92792588;    long pOAIoEqabtAIURvWxrVRCVZaW31703984 = 86268989;    long pOAIoEqabtAIURvWxrVRCVZaW57116236 = -491027085;    long pOAIoEqabtAIURvWxrVRCVZaW2650413 = -932355389;    long pOAIoEqabtAIURvWxrVRCVZaW62009525 = 40632431;    long pOAIoEqabtAIURvWxrVRCVZaW37945064 = -391516451;    long pOAIoEqabtAIURvWxrVRCVZaW528329 = -906222960;    long pOAIoEqabtAIURvWxrVRCVZaW89311167 = -284683653;    long pOAIoEqabtAIURvWxrVRCVZaW51842250 = -726984478;    long pOAIoEqabtAIURvWxrVRCVZaW79420813 = -117506902;    long pOAIoEqabtAIURvWxrVRCVZaW30489163 = 80904560;    long pOAIoEqabtAIURvWxrVRCVZaW27460087 = -624612371;    long pOAIoEqabtAIURvWxrVRCVZaW44338263 = -543767387;    long pOAIoEqabtAIURvWxrVRCVZaW56570702 = -270012968;    long pOAIoEqabtAIURvWxrVRCVZaW51952759 = -705231816;    long pOAIoEqabtAIURvWxrVRCVZaW60630871 = -943559843;    long pOAIoEqabtAIURvWxrVRCVZaW83075724 = -84800804;    long pOAIoEqabtAIURvWxrVRCVZaW51628397 = -158459105;    long pOAIoEqabtAIURvWxrVRCVZaW65759701 = -699128213;    long pOAIoEqabtAIURvWxrVRCVZaW55061262 = -24728547;    long pOAIoEqabtAIURvWxrVRCVZaW67209264 = -416216879;    long pOAIoEqabtAIURvWxrVRCVZaW10144898 = -509782158;    long pOAIoEqabtAIURvWxrVRCVZaW55923697 = -261170851;     pOAIoEqabtAIURvWxrVRCVZaW83877311 = pOAIoEqabtAIURvWxrVRCVZaW2358303;     pOAIoEqabtAIURvWxrVRCVZaW2358303 = pOAIoEqabtAIURvWxrVRCVZaW44890334;     pOAIoEqabtAIURvWxrVRCVZaW44890334 = pOAIoEqabtAIURvWxrVRCVZaW30560752;     pOAIoEqabtAIURvWxrVRCVZaW30560752 = pOAIoEqabtAIURvWxrVRCVZaW37616118;     pOAIoEqabtAIURvWxrVRCVZaW37616118 = pOAIoEqabtAIURvWxrVRCVZaW44319697;     pOAIoEqabtAIURvWxrVRCVZaW44319697 = pOAIoEqabtAIURvWxrVRCVZaW53038150;     pOAIoEqabtAIURvWxrVRCVZaW53038150 = pOAIoEqabtAIURvWxrVRCVZaW74839572;     pOAIoEqabtAIURvWxrVRCVZaW74839572 = pOAIoEqabtAIURvWxrVRCVZaW63909934;     pOAIoEqabtAIURvWxrVRCVZaW63909934 = pOAIoEqabtAIURvWxrVRCVZaW60757673;     pOAIoEqabtAIURvWxrVRCVZaW60757673 = pOAIoEqabtAIURvWxrVRCVZaW57028028;     pOAIoEqabtAIURvWxrVRCVZaW57028028 = pOAIoEqabtAIURvWxrVRCVZaW16516077;     pOAIoEqabtAIURvWxrVRCVZaW16516077 = pOAIoEqabtAIURvWxrVRCVZaW75980778;     pOAIoEqabtAIURvWxrVRCVZaW75980778 = pOAIoEqabtAIURvWxrVRCVZaW61038211;     pOAIoEqabtAIURvWxrVRCVZaW61038211 = pOAIoEqabtAIURvWxrVRCVZaW53825257;     pOAIoEqabtAIURvWxrVRCVZaW53825257 = pOAIoEqabtAIURvWxrVRCVZaW93711769;     pOAIoEqabtAIURvWxrVRCVZaW93711769 = pOAIoEqabtAIURvWxrVRCVZaW33611797;     pOAIoEqabtAIURvWxrVRCVZaW33611797 = pOAIoEqabtAIURvWxrVRCVZaW7194274;     pOAIoEqabtAIURvWxrVRCVZaW7194274 = pOAIoEqabtAIURvWxrVRCVZaW25419901;     pOAIoEqabtAIURvWxrVRCVZaW25419901 = pOAIoEqabtAIURvWxrVRCVZaW252925;     pOAIoEqabtAIURvWxrVRCVZaW252925 = pOAIoEqabtAIURvWxrVRCVZaW90531709;     pOAIoEqabtAIURvWxrVRCVZaW90531709 = pOAIoEqabtAIURvWxrVRCVZaW71165605;     pOAIoEqabtAIURvWxrVRCVZaW71165605 = pOAIoEqabtAIURvWxrVRCVZaW80540993;     pOAIoEqabtAIURvWxrVRCVZaW80540993 = pOAIoEqabtAIURvWxrVRCVZaW81318052;     pOAIoEqabtAIURvWxrVRCVZaW81318052 = pOAIoEqabtAIURvWxrVRCVZaW73463714;     pOAIoEqabtAIURvWxrVRCVZaW73463714 = pOAIoEqabtAIURvWxrVRCVZaW83934195;     pOAIoEqabtAIURvWxrVRCVZaW83934195 = pOAIoEqabtAIURvWxrVRCVZaW13428964;     pOAIoEqabtAIURvWxrVRCVZaW13428964 = pOAIoEqabtAIURvWxrVRCVZaW39222650;     pOAIoEqabtAIURvWxrVRCVZaW39222650 = pOAIoEqabtAIURvWxrVRCVZaW50496244;     pOAIoEqabtAIURvWxrVRCVZaW50496244 = pOAIoEqabtAIURvWxrVRCVZaW89225289;     pOAIoEqabtAIURvWxrVRCVZaW89225289 = pOAIoEqabtAIURvWxrVRCVZaW28204462;     pOAIoEqabtAIURvWxrVRCVZaW28204462 = pOAIoEqabtAIURvWxrVRCVZaW63337656;     pOAIoEqabtAIURvWxrVRCVZaW63337656 = pOAIoEqabtAIURvWxrVRCVZaW67334884;     pOAIoEqabtAIURvWxrVRCVZaW67334884 = pOAIoEqabtAIURvWxrVRCVZaW58067547;     pOAIoEqabtAIURvWxrVRCVZaW58067547 = pOAIoEqabtAIURvWxrVRCVZaW57049970;     pOAIoEqabtAIURvWxrVRCVZaW57049970 = pOAIoEqabtAIURvWxrVRCVZaW78388011;     pOAIoEqabtAIURvWxrVRCVZaW78388011 = pOAIoEqabtAIURvWxrVRCVZaW15525041;     pOAIoEqabtAIURvWxrVRCVZaW15525041 = pOAIoEqabtAIURvWxrVRCVZaW17727909;     pOAIoEqabtAIURvWxrVRCVZaW17727909 = pOAIoEqabtAIURvWxrVRCVZaW36757648;     pOAIoEqabtAIURvWxrVRCVZaW36757648 = pOAIoEqabtAIURvWxrVRCVZaW82519130;     pOAIoEqabtAIURvWxrVRCVZaW82519130 = pOAIoEqabtAIURvWxrVRCVZaW79575200;     pOAIoEqabtAIURvWxrVRCVZaW79575200 = pOAIoEqabtAIURvWxrVRCVZaW79404590;     pOAIoEqabtAIURvWxrVRCVZaW79404590 = pOAIoEqabtAIURvWxrVRCVZaW41893909;     pOAIoEqabtAIURvWxrVRCVZaW41893909 = pOAIoEqabtAIURvWxrVRCVZaW42698109;     pOAIoEqabtAIURvWxrVRCVZaW42698109 = pOAIoEqabtAIURvWxrVRCVZaW49614068;     pOAIoEqabtAIURvWxrVRCVZaW49614068 = pOAIoEqabtAIURvWxrVRCVZaW16347479;     pOAIoEqabtAIURvWxrVRCVZaW16347479 = pOAIoEqabtAIURvWxrVRCVZaW81283782;     pOAIoEqabtAIURvWxrVRCVZaW81283782 = pOAIoEqabtAIURvWxrVRCVZaW51419439;     pOAIoEqabtAIURvWxrVRCVZaW51419439 = pOAIoEqabtAIURvWxrVRCVZaW1277587;     pOAIoEqabtAIURvWxrVRCVZaW1277587 = pOAIoEqabtAIURvWxrVRCVZaW49967915;     pOAIoEqabtAIURvWxrVRCVZaW49967915 = pOAIoEqabtAIURvWxrVRCVZaW99914121;     pOAIoEqabtAIURvWxrVRCVZaW99914121 = pOAIoEqabtAIURvWxrVRCVZaW76362211;     pOAIoEqabtAIURvWxrVRCVZaW76362211 = pOAIoEqabtAIURvWxrVRCVZaW83916843;     pOAIoEqabtAIURvWxrVRCVZaW83916843 = pOAIoEqabtAIURvWxrVRCVZaW36845721;     pOAIoEqabtAIURvWxrVRCVZaW36845721 = pOAIoEqabtAIURvWxrVRCVZaW30607461;     pOAIoEqabtAIURvWxrVRCVZaW30607461 = pOAIoEqabtAIURvWxrVRCVZaW12711707;     pOAIoEqabtAIURvWxrVRCVZaW12711707 = pOAIoEqabtAIURvWxrVRCVZaW21817310;     pOAIoEqabtAIURvWxrVRCVZaW21817310 = pOAIoEqabtAIURvWxrVRCVZaW63572282;     pOAIoEqabtAIURvWxrVRCVZaW63572282 = pOAIoEqabtAIURvWxrVRCVZaW57097038;     pOAIoEqabtAIURvWxrVRCVZaW57097038 = pOAIoEqabtAIURvWxrVRCVZaW53681923;     pOAIoEqabtAIURvWxrVRCVZaW53681923 = pOAIoEqabtAIURvWxrVRCVZaW30890734;     pOAIoEqabtAIURvWxrVRCVZaW30890734 = pOAIoEqabtAIURvWxrVRCVZaW13815500;     pOAIoEqabtAIURvWxrVRCVZaW13815500 = pOAIoEqabtAIURvWxrVRCVZaW24343328;     pOAIoEqabtAIURvWxrVRCVZaW24343328 = pOAIoEqabtAIURvWxrVRCVZaW74684644;     pOAIoEqabtAIURvWxrVRCVZaW74684644 = pOAIoEqabtAIURvWxrVRCVZaW32553211;     pOAIoEqabtAIURvWxrVRCVZaW32553211 = pOAIoEqabtAIURvWxrVRCVZaW93690371;     pOAIoEqabtAIURvWxrVRCVZaW93690371 = pOAIoEqabtAIURvWxrVRCVZaW49181192;     pOAIoEqabtAIURvWxrVRCVZaW49181192 = pOAIoEqabtAIURvWxrVRCVZaW17913232;     pOAIoEqabtAIURvWxrVRCVZaW17913232 = pOAIoEqabtAIURvWxrVRCVZaW3988241;     pOAIoEqabtAIURvWxrVRCVZaW3988241 = pOAIoEqabtAIURvWxrVRCVZaW75437245;     pOAIoEqabtAIURvWxrVRCVZaW75437245 = pOAIoEqabtAIURvWxrVRCVZaW78186729;     pOAIoEqabtAIURvWxrVRCVZaW78186729 = pOAIoEqabtAIURvWxrVRCVZaW15883888;     pOAIoEqabtAIURvWxrVRCVZaW15883888 = pOAIoEqabtAIURvWxrVRCVZaW70436626;     pOAIoEqabtAIURvWxrVRCVZaW70436626 = pOAIoEqabtAIURvWxrVRCVZaW42900770;     pOAIoEqabtAIURvWxrVRCVZaW42900770 = pOAIoEqabtAIURvWxrVRCVZaW20677725;     pOAIoEqabtAIURvWxrVRCVZaW20677725 = pOAIoEqabtAIURvWxrVRCVZaW11127119;     pOAIoEqabtAIURvWxrVRCVZaW11127119 = pOAIoEqabtAIURvWxrVRCVZaW29271696;     pOAIoEqabtAIURvWxrVRCVZaW29271696 = pOAIoEqabtAIURvWxrVRCVZaW37842885;     pOAIoEqabtAIURvWxrVRCVZaW37842885 = pOAIoEqabtAIURvWxrVRCVZaW31703984;     pOAIoEqabtAIURvWxrVRCVZaW31703984 = pOAIoEqabtAIURvWxrVRCVZaW57116236;     pOAIoEqabtAIURvWxrVRCVZaW57116236 = pOAIoEqabtAIURvWxrVRCVZaW2650413;     pOAIoEqabtAIURvWxrVRCVZaW2650413 = pOAIoEqabtAIURvWxrVRCVZaW62009525;     pOAIoEqabtAIURvWxrVRCVZaW62009525 = pOAIoEqabtAIURvWxrVRCVZaW37945064;     pOAIoEqabtAIURvWxrVRCVZaW37945064 = pOAIoEqabtAIURvWxrVRCVZaW528329;     pOAIoEqabtAIURvWxrVRCVZaW528329 = pOAIoEqabtAIURvWxrVRCVZaW89311167;     pOAIoEqabtAIURvWxrVRCVZaW89311167 = pOAIoEqabtAIURvWxrVRCVZaW51842250;     pOAIoEqabtAIURvWxrVRCVZaW51842250 = pOAIoEqabtAIURvWxrVRCVZaW79420813;     pOAIoEqabtAIURvWxrVRCVZaW79420813 = pOAIoEqabtAIURvWxrVRCVZaW30489163;     pOAIoEqabtAIURvWxrVRCVZaW30489163 = pOAIoEqabtAIURvWxrVRCVZaW27460087;     pOAIoEqabtAIURvWxrVRCVZaW27460087 = pOAIoEqabtAIURvWxrVRCVZaW44338263;     pOAIoEqabtAIURvWxrVRCVZaW44338263 = pOAIoEqabtAIURvWxrVRCVZaW56570702;     pOAIoEqabtAIURvWxrVRCVZaW56570702 = pOAIoEqabtAIURvWxrVRCVZaW51952759;     pOAIoEqabtAIURvWxrVRCVZaW51952759 = pOAIoEqabtAIURvWxrVRCVZaW60630871;     pOAIoEqabtAIURvWxrVRCVZaW60630871 = pOAIoEqabtAIURvWxrVRCVZaW83075724;     pOAIoEqabtAIURvWxrVRCVZaW83075724 = pOAIoEqabtAIURvWxrVRCVZaW51628397;     pOAIoEqabtAIURvWxrVRCVZaW51628397 = pOAIoEqabtAIURvWxrVRCVZaW65759701;     pOAIoEqabtAIURvWxrVRCVZaW65759701 = pOAIoEqabtAIURvWxrVRCVZaW55061262;     pOAIoEqabtAIURvWxrVRCVZaW55061262 = pOAIoEqabtAIURvWxrVRCVZaW67209264;     pOAIoEqabtAIURvWxrVRCVZaW67209264 = pOAIoEqabtAIURvWxrVRCVZaW10144898;     pOAIoEqabtAIURvWxrVRCVZaW10144898 = pOAIoEqabtAIURvWxrVRCVZaW55923697;     pOAIoEqabtAIURvWxrVRCVZaW55923697 = pOAIoEqabtAIURvWxrVRCVZaW83877311;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LnuxDxhMXdAEAsRcxSUWXrmwSgSPbXBJsUfcnjqSwAnPdvGPqAJUMkNUB36188238() {     long xeWeRlAbqLgMpoNcBZWDWTXZD89994418 = -373072740;    long xeWeRlAbqLgMpoNcBZWDWTXZD45731582 = -12523726;    long xeWeRlAbqLgMpoNcBZWDWTXZD60932517 = -629089748;    long xeWeRlAbqLgMpoNcBZWDWTXZD57635533 = -906504875;    long xeWeRlAbqLgMpoNcBZWDWTXZD6511607 = -731056825;    long xeWeRlAbqLgMpoNcBZWDWTXZD35736899 = -340163668;    long xeWeRlAbqLgMpoNcBZWDWTXZD13527116 = 26216461;    long xeWeRlAbqLgMpoNcBZWDWTXZD24599463 = -835697112;    long xeWeRlAbqLgMpoNcBZWDWTXZD28552429 = -590184700;    long xeWeRlAbqLgMpoNcBZWDWTXZD1987332 = -14691717;    long xeWeRlAbqLgMpoNcBZWDWTXZD17138319 = 40402532;    long xeWeRlAbqLgMpoNcBZWDWTXZD48339119 = -520687529;    long xeWeRlAbqLgMpoNcBZWDWTXZD62189897 = 10660194;    long xeWeRlAbqLgMpoNcBZWDWTXZD44181887 = -432449741;    long xeWeRlAbqLgMpoNcBZWDWTXZD49567683 = -29115557;    long xeWeRlAbqLgMpoNcBZWDWTXZD35217164 = -215306247;    long xeWeRlAbqLgMpoNcBZWDWTXZD27447800 = -781970317;    long xeWeRlAbqLgMpoNcBZWDWTXZD4247427 = -403557648;    long xeWeRlAbqLgMpoNcBZWDWTXZD87249742 = -466660851;    long xeWeRlAbqLgMpoNcBZWDWTXZD80803089 = -469082348;    long xeWeRlAbqLgMpoNcBZWDWTXZD79084902 = -698522316;    long xeWeRlAbqLgMpoNcBZWDWTXZD57686628 = -702317396;    long xeWeRlAbqLgMpoNcBZWDWTXZD16131785 = -851532886;    long xeWeRlAbqLgMpoNcBZWDWTXZD65310426 = -566155228;    long xeWeRlAbqLgMpoNcBZWDWTXZD17163365 = -65664065;    long xeWeRlAbqLgMpoNcBZWDWTXZD8655871 = -590081650;    long xeWeRlAbqLgMpoNcBZWDWTXZD11888742 = -292879017;    long xeWeRlAbqLgMpoNcBZWDWTXZD52329775 = -104959042;    long xeWeRlAbqLgMpoNcBZWDWTXZD16628500 = -218386597;    long xeWeRlAbqLgMpoNcBZWDWTXZD57840926 = -213372609;    long xeWeRlAbqLgMpoNcBZWDWTXZD20447011 = -296596524;    long xeWeRlAbqLgMpoNcBZWDWTXZD60948278 = -26760061;    long xeWeRlAbqLgMpoNcBZWDWTXZD77045833 = -587935512;    long xeWeRlAbqLgMpoNcBZWDWTXZD52898111 = 82041388;    long xeWeRlAbqLgMpoNcBZWDWTXZD18524622 = -649283664;    long xeWeRlAbqLgMpoNcBZWDWTXZD47113925 = -781947621;    long xeWeRlAbqLgMpoNcBZWDWTXZD96786975 = -793274272;    long xeWeRlAbqLgMpoNcBZWDWTXZD51818122 = -638354065;    long xeWeRlAbqLgMpoNcBZWDWTXZD10367902 = -677704929;    long xeWeRlAbqLgMpoNcBZWDWTXZD70021068 = -315348946;    long xeWeRlAbqLgMpoNcBZWDWTXZD85244424 = -560190581;    long xeWeRlAbqLgMpoNcBZWDWTXZD11555048 = -847690132;    long xeWeRlAbqLgMpoNcBZWDWTXZD19960887 = -923271756;    long xeWeRlAbqLgMpoNcBZWDWTXZD30105849 = -931565750;    long xeWeRlAbqLgMpoNcBZWDWTXZD61566533 = 7982616;    long xeWeRlAbqLgMpoNcBZWDWTXZD28286674 = -186657064;    long xeWeRlAbqLgMpoNcBZWDWTXZD99062356 = -897846475;    long xeWeRlAbqLgMpoNcBZWDWTXZD59376379 = -342744778;    long xeWeRlAbqLgMpoNcBZWDWTXZD10953316 = -733250626;    long xeWeRlAbqLgMpoNcBZWDWTXZD62879568 = -176791740;    long xeWeRlAbqLgMpoNcBZWDWTXZD35614800 = -953511760;    long xeWeRlAbqLgMpoNcBZWDWTXZD87171930 = -457017428;    long xeWeRlAbqLgMpoNcBZWDWTXZD32165301 = -991595931;    long xeWeRlAbqLgMpoNcBZWDWTXZD32814602 = -996696848;    long xeWeRlAbqLgMpoNcBZWDWTXZD57103335 = -142336258;    long xeWeRlAbqLgMpoNcBZWDWTXZD32307790 = -670755344;    long xeWeRlAbqLgMpoNcBZWDWTXZD29599797 = -160990840;    long xeWeRlAbqLgMpoNcBZWDWTXZD95622091 = 37065480;    long xeWeRlAbqLgMpoNcBZWDWTXZD40472169 = -740840811;    long xeWeRlAbqLgMpoNcBZWDWTXZD97855736 = -40975176;    long xeWeRlAbqLgMpoNcBZWDWTXZD23848158 = 52715349;    long xeWeRlAbqLgMpoNcBZWDWTXZD61197340 = -868824498;    long xeWeRlAbqLgMpoNcBZWDWTXZD7970964 = -517310516;    long xeWeRlAbqLgMpoNcBZWDWTXZD70711503 = -276812092;    long xeWeRlAbqLgMpoNcBZWDWTXZD81540321 = -718095193;    long xeWeRlAbqLgMpoNcBZWDWTXZD56190040 = -932837407;    long xeWeRlAbqLgMpoNcBZWDWTXZD71293286 = -932752018;    long xeWeRlAbqLgMpoNcBZWDWTXZD9291787 = 28618805;    long xeWeRlAbqLgMpoNcBZWDWTXZD25657266 = -783166078;    long xeWeRlAbqLgMpoNcBZWDWTXZD2453759 = -247167936;    long xeWeRlAbqLgMpoNcBZWDWTXZD38430188 = -422031976;    long xeWeRlAbqLgMpoNcBZWDWTXZD75629678 = -43616252;    long xeWeRlAbqLgMpoNcBZWDWTXZD93879525 = -725852719;    long xeWeRlAbqLgMpoNcBZWDWTXZD17228675 = -51311906;    long xeWeRlAbqLgMpoNcBZWDWTXZD95558665 = -908891768;    long xeWeRlAbqLgMpoNcBZWDWTXZD67529855 = -850832185;    long xeWeRlAbqLgMpoNcBZWDWTXZD37725742 = -779045641;    long xeWeRlAbqLgMpoNcBZWDWTXZD86025935 = -919967136;    long xeWeRlAbqLgMpoNcBZWDWTXZD3743893 = -474137845;    long xeWeRlAbqLgMpoNcBZWDWTXZD88876690 = -879007001;    long xeWeRlAbqLgMpoNcBZWDWTXZD9593514 = -692235175;    long xeWeRlAbqLgMpoNcBZWDWTXZD52512362 = -950134239;    long xeWeRlAbqLgMpoNcBZWDWTXZD41376460 = -371708417;    long xeWeRlAbqLgMpoNcBZWDWTXZD53748931 = 58405143;    long xeWeRlAbqLgMpoNcBZWDWTXZD22226126 = -259860849;    long xeWeRlAbqLgMpoNcBZWDWTXZD33275080 = -839579096;    long xeWeRlAbqLgMpoNcBZWDWTXZD28782978 = -35164130;    long xeWeRlAbqLgMpoNcBZWDWTXZD44231231 = -591238665;    long xeWeRlAbqLgMpoNcBZWDWTXZD95794775 = -775622354;    long xeWeRlAbqLgMpoNcBZWDWTXZD86216831 = -978528320;    long xeWeRlAbqLgMpoNcBZWDWTXZD17514128 = -520956782;    long xeWeRlAbqLgMpoNcBZWDWTXZD1164884 = -730339752;    long xeWeRlAbqLgMpoNcBZWDWTXZD11345953 = -897513255;    long xeWeRlAbqLgMpoNcBZWDWTXZD12512166 = -536729753;    long xeWeRlAbqLgMpoNcBZWDWTXZD46172910 = -268064296;    long xeWeRlAbqLgMpoNcBZWDWTXZD24047084 = -691366083;    long xeWeRlAbqLgMpoNcBZWDWTXZD3584085 = -230379616;    long xeWeRlAbqLgMpoNcBZWDWTXZD49249384 = -546459665;    long xeWeRlAbqLgMpoNcBZWDWTXZD48565528 = -113470557;    long xeWeRlAbqLgMpoNcBZWDWTXZD5376494 = -373072740;     xeWeRlAbqLgMpoNcBZWDWTXZD89994418 = xeWeRlAbqLgMpoNcBZWDWTXZD45731582;     xeWeRlAbqLgMpoNcBZWDWTXZD45731582 = xeWeRlAbqLgMpoNcBZWDWTXZD60932517;     xeWeRlAbqLgMpoNcBZWDWTXZD60932517 = xeWeRlAbqLgMpoNcBZWDWTXZD57635533;     xeWeRlAbqLgMpoNcBZWDWTXZD57635533 = xeWeRlAbqLgMpoNcBZWDWTXZD6511607;     xeWeRlAbqLgMpoNcBZWDWTXZD6511607 = xeWeRlAbqLgMpoNcBZWDWTXZD35736899;     xeWeRlAbqLgMpoNcBZWDWTXZD35736899 = xeWeRlAbqLgMpoNcBZWDWTXZD13527116;     xeWeRlAbqLgMpoNcBZWDWTXZD13527116 = xeWeRlAbqLgMpoNcBZWDWTXZD24599463;     xeWeRlAbqLgMpoNcBZWDWTXZD24599463 = xeWeRlAbqLgMpoNcBZWDWTXZD28552429;     xeWeRlAbqLgMpoNcBZWDWTXZD28552429 = xeWeRlAbqLgMpoNcBZWDWTXZD1987332;     xeWeRlAbqLgMpoNcBZWDWTXZD1987332 = xeWeRlAbqLgMpoNcBZWDWTXZD17138319;     xeWeRlAbqLgMpoNcBZWDWTXZD17138319 = xeWeRlAbqLgMpoNcBZWDWTXZD48339119;     xeWeRlAbqLgMpoNcBZWDWTXZD48339119 = xeWeRlAbqLgMpoNcBZWDWTXZD62189897;     xeWeRlAbqLgMpoNcBZWDWTXZD62189897 = xeWeRlAbqLgMpoNcBZWDWTXZD44181887;     xeWeRlAbqLgMpoNcBZWDWTXZD44181887 = xeWeRlAbqLgMpoNcBZWDWTXZD49567683;     xeWeRlAbqLgMpoNcBZWDWTXZD49567683 = xeWeRlAbqLgMpoNcBZWDWTXZD35217164;     xeWeRlAbqLgMpoNcBZWDWTXZD35217164 = xeWeRlAbqLgMpoNcBZWDWTXZD27447800;     xeWeRlAbqLgMpoNcBZWDWTXZD27447800 = xeWeRlAbqLgMpoNcBZWDWTXZD4247427;     xeWeRlAbqLgMpoNcBZWDWTXZD4247427 = xeWeRlAbqLgMpoNcBZWDWTXZD87249742;     xeWeRlAbqLgMpoNcBZWDWTXZD87249742 = xeWeRlAbqLgMpoNcBZWDWTXZD80803089;     xeWeRlAbqLgMpoNcBZWDWTXZD80803089 = xeWeRlAbqLgMpoNcBZWDWTXZD79084902;     xeWeRlAbqLgMpoNcBZWDWTXZD79084902 = xeWeRlAbqLgMpoNcBZWDWTXZD57686628;     xeWeRlAbqLgMpoNcBZWDWTXZD57686628 = xeWeRlAbqLgMpoNcBZWDWTXZD16131785;     xeWeRlAbqLgMpoNcBZWDWTXZD16131785 = xeWeRlAbqLgMpoNcBZWDWTXZD65310426;     xeWeRlAbqLgMpoNcBZWDWTXZD65310426 = xeWeRlAbqLgMpoNcBZWDWTXZD17163365;     xeWeRlAbqLgMpoNcBZWDWTXZD17163365 = xeWeRlAbqLgMpoNcBZWDWTXZD8655871;     xeWeRlAbqLgMpoNcBZWDWTXZD8655871 = xeWeRlAbqLgMpoNcBZWDWTXZD11888742;     xeWeRlAbqLgMpoNcBZWDWTXZD11888742 = xeWeRlAbqLgMpoNcBZWDWTXZD52329775;     xeWeRlAbqLgMpoNcBZWDWTXZD52329775 = xeWeRlAbqLgMpoNcBZWDWTXZD16628500;     xeWeRlAbqLgMpoNcBZWDWTXZD16628500 = xeWeRlAbqLgMpoNcBZWDWTXZD57840926;     xeWeRlAbqLgMpoNcBZWDWTXZD57840926 = xeWeRlAbqLgMpoNcBZWDWTXZD20447011;     xeWeRlAbqLgMpoNcBZWDWTXZD20447011 = xeWeRlAbqLgMpoNcBZWDWTXZD60948278;     xeWeRlAbqLgMpoNcBZWDWTXZD60948278 = xeWeRlAbqLgMpoNcBZWDWTXZD77045833;     xeWeRlAbqLgMpoNcBZWDWTXZD77045833 = xeWeRlAbqLgMpoNcBZWDWTXZD52898111;     xeWeRlAbqLgMpoNcBZWDWTXZD52898111 = xeWeRlAbqLgMpoNcBZWDWTXZD18524622;     xeWeRlAbqLgMpoNcBZWDWTXZD18524622 = xeWeRlAbqLgMpoNcBZWDWTXZD47113925;     xeWeRlAbqLgMpoNcBZWDWTXZD47113925 = xeWeRlAbqLgMpoNcBZWDWTXZD96786975;     xeWeRlAbqLgMpoNcBZWDWTXZD96786975 = xeWeRlAbqLgMpoNcBZWDWTXZD51818122;     xeWeRlAbqLgMpoNcBZWDWTXZD51818122 = xeWeRlAbqLgMpoNcBZWDWTXZD10367902;     xeWeRlAbqLgMpoNcBZWDWTXZD10367902 = xeWeRlAbqLgMpoNcBZWDWTXZD70021068;     xeWeRlAbqLgMpoNcBZWDWTXZD70021068 = xeWeRlAbqLgMpoNcBZWDWTXZD85244424;     xeWeRlAbqLgMpoNcBZWDWTXZD85244424 = xeWeRlAbqLgMpoNcBZWDWTXZD11555048;     xeWeRlAbqLgMpoNcBZWDWTXZD11555048 = xeWeRlAbqLgMpoNcBZWDWTXZD19960887;     xeWeRlAbqLgMpoNcBZWDWTXZD19960887 = xeWeRlAbqLgMpoNcBZWDWTXZD30105849;     xeWeRlAbqLgMpoNcBZWDWTXZD30105849 = xeWeRlAbqLgMpoNcBZWDWTXZD61566533;     xeWeRlAbqLgMpoNcBZWDWTXZD61566533 = xeWeRlAbqLgMpoNcBZWDWTXZD28286674;     xeWeRlAbqLgMpoNcBZWDWTXZD28286674 = xeWeRlAbqLgMpoNcBZWDWTXZD99062356;     xeWeRlAbqLgMpoNcBZWDWTXZD99062356 = xeWeRlAbqLgMpoNcBZWDWTXZD59376379;     xeWeRlAbqLgMpoNcBZWDWTXZD59376379 = xeWeRlAbqLgMpoNcBZWDWTXZD10953316;     xeWeRlAbqLgMpoNcBZWDWTXZD10953316 = xeWeRlAbqLgMpoNcBZWDWTXZD62879568;     xeWeRlAbqLgMpoNcBZWDWTXZD62879568 = xeWeRlAbqLgMpoNcBZWDWTXZD35614800;     xeWeRlAbqLgMpoNcBZWDWTXZD35614800 = xeWeRlAbqLgMpoNcBZWDWTXZD87171930;     xeWeRlAbqLgMpoNcBZWDWTXZD87171930 = xeWeRlAbqLgMpoNcBZWDWTXZD32165301;     xeWeRlAbqLgMpoNcBZWDWTXZD32165301 = xeWeRlAbqLgMpoNcBZWDWTXZD32814602;     xeWeRlAbqLgMpoNcBZWDWTXZD32814602 = xeWeRlAbqLgMpoNcBZWDWTXZD57103335;     xeWeRlAbqLgMpoNcBZWDWTXZD57103335 = xeWeRlAbqLgMpoNcBZWDWTXZD32307790;     xeWeRlAbqLgMpoNcBZWDWTXZD32307790 = xeWeRlAbqLgMpoNcBZWDWTXZD29599797;     xeWeRlAbqLgMpoNcBZWDWTXZD29599797 = xeWeRlAbqLgMpoNcBZWDWTXZD95622091;     xeWeRlAbqLgMpoNcBZWDWTXZD95622091 = xeWeRlAbqLgMpoNcBZWDWTXZD40472169;     xeWeRlAbqLgMpoNcBZWDWTXZD40472169 = xeWeRlAbqLgMpoNcBZWDWTXZD97855736;     xeWeRlAbqLgMpoNcBZWDWTXZD97855736 = xeWeRlAbqLgMpoNcBZWDWTXZD23848158;     xeWeRlAbqLgMpoNcBZWDWTXZD23848158 = xeWeRlAbqLgMpoNcBZWDWTXZD61197340;     xeWeRlAbqLgMpoNcBZWDWTXZD61197340 = xeWeRlAbqLgMpoNcBZWDWTXZD7970964;     xeWeRlAbqLgMpoNcBZWDWTXZD7970964 = xeWeRlAbqLgMpoNcBZWDWTXZD70711503;     xeWeRlAbqLgMpoNcBZWDWTXZD70711503 = xeWeRlAbqLgMpoNcBZWDWTXZD81540321;     xeWeRlAbqLgMpoNcBZWDWTXZD81540321 = xeWeRlAbqLgMpoNcBZWDWTXZD56190040;     xeWeRlAbqLgMpoNcBZWDWTXZD56190040 = xeWeRlAbqLgMpoNcBZWDWTXZD71293286;     xeWeRlAbqLgMpoNcBZWDWTXZD71293286 = xeWeRlAbqLgMpoNcBZWDWTXZD9291787;     xeWeRlAbqLgMpoNcBZWDWTXZD9291787 = xeWeRlAbqLgMpoNcBZWDWTXZD25657266;     xeWeRlAbqLgMpoNcBZWDWTXZD25657266 = xeWeRlAbqLgMpoNcBZWDWTXZD2453759;     xeWeRlAbqLgMpoNcBZWDWTXZD2453759 = xeWeRlAbqLgMpoNcBZWDWTXZD38430188;     xeWeRlAbqLgMpoNcBZWDWTXZD38430188 = xeWeRlAbqLgMpoNcBZWDWTXZD75629678;     xeWeRlAbqLgMpoNcBZWDWTXZD75629678 = xeWeRlAbqLgMpoNcBZWDWTXZD93879525;     xeWeRlAbqLgMpoNcBZWDWTXZD93879525 = xeWeRlAbqLgMpoNcBZWDWTXZD17228675;     xeWeRlAbqLgMpoNcBZWDWTXZD17228675 = xeWeRlAbqLgMpoNcBZWDWTXZD95558665;     xeWeRlAbqLgMpoNcBZWDWTXZD95558665 = xeWeRlAbqLgMpoNcBZWDWTXZD67529855;     xeWeRlAbqLgMpoNcBZWDWTXZD67529855 = xeWeRlAbqLgMpoNcBZWDWTXZD37725742;     xeWeRlAbqLgMpoNcBZWDWTXZD37725742 = xeWeRlAbqLgMpoNcBZWDWTXZD86025935;     xeWeRlAbqLgMpoNcBZWDWTXZD86025935 = xeWeRlAbqLgMpoNcBZWDWTXZD3743893;     xeWeRlAbqLgMpoNcBZWDWTXZD3743893 = xeWeRlAbqLgMpoNcBZWDWTXZD88876690;     xeWeRlAbqLgMpoNcBZWDWTXZD88876690 = xeWeRlAbqLgMpoNcBZWDWTXZD9593514;     xeWeRlAbqLgMpoNcBZWDWTXZD9593514 = xeWeRlAbqLgMpoNcBZWDWTXZD52512362;     xeWeRlAbqLgMpoNcBZWDWTXZD52512362 = xeWeRlAbqLgMpoNcBZWDWTXZD41376460;     xeWeRlAbqLgMpoNcBZWDWTXZD41376460 = xeWeRlAbqLgMpoNcBZWDWTXZD53748931;     xeWeRlAbqLgMpoNcBZWDWTXZD53748931 = xeWeRlAbqLgMpoNcBZWDWTXZD22226126;     xeWeRlAbqLgMpoNcBZWDWTXZD22226126 = xeWeRlAbqLgMpoNcBZWDWTXZD33275080;     xeWeRlAbqLgMpoNcBZWDWTXZD33275080 = xeWeRlAbqLgMpoNcBZWDWTXZD28782978;     xeWeRlAbqLgMpoNcBZWDWTXZD28782978 = xeWeRlAbqLgMpoNcBZWDWTXZD44231231;     xeWeRlAbqLgMpoNcBZWDWTXZD44231231 = xeWeRlAbqLgMpoNcBZWDWTXZD95794775;     xeWeRlAbqLgMpoNcBZWDWTXZD95794775 = xeWeRlAbqLgMpoNcBZWDWTXZD86216831;     xeWeRlAbqLgMpoNcBZWDWTXZD86216831 = xeWeRlAbqLgMpoNcBZWDWTXZD17514128;     xeWeRlAbqLgMpoNcBZWDWTXZD17514128 = xeWeRlAbqLgMpoNcBZWDWTXZD1164884;     xeWeRlAbqLgMpoNcBZWDWTXZD1164884 = xeWeRlAbqLgMpoNcBZWDWTXZD11345953;     xeWeRlAbqLgMpoNcBZWDWTXZD11345953 = xeWeRlAbqLgMpoNcBZWDWTXZD12512166;     xeWeRlAbqLgMpoNcBZWDWTXZD12512166 = xeWeRlAbqLgMpoNcBZWDWTXZD46172910;     xeWeRlAbqLgMpoNcBZWDWTXZD46172910 = xeWeRlAbqLgMpoNcBZWDWTXZD24047084;     xeWeRlAbqLgMpoNcBZWDWTXZD24047084 = xeWeRlAbqLgMpoNcBZWDWTXZD3584085;     xeWeRlAbqLgMpoNcBZWDWTXZD3584085 = xeWeRlAbqLgMpoNcBZWDWTXZD49249384;     xeWeRlAbqLgMpoNcBZWDWTXZD49249384 = xeWeRlAbqLgMpoNcBZWDWTXZD48565528;     xeWeRlAbqLgMpoNcBZWDWTXZD48565528 = xeWeRlAbqLgMpoNcBZWDWTXZD5376494;     xeWeRlAbqLgMpoNcBZWDWTXZD5376494 = xeWeRlAbqLgMpoNcBZWDWTXZD89994418;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wjopLHLzwessPLfdDYXkobljfAyedyTEYsxpNjjyTRPIELXHtwocsyzVy3479837() {     long FJKIhVxKoTWOqQTpYQWLcfUdq25453387 = -839349640;    long FJKIhVxKoTWOqQTpYQWLcfUdq59003660 = -993075332;    long FJKIhVxKoTWOqQTpYQWLcfUdq98318994 = -294756823;    long FJKIhVxKoTWOqQTpYQWLcfUdq29858888 = -727655947;    long FJKIhVxKoTWOqQTpYQWLcfUdq62796876 = -836655671;    long FJKIhVxKoTWOqQTpYQWLcfUdq71959771 = -602511563;    long FJKIhVxKoTWOqQTpYQWLcfUdq24184522 = -918509274;    long FJKIhVxKoTWOqQTpYQWLcfUdq86731024 = -479931253;    long FJKIhVxKoTWOqQTpYQWLcfUdq30070035 = 21483893;    long FJKIhVxKoTWOqQTpYQWLcfUdq16890044 = -779378715;    long FJKIhVxKoTWOqQTpYQWLcfUdq55320053 = -861605197;    long FJKIhVxKoTWOqQTpYQWLcfUdq48907268 = -384808301;    long FJKIhVxKoTWOqQTpYQWLcfUdq424543 = -541352311;    long FJKIhVxKoTWOqQTpYQWLcfUdq97322750 = -408813151;    long FJKIhVxKoTWOqQTpYQWLcfUdq7762200 = -532540572;    long FJKIhVxKoTWOqQTpYQWLcfUdq18758465 = -951117854;    long FJKIhVxKoTWOqQTpYQWLcfUdq83283736 = -208944869;    long FJKIhVxKoTWOqQTpYQWLcfUdq4007619 = -476985716;    long FJKIhVxKoTWOqQTpYQWLcfUdq87800072 = -783224273;    long FJKIhVxKoTWOqQTpYQWLcfUdq74640308 = -895643414;    long FJKIhVxKoTWOqQTpYQWLcfUdq92171765 = -355797005;    long FJKIhVxKoTWOqQTpYQWLcfUdq61108153 = -788953690;    long FJKIhVxKoTWOqQTpYQWLcfUdq86657164 = -489165070;    long FJKIhVxKoTWOqQTpYQWLcfUdq59103371 = 23020168;    long FJKIhVxKoTWOqQTpYQWLcfUdq25181316 = -89649263;    long FJKIhVxKoTWOqQTpYQWLcfUdq19354043 = -278658456;    long FJKIhVxKoTWOqQTpYQWLcfUdq72309315 = -99163158;    long FJKIhVxKoTWOqQTpYQWLcfUdq93058200 = -274731216;    long FJKIhVxKoTWOqQTpYQWLcfUdq63296714 = -792481399;    long FJKIhVxKoTWOqQTpYQWLcfUdq63374337 = -247879779;    long FJKIhVxKoTWOqQTpYQWLcfUdq39030243 = -848577011;    long FJKIhVxKoTWOqQTpYQWLcfUdq98771296 = -899731476;    long FJKIhVxKoTWOqQTpYQWLcfUdq89263843 = -735531489;    long FJKIhVxKoTWOqQTpYQWLcfUdq82646537 = 17347575;    long FJKIhVxKoTWOqQTpYQWLcfUdq84333075 = -600383915;    long FJKIhVxKoTWOqQTpYQWLcfUdq98674768 = -996512927;    long FJKIhVxKoTWOqQTpYQWLcfUdq46198792 = -657970312;    long FJKIhVxKoTWOqQTpYQWLcfUdq3033526 = -621009646;    long FJKIhVxKoTWOqQTpYQWLcfUdq40758463 = -328581205;    long FJKIhVxKoTWOqQTpYQWLcfUdq34292600 = -880611492;    long FJKIhVxKoTWOqQTpYQWLcfUdq18696032 = -329389495;    long FJKIhVxKoTWOqQTpYQWLcfUdq920175 = -442235423;    long FJKIhVxKoTWOqQTpYQWLcfUdq9344266 = -476452542;    long FJKIhVxKoTWOqQTpYQWLcfUdq70237187 = -435898160;    long FJKIhVxKoTWOqQTpYQWLcfUdq61582992 = -918528545;    long FJKIhVxKoTWOqQTpYQWLcfUdq74248002 = -225580696;    long FJKIhVxKoTWOqQTpYQWLcfUdq18407521 = -281832836;    long FJKIhVxKoTWOqQTpYQWLcfUdq77102691 = -509271372;    long FJKIhVxKoTWOqQTpYQWLcfUdq33845982 = -396987506;    long FJKIhVxKoTWOqQTpYQWLcfUdq87409157 = -667818556;    long FJKIhVxKoTWOqQTpYQWLcfUdq16385524 = -827788318;    long FJKIhVxKoTWOqQTpYQWLcfUdq70657403 = -670669775;    long FJKIhVxKoTWOqQTpYQWLcfUdq786450 = -747641485;    long FJKIhVxKoTWOqQTpYQWLcfUdq48806448 = -88205347;    long FJKIhVxKoTWOqQTpYQWLcfUdq11308072 = -488826404;    long FJKIhVxKoTWOqQTpYQWLcfUdq64345234 = 49604050;    long FJKIhVxKoTWOqQTpYQWLcfUdq72346495 = -403910263;    long FJKIhVxKoTWOqQTpYQWLcfUdq39215623 = -217776991;    long FJKIhVxKoTWOqQTpYQWLcfUdq4677573 = -538006684;    long FJKIhVxKoTWOqQTpYQWLcfUdq43442834 = -457997215;    long FJKIhVxKoTWOqQTpYQWLcfUdq99650455 = -403348405;    long FJKIhVxKoTWOqQTpYQWLcfUdq31126322 = -543778058;    long FJKIhVxKoTWOqQTpYQWLcfUdq23434310 = -687449854;    long FJKIhVxKoTWOqQTpYQWLcfUdq66695697 = -730636328;    long FJKIhVxKoTWOqQTpYQWLcfUdq77859801 = -930801704;    long FJKIhVxKoTWOqQTpYQWLcfUdq56548756 = -961873722;    long FJKIhVxKoTWOqQTpYQWLcfUdq59643424 = -649276812;    long FJKIhVxKoTWOqQTpYQWLcfUdq17778006 = -458699886;    long FJKIhVxKoTWOqQTpYQWLcfUdq12989676 = -808429236;    long FJKIhVxKoTWOqQTpYQWLcfUdq9087431 = -536027645;    long FJKIhVxKoTWOqQTpYQWLcfUdq72559672 = -193147542;    long FJKIhVxKoTWOqQTpYQWLcfUdq80250211 = -587935224;    long FJKIhVxKoTWOqQTpYQWLcfUdq63249155 = -48404511;    long FJKIhVxKoTWOqQTpYQWLcfUdq53507472 = -902612781;    long FJKIhVxKoTWOqQTpYQWLcfUdq55944276 = -466253919;    long FJKIhVxKoTWOqQTpYQWLcfUdq91251590 = -913561583;    long FJKIhVxKoTWOqQTpYQWLcfUdq51763888 = -212501149;    long FJKIhVxKoTWOqQTpYQWLcfUdq16419978 = 46733089;    long FJKIhVxKoTWOqQTpYQWLcfUdq97520378 = -58451288;    long FJKIhVxKoTWOqQTpYQWLcfUdq50933313 = -864068567;    long FJKIhVxKoTWOqQTpYQWLcfUdq946522 = -996825621;    long FJKIhVxKoTWOqQTpYQWLcfUdq95206624 = -589891787;    long FJKIhVxKoTWOqQTpYQWLcfUdq59212219 = -877743711;    long FJKIhVxKoTWOqQTpYQWLcfUdq75887557 = -24662843;    long FJKIhVxKoTWOqQTpYQWLcfUdq46988813 = -420091462;    long FJKIhVxKoTWOqQTpYQWLcfUdq68372839 = -77907237;    long FJKIhVxKoTWOqQTpYQWLcfUdq97984847 = -52089991;    long FJKIhVxKoTWOqQTpYQWLcfUdq40457396 = -547326142;    long FJKIhVxKoTWOqQTpYQWLcfUdq71338466 = -493826022;    long FJKIhVxKoTWOqQTpYQWLcfUdq19987842 = -549987965;    long FJKIhVxKoTWOqQTpYQWLcfUdq26328273 = -492602665;    long FJKIhVxKoTWOqQTpYQWLcfUdq6983169 = -340193321;    long FJKIhVxKoTWOqQTpYQWLcfUdq98355952 = 16997037;    long FJKIhVxKoTWOqQTpYQWLcfUdq97315629 = -870583991;    long FJKIhVxKoTWOqQTpYQWLcfUdq34642145 = -377263087;    long FJKIhVxKoTWOqQTpYQWLcfUdq87569710 = -785611438;    long FJKIhVxKoTWOqQTpYQWLcfUdq77485864 = -754785569;    long FJKIhVxKoTWOqQTpYQWLcfUdq42648568 = -745816214;    long FJKIhVxKoTWOqQTpYQWLcfUdq92377385 = -505096456;    long FJKIhVxKoTWOqQTpYQWLcfUdq5034236 = -839349640;     FJKIhVxKoTWOqQTpYQWLcfUdq25453387 = FJKIhVxKoTWOqQTpYQWLcfUdq59003660;     FJKIhVxKoTWOqQTpYQWLcfUdq59003660 = FJKIhVxKoTWOqQTpYQWLcfUdq98318994;     FJKIhVxKoTWOqQTpYQWLcfUdq98318994 = FJKIhVxKoTWOqQTpYQWLcfUdq29858888;     FJKIhVxKoTWOqQTpYQWLcfUdq29858888 = FJKIhVxKoTWOqQTpYQWLcfUdq62796876;     FJKIhVxKoTWOqQTpYQWLcfUdq62796876 = FJKIhVxKoTWOqQTpYQWLcfUdq71959771;     FJKIhVxKoTWOqQTpYQWLcfUdq71959771 = FJKIhVxKoTWOqQTpYQWLcfUdq24184522;     FJKIhVxKoTWOqQTpYQWLcfUdq24184522 = FJKIhVxKoTWOqQTpYQWLcfUdq86731024;     FJKIhVxKoTWOqQTpYQWLcfUdq86731024 = FJKIhVxKoTWOqQTpYQWLcfUdq30070035;     FJKIhVxKoTWOqQTpYQWLcfUdq30070035 = FJKIhVxKoTWOqQTpYQWLcfUdq16890044;     FJKIhVxKoTWOqQTpYQWLcfUdq16890044 = FJKIhVxKoTWOqQTpYQWLcfUdq55320053;     FJKIhVxKoTWOqQTpYQWLcfUdq55320053 = FJKIhVxKoTWOqQTpYQWLcfUdq48907268;     FJKIhVxKoTWOqQTpYQWLcfUdq48907268 = FJKIhVxKoTWOqQTpYQWLcfUdq424543;     FJKIhVxKoTWOqQTpYQWLcfUdq424543 = FJKIhVxKoTWOqQTpYQWLcfUdq97322750;     FJKIhVxKoTWOqQTpYQWLcfUdq97322750 = FJKIhVxKoTWOqQTpYQWLcfUdq7762200;     FJKIhVxKoTWOqQTpYQWLcfUdq7762200 = FJKIhVxKoTWOqQTpYQWLcfUdq18758465;     FJKIhVxKoTWOqQTpYQWLcfUdq18758465 = FJKIhVxKoTWOqQTpYQWLcfUdq83283736;     FJKIhVxKoTWOqQTpYQWLcfUdq83283736 = FJKIhVxKoTWOqQTpYQWLcfUdq4007619;     FJKIhVxKoTWOqQTpYQWLcfUdq4007619 = FJKIhVxKoTWOqQTpYQWLcfUdq87800072;     FJKIhVxKoTWOqQTpYQWLcfUdq87800072 = FJKIhVxKoTWOqQTpYQWLcfUdq74640308;     FJKIhVxKoTWOqQTpYQWLcfUdq74640308 = FJKIhVxKoTWOqQTpYQWLcfUdq92171765;     FJKIhVxKoTWOqQTpYQWLcfUdq92171765 = FJKIhVxKoTWOqQTpYQWLcfUdq61108153;     FJKIhVxKoTWOqQTpYQWLcfUdq61108153 = FJKIhVxKoTWOqQTpYQWLcfUdq86657164;     FJKIhVxKoTWOqQTpYQWLcfUdq86657164 = FJKIhVxKoTWOqQTpYQWLcfUdq59103371;     FJKIhVxKoTWOqQTpYQWLcfUdq59103371 = FJKIhVxKoTWOqQTpYQWLcfUdq25181316;     FJKIhVxKoTWOqQTpYQWLcfUdq25181316 = FJKIhVxKoTWOqQTpYQWLcfUdq19354043;     FJKIhVxKoTWOqQTpYQWLcfUdq19354043 = FJKIhVxKoTWOqQTpYQWLcfUdq72309315;     FJKIhVxKoTWOqQTpYQWLcfUdq72309315 = FJKIhVxKoTWOqQTpYQWLcfUdq93058200;     FJKIhVxKoTWOqQTpYQWLcfUdq93058200 = FJKIhVxKoTWOqQTpYQWLcfUdq63296714;     FJKIhVxKoTWOqQTpYQWLcfUdq63296714 = FJKIhVxKoTWOqQTpYQWLcfUdq63374337;     FJKIhVxKoTWOqQTpYQWLcfUdq63374337 = FJKIhVxKoTWOqQTpYQWLcfUdq39030243;     FJKIhVxKoTWOqQTpYQWLcfUdq39030243 = FJKIhVxKoTWOqQTpYQWLcfUdq98771296;     FJKIhVxKoTWOqQTpYQWLcfUdq98771296 = FJKIhVxKoTWOqQTpYQWLcfUdq89263843;     FJKIhVxKoTWOqQTpYQWLcfUdq89263843 = FJKIhVxKoTWOqQTpYQWLcfUdq82646537;     FJKIhVxKoTWOqQTpYQWLcfUdq82646537 = FJKIhVxKoTWOqQTpYQWLcfUdq84333075;     FJKIhVxKoTWOqQTpYQWLcfUdq84333075 = FJKIhVxKoTWOqQTpYQWLcfUdq98674768;     FJKIhVxKoTWOqQTpYQWLcfUdq98674768 = FJKIhVxKoTWOqQTpYQWLcfUdq46198792;     FJKIhVxKoTWOqQTpYQWLcfUdq46198792 = FJKIhVxKoTWOqQTpYQWLcfUdq3033526;     FJKIhVxKoTWOqQTpYQWLcfUdq3033526 = FJKIhVxKoTWOqQTpYQWLcfUdq40758463;     FJKIhVxKoTWOqQTpYQWLcfUdq40758463 = FJKIhVxKoTWOqQTpYQWLcfUdq34292600;     FJKIhVxKoTWOqQTpYQWLcfUdq34292600 = FJKIhVxKoTWOqQTpYQWLcfUdq18696032;     FJKIhVxKoTWOqQTpYQWLcfUdq18696032 = FJKIhVxKoTWOqQTpYQWLcfUdq920175;     FJKIhVxKoTWOqQTpYQWLcfUdq920175 = FJKIhVxKoTWOqQTpYQWLcfUdq9344266;     FJKIhVxKoTWOqQTpYQWLcfUdq9344266 = FJKIhVxKoTWOqQTpYQWLcfUdq70237187;     FJKIhVxKoTWOqQTpYQWLcfUdq70237187 = FJKIhVxKoTWOqQTpYQWLcfUdq61582992;     FJKIhVxKoTWOqQTpYQWLcfUdq61582992 = FJKIhVxKoTWOqQTpYQWLcfUdq74248002;     FJKIhVxKoTWOqQTpYQWLcfUdq74248002 = FJKIhVxKoTWOqQTpYQWLcfUdq18407521;     FJKIhVxKoTWOqQTpYQWLcfUdq18407521 = FJKIhVxKoTWOqQTpYQWLcfUdq77102691;     FJKIhVxKoTWOqQTpYQWLcfUdq77102691 = FJKIhVxKoTWOqQTpYQWLcfUdq33845982;     FJKIhVxKoTWOqQTpYQWLcfUdq33845982 = FJKIhVxKoTWOqQTpYQWLcfUdq87409157;     FJKIhVxKoTWOqQTpYQWLcfUdq87409157 = FJKIhVxKoTWOqQTpYQWLcfUdq16385524;     FJKIhVxKoTWOqQTpYQWLcfUdq16385524 = FJKIhVxKoTWOqQTpYQWLcfUdq70657403;     FJKIhVxKoTWOqQTpYQWLcfUdq70657403 = FJKIhVxKoTWOqQTpYQWLcfUdq786450;     FJKIhVxKoTWOqQTpYQWLcfUdq786450 = FJKIhVxKoTWOqQTpYQWLcfUdq48806448;     FJKIhVxKoTWOqQTpYQWLcfUdq48806448 = FJKIhVxKoTWOqQTpYQWLcfUdq11308072;     FJKIhVxKoTWOqQTpYQWLcfUdq11308072 = FJKIhVxKoTWOqQTpYQWLcfUdq64345234;     FJKIhVxKoTWOqQTpYQWLcfUdq64345234 = FJKIhVxKoTWOqQTpYQWLcfUdq72346495;     FJKIhVxKoTWOqQTpYQWLcfUdq72346495 = FJKIhVxKoTWOqQTpYQWLcfUdq39215623;     FJKIhVxKoTWOqQTpYQWLcfUdq39215623 = FJKIhVxKoTWOqQTpYQWLcfUdq4677573;     FJKIhVxKoTWOqQTpYQWLcfUdq4677573 = FJKIhVxKoTWOqQTpYQWLcfUdq43442834;     FJKIhVxKoTWOqQTpYQWLcfUdq43442834 = FJKIhVxKoTWOqQTpYQWLcfUdq99650455;     FJKIhVxKoTWOqQTpYQWLcfUdq99650455 = FJKIhVxKoTWOqQTpYQWLcfUdq31126322;     FJKIhVxKoTWOqQTpYQWLcfUdq31126322 = FJKIhVxKoTWOqQTpYQWLcfUdq23434310;     FJKIhVxKoTWOqQTpYQWLcfUdq23434310 = FJKIhVxKoTWOqQTpYQWLcfUdq66695697;     FJKIhVxKoTWOqQTpYQWLcfUdq66695697 = FJKIhVxKoTWOqQTpYQWLcfUdq77859801;     FJKIhVxKoTWOqQTpYQWLcfUdq77859801 = FJKIhVxKoTWOqQTpYQWLcfUdq56548756;     FJKIhVxKoTWOqQTpYQWLcfUdq56548756 = FJKIhVxKoTWOqQTpYQWLcfUdq59643424;     FJKIhVxKoTWOqQTpYQWLcfUdq59643424 = FJKIhVxKoTWOqQTpYQWLcfUdq17778006;     FJKIhVxKoTWOqQTpYQWLcfUdq17778006 = FJKIhVxKoTWOqQTpYQWLcfUdq12989676;     FJKIhVxKoTWOqQTpYQWLcfUdq12989676 = FJKIhVxKoTWOqQTpYQWLcfUdq9087431;     FJKIhVxKoTWOqQTpYQWLcfUdq9087431 = FJKIhVxKoTWOqQTpYQWLcfUdq72559672;     FJKIhVxKoTWOqQTpYQWLcfUdq72559672 = FJKIhVxKoTWOqQTpYQWLcfUdq80250211;     FJKIhVxKoTWOqQTpYQWLcfUdq80250211 = FJKIhVxKoTWOqQTpYQWLcfUdq63249155;     FJKIhVxKoTWOqQTpYQWLcfUdq63249155 = FJKIhVxKoTWOqQTpYQWLcfUdq53507472;     FJKIhVxKoTWOqQTpYQWLcfUdq53507472 = FJKIhVxKoTWOqQTpYQWLcfUdq55944276;     FJKIhVxKoTWOqQTpYQWLcfUdq55944276 = FJKIhVxKoTWOqQTpYQWLcfUdq91251590;     FJKIhVxKoTWOqQTpYQWLcfUdq91251590 = FJKIhVxKoTWOqQTpYQWLcfUdq51763888;     FJKIhVxKoTWOqQTpYQWLcfUdq51763888 = FJKIhVxKoTWOqQTpYQWLcfUdq16419978;     FJKIhVxKoTWOqQTpYQWLcfUdq16419978 = FJKIhVxKoTWOqQTpYQWLcfUdq97520378;     FJKIhVxKoTWOqQTpYQWLcfUdq97520378 = FJKIhVxKoTWOqQTpYQWLcfUdq50933313;     FJKIhVxKoTWOqQTpYQWLcfUdq50933313 = FJKIhVxKoTWOqQTpYQWLcfUdq946522;     FJKIhVxKoTWOqQTpYQWLcfUdq946522 = FJKIhVxKoTWOqQTpYQWLcfUdq95206624;     FJKIhVxKoTWOqQTpYQWLcfUdq95206624 = FJKIhVxKoTWOqQTpYQWLcfUdq59212219;     FJKIhVxKoTWOqQTpYQWLcfUdq59212219 = FJKIhVxKoTWOqQTpYQWLcfUdq75887557;     FJKIhVxKoTWOqQTpYQWLcfUdq75887557 = FJKIhVxKoTWOqQTpYQWLcfUdq46988813;     FJKIhVxKoTWOqQTpYQWLcfUdq46988813 = FJKIhVxKoTWOqQTpYQWLcfUdq68372839;     FJKIhVxKoTWOqQTpYQWLcfUdq68372839 = FJKIhVxKoTWOqQTpYQWLcfUdq97984847;     FJKIhVxKoTWOqQTpYQWLcfUdq97984847 = FJKIhVxKoTWOqQTpYQWLcfUdq40457396;     FJKIhVxKoTWOqQTpYQWLcfUdq40457396 = FJKIhVxKoTWOqQTpYQWLcfUdq71338466;     FJKIhVxKoTWOqQTpYQWLcfUdq71338466 = FJKIhVxKoTWOqQTpYQWLcfUdq19987842;     FJKIhVxKoTWOqQTpYQWLcfUdq19987842 = FJKIhVxKoTWOqQTpYQWLcfUdq26328273;     FJKIhVxKoTWOqQTpYQWLcfUdq26328273 = FJKIhVxKoTWOqQTpYQWLcfUdq6983169;     FJKIhVxKoTWOqQTpYQWLcfUdq6983169 = FJKIhVxKoTWOqQTpYQWLcfUdq98355952;     FJKIhVxKoTWOqQTpYQWLcfUdq98355952 = FJKIhVxKoTWOqQTpYQWLcfUdq97315629;     FJKIhVxKoTWOqQTpYQWLcfUdq97315629 = FJKIhVxKoTWOqQTpYQWLcfUdq34642145;     FJKIhVxKoTWOqQTpYQWLcfUdq34642145 = FJKIhVxKoTWOqQTpYQWLcfUdq87569710;     FJKIhVxKoTWOqQTpYQWLcfUdq87569710 = FJKIhVxKoTWOqQTpYQWLcfUdq77485864;     FJKIhVxKoTWOqQTpYQWLcfUdq77485864 = FJKIhVxKoTWOqQTpYQWLcfUdq42648568;     FJKIhVxKoTWOqQTpYQWLcfUdq42648568 = FJKIhVxKoTWOqQTpYQWLcfUdq92377385;     FJKIhVxKoTWOqQTpYQWLcfUdq92377385 = FJKIhVxKoTWOqQTpYQWLcfUdq5034236;     FJKIhVxKoTWOqQTpYQWLcfUdq5034236 = FJKIhVxKoTWOqQTpYQWLcfUdq25453387;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void SijSfxqbjCRjQZkYKxeYpxgpUITZmXckkeblsuNYQKncfPZcFNWuxbKVC18528905() {     long uxXeQpLahzlxygQkFHfJDKEjq31570494 = -951251528;    long uxXeQpLahzlxygQkFHfJDKEjq2376940 = -702675113;    long uxXeQpLahzlxygQkFHfJDKEjq14361178 = -445589744;    long uxXeQpLahzlxygQkFHfJDKEjq56933669 = -918404577;    long uxXeQpLahzlxygQkFHfJDKEjq31692365 = -257305542;    long uxXeQpLahzlxygQkFHfJDKEjq63376973 = -867007798;    long uxXeQpLahzlxygQkFHfJDKEjq84673488 = 42525749;    long uxXeQpLahzlxygQkFHfJDKEjq36490915 = -766805166;    long uxXeQpLahzlxygQkFHfJDKEjq94712529 = -846548773;    long uxXeQpLahzlxygQkFHfJDKEjq58119703 = -8354192;    long uxXeQpLahzlxygQkFHfJDKEjq15430344 = -739042784;    long uxXeQpLahzlxygQkFHfJDKEjq80730310 = -829214502;    long uxXeQpLahzlxygQkFHfJDKEjq86633661 = -981243400;    long uxXeQpLahzlxygQkFHfJDKEjq80466427 = -941051718;    long uxXeQpLahzlxygQkFHfJDKEjq3504627 = -123002738;    long uxXeQpLahzlxygQkFHfJDKEjq60263858 = -924117397;    long uxXeQpLahzlxygQkFHfJDKEjq77119739 = -825489982;    long uxXeQpLahzlxygQkFHfJDKEjq1060772 = -142508359;    long uxXeQpLahzlxygQkFHfJDKEjq49629914 = -88993369;    long uxXeQpLahzlxygQkFHfJDKEjq55190473 = -152546333;    long uxXeQpLahzlxygQkFHfJDKEjq80724958 = -211284460;    long uxXeQpLahzlxygQkFHfJDKEjq47629177 = -696883406;    long uxXeQpLahzlxygQkFHfJDKEjq22247957 = -235682557;    long uxXeQpLahzlxygQkFHfJDKEjq43095745 = -199284820;    long uxXeQpLahzlxygQkFHfJDKEjq68880965 = -462845296;    long uxXeQpLahzlxygQkFHfJDKEjq44075718 = -157313780;    long uxXeQpLahzlxygQkFHfJDKEjq70769093 = 174639;    long uxXeQpLahzlxygQkFHfJDKEjq6165326 = -340660170;    long uxXeQpLahzlxygQkFHfJDKEjq29428970 = 85135896;    long uxXeQpLahzlxygQkFHfJDKEjq31989974 = -65350647;    long uxXeQpLahzlxygQkFHfJDKEjq31272792 = -761897949;    long uxXeQpLahzlxygQkFHfJDKEjq96381918 = -609178291;    long uxXeQpLahzlxygQkFHfJDKEjq98974792 = -628144860;    long uxXeQpLahzlxygQkFHfJDKEjq77477101 = -834194190;    long uxXeQpLahzlxygQkFHfJDKEjq45807728 = -139117020;    long uxXeQpLahzlxygQkFHfJDKEjq67400682 = -110539035;    long uxXeQpLahzlxygQkFHfJDKEjq27460727 = -611606182;    long uxXeQpLahzlxygQkFHfJDKEjq37123738 = -392515656;    long uxXeQpLahzlxygQkFHfJDKEjq14368717 = -322504702;    long uxXeQpLahzlxygQkFHfJDKEjq21794538 = -254050715;    long uxXeQpLahzlxygQkFHfJDKEjq24365256 = -394663389;    long uxXeQpLahzlxygQkFHfJDKEjq33070632 = -712377701;    long uxXeQpLahzlxygQkFHfJDKEjq87411243 = -557257126;    long uxXeQpLahzlxygQkFHfJDKEjq57644928 = -455241098;    long uxXeQpLahzlxygQkFHfJDKEjq73535457 = -580426700;    long uxXeQpLahzlxygQkFHfJDKEjq86187197 = -210796813;    long uxXeQpLahzlxygQkFHfJDKEjq36186095 = -400608373;    long uxXeQpLahzlxygQkFHfJDKEjq85059632 = -519166904;    long uxXeQpLahzlxygQkFHfJDKEjq43521710 = -482724494;    long uxXeQpLahzlxygQkFHfJDKEjq320810 = -754829364;    long uxXeQpLahzlxygQkFHfJDKEjq52086202 = -670081989;    long uxXeQpLahzlxygQkFHfJDKEjq81467122 = -471396095;    long uxXeQpLahzlxygQkFHfJDKEjq49034906 = -539431073;    long uxXeQpLahzlxygQkFHfJDKEjq44775328 = -408675493;    long uxXeQpLahzlxygQkFHfJDKEjq37803946 = -89358186;    long uxXeQpLahzlxygQkFHfJDKEjq83941316 = -154368123;    long uxXeQpLahzlxygQkFHfJDKEjq80128983 = -366992557;    long uxXeQpLahzlxygQkFHfJDKEjq71265433 = -146304924;    long uxXeQpLahzlxygQkFHfJDKEjq88052703 = -355559281;    long uxXeQpLahzlxygQkFHfJDKEjq87616646 = 8237;    long uxXeQpLahzlxygQkFHfJDKEjq92607879 = -767182437;    long uxXeQpLahzlxygQkFHfJDKEjq78508162 = -616814081;    long uxXeQpLahzlxygQkFHfJDKEjq7061946 = -751941063;    long uxXeQpLahzlxygQkFHfJDKEjq62722556 = -681198126;    long uxXeQpLahzlxygQkFHfJDKEjq26846912 = -246456244;    long uxXeQpLahzlxygQkFHfJDKEjq19048425 = -29864493;    long uxXeQpLahzlxygQkFHfJDKEjq81755518 = -101069643;    long uxXeQpLahzlxygQkFHfJDKEjq9156560 = -47049210;    long uxXeQpLahzlxygQkFHfJDKEjq34658700 = -701934699;    long uxXeQpLahzlxygQkFHfJDKEjq36103945 = 87536296;    long uxXeQpLahzlxygQkFHfJDKEjq32803132 = -212511216;    long uxXeQpLahzlxygQkFHfJDKEjq39996002 = -332974327;    long uxXeQpLahzlxygQkFHfJDKEjq86692054 = -820003657;    long uxXeQpLahzlxygQkFHfJDKEjq27835376 = -834942655;    long uxXeQpLahzlxygQkFHfJDKEjq30825217 = -757882944;    long uxXeQpLahzlxygQkFHfJDKEjq47654327 = -498906760;    long uxXeQpLahzlxygQkFHfJDKEjq60217933 = -39626281;    long uxXeQpLahzlxygQkFHfJDKEjq64603029 = -780441459;    long uxXeQpLahzlxygQkFHfJDKEjq69560287 = -618858121;    long uxXeQpLahzlxygQkFHfJDKEjq82693768 = -152048484;    long uxXeQpLahzlxygQkFHfJDKEjq7889623 = -756705407;    long uxXeQpLahzlxygQkFHfJDKEjq85709461 = -480658457;    long uxXeQpLahzlxygQkFHfJDKEjq62643615 = -857935677;    long uxXeQpLahzlxygQkFHfJDKEjq29108160 = -160034740;    long uxXeQpLahzlxygQkFHfJDKEjq79903771 = -395268658;    long uxXeQpLahzlxygQkFHfJDKEjq49805669 = -190501855;    long uxXeQpLahzlxygQkFHfJDKEjq47347012 = 30252781;    long uxXeQpLahzlxygQkFHfJDKEjq54199464 = -119469368;    long uxXeQpLahzlxygQkFHfJDKEjq39673156 = -644836005;    long uxXeQpLahzlxygQkFHfJDKEjq61866411 = -984748898;    long uxXeQpLahzlxygQkFHfJDKEjq87271698 = -743546479;    long uxXeQpLahzlxygQkFHfJDKEjq56195293 = -365301258;    long uxXeQpLahzlxygQkFHfJDKEjq49071034 = 63043625;    long uxXeQpLahzlxygQkFHfJDKEjq26752070 = -222512940;    long uxXeQpLahzlxygQkFHfJDKEjq29186658 = -486868278;    long uxXeQpLahzlxygQkFHfJDKEjq45857094 = -777849308;    long uxXeQpLahzlxygQkFHfJDKEjq26008686 = -960436639;    long uxXeQpLahzlxygQkFHfJDKEjq24688687 = -876059000;    long uxXeQpLahzlxygQkFHfJDKEjq30798016 = -108784855;    long uxXeQpLahzlxygQkFHfJDKEjq54487032 = -951251528;     uxXeQpLahzlxygQkFHfJDKEjq31570494 = uxXeQpLahzlxygQkFHfJDKEjq2376940;     uxXeQpLahzlxygQkFHfJDKEjq2376940 = uxXeQpLahzlxygQkFHfJDKEjq14361178;     uxXeQpLahzlxygQkFHfJDKEjq14361178 = uxXeQpLahzlxygQkFHfJDKEjq56933669;     uxXeQpLahzlxygQkFHfJDKEjq56933669 = uxXeQpLahzlxygQkFHfJDKEjq31692365;     uxXeQpLahzlxygQkFHfJDKEjq31692365 = uxXeQpLahzlxygQkFHfJDKEjq63376973;     uxXeQpLahzlxygQkFHfJDKEjq63376973 = uxXeQpLahzlxygQkFHfJDKEjq84673488;     uxXeQpLahzlxygQkFHfJDKEjq84673488 = uxXeQpLahzlxygQkFHfJDKEjq36490915;     uxXeQpLahzlxygQkFHfJDKEjq36490915 = uxXeQpLahzlxygQkFHfJDKEjq94712529;     uxXeQpLahzlxygQkFHfJDKEjq94712529 = uxXeQpLahzlxygQkFHfJDKEjq58119703;     uxXeQpLahzlxygQkFHfJDKEjq58119703 = uxXeQpLahzlxygQkFHfJDKEjq15430344;     uxXeQpLahzlxygQkFHfJDKEjq15430344 = uxXeQpLahzlxygQkFHfJDKEjq80730310;     uxXeQpLahzlxygQkFHfJDKEjq80730310 = uxXeQpLahzlxygQkFHfJDKEjq86633661;     uxXeQpLahzlxygQkFHfJDKEjq86633661 = uxXeQpLahzlxygQkFHfJDKEjq80466427;     uxXeQpLahzlxygQkFHfJDKEjq80466427 = uxXeQpLahzlxygQkFHfJDKEjq3504627;     uxXeQpLahzlxygQkFHfJDKEjq3504627 = uxXeQpLahzlxygQkFHfJDKEjq60263858;     uxXeQpLahzlxygQkFHfJDKEjq60263858 = uxXeQpLahzlxygQkFHfJDKEjq77119739;     uxXeQpLahzlxygQkFHfJDKEjq77119739 = uxXeQpLahzlxygQkFHfJDKEjq1060772;     uxXeQpLahzlxygQkFHfJDKEjq1060772 = uxXeQpLahzlxygQkFHfJDKEjq49629914;     uxXeQpLahzlxygQkFHfJDKEjq49629914 = uxXeQpLahzlxygQkFHfJDKEjq55190473;     uxXeQpLahzlxygQkFHfJDKEjq55190473 = uxXeQpLahzlxygQkFHfJDKEjq80724958;     uxXeQpLahzlxygQkFHfJDKEjq80724958 = uxXeQpLahzlxygQkFHfJDKEjq47629177;     uxXeQpLahzlxygQkFHfJDKEjq47629177 = uxXeQpLahzlxygQkFHfJDKEjq22247957;     uxXeQpLahzlxygQkFHfJDKEjq22247957 = uxXeQpLahzlxygQkFHfJDKEjq43095745;     uxXeQpLahzlxygQkFHfJDKEjq43095745 = uxXeQpLahzlxygQkFHfJDKEjq68880965;     uxXeQpLahzlxygQkFHfJDKEjq68880965 = uxXeQpLahzlxygQkFHfJDKEjq44075718;     uxXeQpLahzlxygQkFHfJDKEjq44075718 = uxXeQpLahzlxygQkFHfJDKEjq70769093;     uxXeQpLahzlxygQkFHfJDKEjq70769093 = uxXeQpLahzlxygQkFHfJDKEjq6165326;     uxXeQpLahzlxygQkFHfJDKEjq6165326 = uxXeQpLahzlxygQkFHfJDKEjq29428970;     uxXeQpLahzlxygQkFHfJDKEjq29428970 = uxXeQpLahzlxygQkFHfJDKEjq31989974;     uxXeQpLahzlxygQkFHfJDKEjq31989974 = uxXeQpLahzlxygQkFHfJDKEjq31272792;     uxXeQpLahzlxygQkFHfJDKEjq31272792 = uxXeQpLahzlxygQkFHfJDKEjq96381918;     uxXeQpLahzlxygQkFHfJDKEjq96381918 = uxXeQpLahzlxygQkFHfJDKEjq98974792;     uxXeQpLahzlxygQkFHfJDKEjq98974792 = uxXeQpLahzlxygQkFHfJDKEjq77477101;     uxXeQpLahzlxygQkFHfJDKEjq77477101 = uxXeQpLahzlxygQkFHfJDKEjq45807728;     uxXeQpLahzlxygQkFHfJDKEjq45807728 = uxXeQpLahzlxygQkFHfJDKEjq67400682;     uxXeQpLahzlxygQkFHfJDKEjq67400682 = uxXeQpLahzlxygQkFHfJDKEjq27460727;     uxXeQpLahzlxygQkFHfJDKEjq27460727 = uxXeQpLahzlxygQkFHfJDKEjq37123738;     uxXeQpLahzlxygQkFHfJDKEjq37123738 = uxXeQpLahzlxygQkFHfJDKEjq14368717;     uxXeQpLahzlxygQkFHfJDKEjq14368717 = uxXeQpLahzlxygQkFHfJDKEjq21794538;     uxXeQpLahzlxygQkFHfJDKEjq21794538 = uxXeQpLahzlxygQkFHfJDKEjq24365256;     uxXeQpLahzlxygQkFHfJDKEjq24365256 = uxXeQpLahzlxygQkFHfJDKEjq33070632;     uxXeQpLahzlxygQkFHfJDKEjq33070632 = uxXeQpLahzlxygQkFHfJDKEjq87411243;     uxXeQpLahzlxygQkFHfJDKEjq87411243 = uxXeQpLahzlxygQkFHfJDKEjq57644928;     uxXeQpLahzlxygQkFHfJDKEjq57644928 = uxXeQpLahzlxygQkFHfJDKEjq73535457;     uxXeQpLahzlxygQkFHfJDKEjq73535457 = uxXeQpLahzlxygQkFHfJDKEjq86187197;     uxXeQpLahzlxygQkFHfJDKEjq86187197 = uxXeQpLahzlxygQkFHfJDKEjq36186095;     uxXeQpLahzlxygQkFHfJDKEjq36186095 = uxXeQpLahzlxygQkFHfJDKEjq85059632;     uxXeQpLahzlxygQkFHfJDKEjq85059632 = uxXeQpLahzlxygQkFHfJDKEjq43521710;     uxXeQpLahzlxygQkFHfJDKEjq43521710 = uxXeQpLahzlxygQkFHfJDKEjq320810;     uxXeQpLahzlxygQkFHfJDKEjq320810 = uxXeQpLahzlxygQkFHfJDKEjq52086202;     uxXeQpLahzlxygQkFHfJDKEjq52086202 = uxXeQpLahzlxygQkFHfJDKEjq81467122;     uxXeQpLahzlxygQkFHfJDKEjq81467122 = uxXeQpLahzlxygQkFHfJDKEjq49034906;     uxXeQpLahzlxygQkFHfJDKEjq49034906 = uxXeQpLahzlxygQkFHfJDKEjq44775328;     uxXeQpLahzlxygQkFHfJDKEjq44775328 = uxXeQpLahzlxygQkFHfJDKEjq37803946;     uxXeQpLahzlxygQkFHfJDKEjq37803946 = uxXeQpLahzlxygQkFHfJDKEjq83941316;     uxXeQpLahzlxygQkFHfJDKEjq83941316 = uxXeQpLahzlxygQkFHfJDKEjq80128983;     uxXeQpLahzlxygQkFHfJDKEjq80128983 = uxXeQpLahzlxygQkFHfJDKEjq71265433;     uxXeQpLahzlxygQkFHfJDKEjq71265433 = uxXeQpLahzlxygQkFHfJDKEjq88052703;     uxXeQpLahzlxygQkFHfJDKEjq88052703 = uxXeQpLahzlxygQkFHfJDKEjq87616646;     uxXeQpLahzlxygQkFHfJDKEjq87616646 = uxXeQpLahzlxygQkFHfJDKEjq92607879;     uxXeQpLahzlxygQkFHfJDKEjq92607879 = uxXeQpLahzlxygQkFHfJDKEjq78508162;     uxXeQpLahzlxygQkFHfJDKEjq78508162 = uxXeQpLahzlxygQkFHfJDKEjq7061946;     uxXeQpLahzlxygQkFHfJDKEjq7061946 = uxXeQpLahzlxygQkFHfJDKEjq62722556;     uxXeQpLahzlxygQkFHfJDKEjq62722556 = uxXeQpLahzlxygQkFHfJDKEjq26846912;     uxXeQpLahzlxygQkFHfJDKEjq26846912 = uxXeQpLahzlxygQkFHfJDKEjq19048425;     uxXeQpLahzlxygQkFHfJDKEjq19048425 = uxXeQpLahzlxygQkFHfJDKEjq81755518;     uxXeQpLahzlxygQkFHfJDKEjq81755518 = uxXeQpLahzlxygQkFHfJDKEjq9156560;     uxXeQpLahzlxygQkFHfJDKEjq9156560 = uxXeQpLahzlxygQkFHfJDKEjq34658700;     uxXeQpLahzlxygQkFHfJDKEjq34658700 = uxXeQpLahzlxygQkFHfJDKEjq36103945;     uxXeQpLahzlxygQkFHfJDKEjq36103945 = uxXeQpLahzlxygQkFHfJDKEjq32803132;     uxXeQpLahzlxygQkFHfJDKEjq32803132 = uxXeQpLahzlxygQkFHfJDKEjq39996002;     uxXeQpLahzlxygQkFHfJDKEjq39996002 = uxXeQpLahzlxygQkFHfJDKEjq86692054;     uxXeQpLahzlxygQkFHfJDKEjq86692054 = uxXeQpLahzlxygQkFHfJDKEjq27835376;     uxXeQpLahzlxygQkFHfJDKEjq27835376 = uxXeQpLahzlxygQkFHfJDKEjq30825217;     uxXeQpLahzlxygQkFHfJDKEjq30825217 = uxXeQpLahzlxygQkFHfJDKEjq47654327;     uxXeQpLahzlxygQkFHfJDKEjq47654327 = uxXeQpLahzlxygQkFHfJDKEjq60217933;     uxXeQpLahzlxygQkFHfJDKEjq60217933 = uxXeQpLahzlxygQkFHfJDKEjq64603029;     uxXeQpLahzlxygQkFHfJDKEjq64603029 = uxXeQpLahzlxygQkFHfJDKEjq69560287;     uxXeQpLahzlxygQkFHfJDKEjq69560287 = uxXeQpLahzlxygQkFHfJDKEjq82693768;     uxXeQpLahzlxygQkFHfJDKEjq82693768 = uxXeQpLahzlxygQkFHfJDKEjq7889623;     uxXeQpLahzlxygQkFHfJDKEjq7889623 = uxXeQpLahzlxygQkFHfJDKEjq85709461;     uxXeQpLahzlxygQkFHfJDKEjq85709461 = uxXeQpLahzlxygQkFHfJDKEjq62643615;     uxXeQpLahzlxygQkFHfJDKEjq62643615 = uxXeQpLahzlxygQkFHfJDKEjq29108160;     uxXeQpLahzlxygQkFHfJDKEjq29108160 = uxXeQpLahzlxygQkFHfJDKEjq79903771;     uxXeQpLahzlxygQkFHfJDKEjq79903771 = uxXeQpLahzlxygQkFHfJDKEjq49805669;     uxXeQpLahzlxygQkFHfJDKEjq49805669 = uxXeQpLahzlxygQkFHfJDKEjq47347012;     uxXeQpLahzlxygQkFHfJDKEjq47347012 = uxXeQpLahzlxygQkFHfJDKEjq54199464;     uxXeQpLahzlxygQkFHfJDKEjq54199464 = uxXeQpLahzlxygQkFHfJDKEjq39673156;     uxXeQpLahzlxygQkFHfJDKEjq39673156 = uxXeQpLahzlxygQkFHfJDKEjq61866411;     uxXeQpLahzlxygQkFHfJDKEjq61866411 = uxXeQpLahzlxygQkFHfJDKEjq87271698;     uxXeQpLahzlxygQkFHfJDKEjq87271698 = uxXeQpLahzlxygQkFHfJDKEjq56195293;     uxXeQpLahzlxygQkFHfJDKEjq56195293 = uxXeQpLahzlxygQkFHfJDKEjq49071034;     uxXeQpLahzlxygQkFHfJDKEjq49071034 = uxXeQpLahzlxygQkFHfJDKEjq26752070;     uxXeQpLahzlxygQkFHfJDKEjq26752070 = uxXeQpLahzlxygQkFHfJDKEjq29186658;     uxXeQpLahzlxygQkFHfJDKEjq29186658 = uxXeQpLahzlxygQkFHfJDKEjq45857094;     uxXeQpLahzlxygQkFHfJDKEjq45857094 = uxXeQpLahzlxygQkFHfJDKEjq26008686;     uxXeQpLahzlxygQkFHfJDKEjq26008686 = uxXeQpLahzlxygQkFHfJDKEjq24688687;     uxXeQpLahzlxygQkFHfJDKEjq24688687 = uxXeQpLahzlxygQkFHfJDKEjq30798016;     uxXeQpLahzlxygQkFHfJDKEjq30798016 = uxXeQpLahzlxygQkFHfJDKEjq54487032;     uxXeQpLahzlxygQkFHfJDKEjq54487032 = uxXeQpLahzlxygQkFHfJDKEjq31570494;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void vpdLAdkHUvNdmNpKyzJmCnLfhBPrLiFeAqVGsEedBAcACPSlPwakpIdId85820504() {     long xdyNswlqjdwsiStUfkCKLdSjd67029462 = -317528428;    long xdyNswlqjdwsiStUfkCKLdSjd15649018 = -583226720;    long xdyNswlqjdwsiStUfkCKLdSjd51747655 = -111256819;    long xdyNswlqjdwsiStUfkCKLdSjd29157024 = -739555648;    long xdyNswlqjdwsiStUfkCKLdSjd87977633 = -362904387;    long xdyNswlqjdwsiStUfkCKLdSjd99599845 = -29355693;    long xdyNswlqjdwsiStUfkCKLdSjd95330894 = -902199985;    long xdyNswlqjdwsiStUfkCKLdSjd98622475 = -411039306;    long xdyNswlqjdwsiStUfkCKLdSjd96230135 = -234880180;    long xdyNswlqjdwsiStUfkCKLdSjd73022415 = -773041190;    long xdyNswlqjdwsiStUfkCKLdSjd53612078 = -541050513;    long xdyNswlqjdwsiStUfkCKLdSjd81298458 = -693335274;    long xdyNswlqjdwsiStUfkCKLdSjd24868307 = -433255905;    long xdyNswlqjdwsiStUfkCKLdSjd33607291 = -917415128;    long xdyNswlqjdwsiStUfkCKLdSjd61699143 = -626427753;    long xdyNswlqjdwsiStUfkCKLdSjd43805159 = -559929004;    long xdyNswlqjdwsiStUfkCKLdSjd32955675 = -252464535;    long xdyNswlqjdwsiStUfkCKLdSjd820963 = -215936427;    long xdyNswlqjdwsiStUfkCKLdSjd50180244 = -405556791;    long xdyNswlqjdwsiStUfkCKLdSjd49027691 = -579107399;    long xdyNswlqjdwsiStUfkCKLdSjd93811821 = -968559149;    long xdyNswlqjdwsiStUfkCKLdSjd51050702 = -783519700;    long xdyNswlqjdwsiStUfkCKLdSjd92773336 = -973314741;    long xdyNswlqjdwsiStUfkCKLdSjd36888690 = -710109424;    long xdyNswlqjdwsiStUfkCKLdSjd76898917 = -486830495;    long xdyNswlqjdwsiStUfkCKLdSjd54773889 = -945890586;    long xdyNswlqjdwsiStUfkCKLdSjd31189668 = -906109502;    long xdyNswlqjdwsiStUfkCKLdSjd46893751 = -510432344;    long xdyNswlqjdwsiStUfkCKLdSjd76097184 = -488958906;    long xdyNswlqjdwsiStUfkCKLdSjd37523385 = -99857817;    long xdyNswlqjdwsiStUfkCKLdSjd49856023 = -213878436;    long xdyNswlqjdwsiStUfkCKLdSjd34204937 = -382149706;    long xdyNswlqjdwsiStUfkCKLdSjd11192803 = -775740837;    long xdyNswlqjdwsiStUfkCKLdSjd7225529 = -898888004;    long xdyNswlqjdwsiStUfkCKLdSjd11616182 = -90217271;    long xdyNswlqjdwsiStUfkCKLdSjd18961526 = -325104341;    long xdyNswlqjdwsiStUfkCKLdSjd76872543 = -476302222;    long xdyNswlqjdwsiStUfkCKLdSjd88339141 = -375171237;    long xdyNswlqjdwsiStUfkCKLdSjd44759278 = 26619022;    long xdyNswlqjdwsiStUfkCKLdSjd86066070 = -819313261;    long xdyNswlqjdwsiStUfkCKLdSjd57816864 = -163862303;    long xdyNswlqjdwsiStUfkCKLdSjd22435759 = -306922992;    long xdyNswlqjdwsiStUfkCKLdSjd76794622 = -110437912;    long xdyNswlqjdwsiStUfkCKLdSjd97776265 = 40426492;    long xdyNswlqjdwsiStUfkCKLdSjd73551916 = -406937861;    long xdyNswlqjdwsiStUfkCKLdSjd32148526 = -249720445;    long xdyNswlqjdwsiStUfkCKLdSjd55531258 = -884594734;    long xdyNswlqjdwsiStUfkCKLdSjd2785945 = -685693498;    long xdyNswlqjdwsiStUfkCKLdSjd66414376 = -146461374;    long xdyNswlqjdwsiStUfkCKLdSjd24850399 = -145856180;    long xdyNswlqjdwsiStUfkCKLdSjd32856926 = -544358547;    long xdyNswlqjdwsiStUfkCKLdSjd64952595 = -685048441;    long xdyNswlqjdwsiStUfkCKLdSjd17656055 = -295476627;    long xdyNswlqjdwsiStUfkCKLdSjd60767175 = -600183992;    long xdyNswlqjdwsiStUfkCKLdSjd92008682 = -435848332;    long xdyNswlqjdwsiStUfkCKLdSjd15978761 = -534008728;    long xdyNswlqjdwsiStUfkCKLdSjd22875682 = -609911979;    long xdyNswlqjdwsiStUfkCKLdSjd14858965 = -401147395;    long xdyNswlqjdwsiStUfkCKLdSjd52258107 = -152725154;    long xdyNswlqjdwsiStUfkCKLdSjd33203745 = -417013801;    long xdyNswlqjdwsiStUfkCKLdSjd68410178 = -123246192;    long xdyNswlqjdwsiStUfkCKLdSjd48437144 = -291767641;    long xdyNswlqjdwsiStUfkCKLdSjd22525292 = -922080401;    long xdyNswlqjdwsiStUfkCKLdSjd58706751 = -35022363;    long xdyNswlqjdwsiStUfkCKLdSjd23166392 = -459162754;    long xdyNswlqjdwsiStUfkCKLdSjd19407142 = -58900808;    long xdyNswlqjdwsiStUfkCKLdSjd70105655 = -917594438;    long xdyNswlqjdwsiStUfkCKLdSjd17642779 = -534367901;    long xdyNswlqjdwsiStUfkCKLdSjd21991110 = -727197858;    long xdyNswlqjdwsiStUfkCKLdSjd42737617 = -201323413;    long xdyNswlqjdwsiStUfkCKLdSjd66932616 = 16373217;    long xdyNswlqjdwsiStUfkCKLdSjd44616534 = -877293298;    long xdyNswlqjdwsiStUfkCKLdSjd56061684 = -142555449;    long xdyNswlqjdwsiStUfkCKLdSjd64114174 = -586243531;    long xdyNswlqjdwsiStUfkCKLdSjd91210827 = -315245096;    long xdyNswlqjdwsiStUfkCKLdSjd71376063 = -561636158;    long xdyNswlqjdwsiStUfkCKLdSjd74256080 = -573081789;    long xdyNswlqjdwsiStUfkCKLdSjd94997070 = -913741233;    long xdyNswlqjdwsiStUfkCKLdSjd63336774 = -203171564;    long xdyNswlqjdwsiStUfkCKLdSjd44750391 = -137110050;    long xdyNswlqjdwsiStUfkCKLdSjd99242630 = 38704147;    long xdyNswlqjdwsiStUfkCKLdSjd28403724 = -120416005;    long xdyNswlqjdwsiStUfkCKLdSjd80479374 = -263970971;    long xdyNswlqjdwsiStUfkCKLdSjd51246785 = -243102727;    long xdyNswlqjdwsiStUfkCKLdSjd4666459 = -555499271;    long xdyNswlqjdwsiStUfkCKLdSjd84903428 = -528829996;    long xdyNswlqjdwsiStUfkCKLdSjd16548882 = 13326921;    long xdyNswlqjdwsiStUfkCKLdSjd50425628 = -75556845;    long xdyNswlqjdwsiStUfkCKLdSjd15216846 = -363039672;    long xdyNswlqjdwsiStUfkCKLdSjd95637420 = -556208543;    long xdyNswlqjdwsiStUfkCKLdSjd96085843 = -715192362;    long xdyNswlqjdwsiStUfkCKLdSjd62013578 = 24845173;    long xdyNswlqjdwsiStUfkCKLdSjd36081034 = -122446083;    long xdyNswlqjdwsiStUfkCKLdSjd11555534 = -556367178;    long xdyNswlqjdwsiStUfkCKLdSjd17655893 = -596067069;    long xdyNswlqjdwsiStUfkCKLdSjd9379720 = -872094663;    long xdyNswlqjdwsiStUfkCKLdSjd99910466 = -384842592;    long xdyNswlqjdwsiStUfkCKLdSjd18087872 = 24584451;    long xdyNswlqjdwsiStUfkCKLdSjd74609873 = -500410754;    long xdyNswlqjdwsiStUfkCKLdSjd54144774 = -317528428;     xdyNswlqjdwsiStUfkCKLdSjd67029462 = xdyNswlqjdwsiStUfkCKLdSjd15649018;     xdyNswlqjdwsiStUfkCKLdSjd15649018 = xdyNswlqjdwsiStUfkCKLdSjd51747655;     xdyNswlqjdwsiStUfkCKLdSjd51747655 = xdyNswlqjdwsiStUfkCKLdSjd29157024;     xdyNswlqjdwsiStUfkCKLdSjd29157024 = xdyNswlqjdwsiStUfkCKLdSjd87977633;     xdyNswlqjdwsiStUfkCKLdSjd87977633 = xdyNswlqjdwsiStUfkCKLdSjd99599845;     xdyNswlqjdwsiStUfkCKLdSjd99599845 = xdyNswlqjdwsiStUfkCKLdSjd95330894;     xdyNswlqjdwsiStUfkCKLdSjd95330894 = xdyNswlqjdwsiStUfkCKLdSjd98622475;     xdyNswlqjdwsiStUfkCKLdSjd98622475 = xdyNswlqjdwsiStUfkCKLdSjd96230135;     xdyNswlqjdwsiStUfkCKLdSjd96230135 = xdyNswlqjdwsiStUfkCKLdSjd73022415;     xdyNswlqjdwsiStUfkCKLdSjd73022415 = xdyNswlqjdwsiStUfkCKLdSjd53612078;     xdyNswlqjdwsiStUfkCKLdSjd53612078 = xdyNswlqjdwsiStUfkCKLdSjd81298458;     xdyNswlqjdwsiStUfkCKLdSjd81298458 = xdyNswlqjdwsiStUfkCKLdSjd24868307;     xdyNswlqjdwsiStUfkCKLdSjd24868307 = xdyNswlqjdwsiStUfkCKLdSjd33607291;     xdyNswlqjdwsiStUfkCKLdSjd33607291 = xdyNswlqjdwsiStUfkCKLdSjd61699143;     xdyNswlqjdwsiStUfkCKLdSjd61699143 = xdyNswlqjdwsiStUfkCKLdSjd43805159;     xdyNswlqjdwsiStUfkCKLdSjd43805159 = xdyNswlqjdwsiStUfkCKLdSjd32955675;     xdyNswlqjdwsiStUfkCKLdSjd32955675 = xdyNswlqjdwsiStUfkCKLdSjd820963;     xdyNswlqjdwsiStUfkCKLdSjd820963 = xdyNswlqjdwsiStUfkCKLdSjd50180244;     xdyNswlqjdwsiStUfkCKLdSjd50180244 = xdyNswlqjdwsiStUfkCKLdSjd49027691;     xdyNswlqjdwsiStUfkCKLdSjd49027691 = xdyNswlqjdwsiStUfkCKLdSjd93811821;     xdyNswlqjdwsiStUfkCKLdSjd93811821 = xdyNswlqjdwsiStUfkCKLdSjd51050702;     xdyNswlqjdwsiStUfkCKLdSjd51050702 = xdyNswlqjdwsiStUfkCKLdSjd92773336;     xdyNswlqjdwsiStUfkCKLdSjd92773336 = xdyNswlqjdwsiStUfkCKLdSjd36888690;     xdyNswlqjdwsiStUfkCKLdSjd36888690 = xdyNswlqjdwsiStUfkCKLdSjd76898917;     xdyNswlqjdwsiStUfkCKLdSjd76898917 = xdyNswlqjdwsiStUfkCKLdSjd54773889;     xdyNswlqjdwsiStUfkCKLdSjd54773889 = xdyNswlqjdwsiStUfkCKLdSjd31189668;     xdyNswlqjdwsiStUfkCKLdSjd31189668 = xdyNswlqjdwsiStUfkCKLdSjd46893751;     xdyNswlqjdwsiStUfkCKLdSjd46893751 = xdyNswlqjdwsiStUfkCKLdSjd76097184;     xdyNswlqjdwsiStUfkCKLdSjd76097184 = xdyNswlqjdwsiStUfkCKLdSjd37523385;     xdyNswlqjdwsiStUfkCKLdSjd37523385 = xdyNswlqjdwsiStUfkCKLdSjd49856023;     xdyNswlqjdwsiStUfkCKLdSjd49856023 = xdyNswlqjdwsiStUfkCKLdSjd34204937;     xdyNswlqjdwsiStUfkCKLdSjd34204937 = xdyNswlqjdwsiStUfkCKLdSjd11192803;     xdyNswlqjdwsiStUfkCKLdSjd11192803 = xdyNswlqjdwsiStUfkCKLdSjd7225529;     xdyNswlqjdwsiStUfkCKLdSjd7225529 = xdyNswlqjdwsiStUfkCKLdSjd11616182;     xdyNswlqjdwsiStUfkCKLdSjd11616182 = xdyNswlqjdwsiStUfkCKLdSjd18961526;     xdyNswlqjdwsiStUfkCKLdSjd18961526 = xdyNswlqjdwsiStUfkCKLdSjd76872543;     xdyNswlqjdwsiStUfkCKLdSjd76872543 = xdyNswlqjdwsiStUfkCKLdSjd88339141;     xdyNswlqjdwsiStUfkCKLdSjd88339141 = xdyNswlqjdwsiStUfkCKLdSjd44759278;     xdyNswlqjdwsiStUfkCKLdSjd44759278 = xdyNswlqjdwsiStUfkCKLdSjd86066070;     xdyNswlqjdwsiStUfkCKLdSjd86066070 = xdyNswlqjdwsiStUfkCKLdSjd57816864;     xdyNswlqjdwsiStUfkCKLdSjd57816864 = xdyNswlqjdwsiStUfkCKLdSjd22435759;     xdyNswlqjdwsiStUfkCKLdSjd22435759 = xdyNswlqjdwsiStUfkCKLdSjd76794622;     xdyNswlqjdwsiStUfkCKLdSjd76794622 = xdyNswlqjdwsiStUfkCKLdSjd97776265;     xdyNswlqjdwsiStUfkCKLdSjd97776265 = xdyNswlqjdwsiStUfkCKLdSjd73551916;     xdyNswlqjdwsiStUfkCKLdSjd73551916 = xdyNswlqjdwsiStUfkCKLdSjd32148526;     xdyNswlqjdwsiStUfkCKLdSjd32148526 = xdyNswlqjdwsiStUfkCKLdSjd55531258;     xdyNswlqjdwsiStUfkCKLdSjd55531258 = xdyNswlqjdwsiStUfkCKLdSjd2785945;     xdyNswlqjdwsiStUfkCKLdSjd2785945 = xdyNswlqjdwsiStUfkCKLdSjd66414376;     xdyNswlqjdwsiStUfkCKLdSjd66414376 = xdyNswlqjdwsiStUfkCKLdSjd24850399;     xdyNswlqjdwsiStUfkCKLdSjd24850399 = xdyNswlqjdwsiStUfkCKLdSjd32856926;     xdyNswlqjdwsiStUfkCKLdSjd32856926 = xdyNswlqjdwsiStUfkCKLdSjd64952595;     xdyNswlqjdwsiStUfkCKLdSjd64952595 = xdyNswlqjdwsiStUfkCKLdSjd17656055;     xdyNswlqjdwsiStUfkCKLdSjd17656055 = xdyNswlqjdwsiStUfkCKLdSjd60767175;     xdyNswlqjdwsiStUfkCKLdSjd60767175 = xdyNswlqjdwsiStUfkCKLdSjd92008682;     xdyNswlqjdwsiStUfkCKLdSjd92008682 = xdyNswlqjdwsiStUfkCKLdSjd15978761;     xdyNswlqjdwsiStUfkCKLdSjd15978761 = xdyNswlqjdwsiStUfkCKLdSjd22875682;     xdyNswlqjdwsiStUfkCKLdSjd22875682 = xdyNswlqjdwsiStUfkCKLdSjd14858965;     xdyNswlqjdwsiStUfkCKLdSjd14858965 = xdyNswlqjdwsiStUfkCKLdSjd52258107;     xdyNswlqjdwsiStUfkCKLdSjd52258107 = xdyNswlqjdwsiStUfkCKLdSjd33203745;     xdyNswlqjdwsiStUfkCKLdSjd33203745 = xdyNswlqjdwsiStUfkCKLdSjd68410178;     xdyNswlqjdwsiStUfkCKLdSjd68410178 = xdyNswlqjdwsiStUfkCKLdSjd48437144;     xdyNswlqjdwsiStUfkCKLdSjd48437144 = xdyNswlqjdwsiStUfkCKLdSjd22525292;     xdyNswlqjdwsiStUfkCKLdSjd22525292 = xdyNswlqjdwsiStUfkCKLdSjd58706751;     xdyNswlqjdwsiStUfkCKLdSjd58706751 = xdyNswlqjdwsiStUfkCKLdSjd23166392;     xdyNswlqjdwsiStUfkCKLdSjd23166392 = xdyNswlqjdwsiStUfkCKLdSjd19407142;     xdyNswlqjdwsiStUfkCKLdSjd19407142 = xdyNswlqjdwsiStUfkCKLdSjd70105655;     xdyNswlqjdwsiStUfkCKLdSjd70105655 = xdyNswlqjdwsiStUfkCKLdSjd17642779;     xdyNswlqjdwsiStUfkCKLdSjd17642779 = xdyNswlqjdwsiStUfkCKLdSjd21991110;     xdyNswlqjdwsiStUfkCKLdSjd21991110 = xdyNswlqjdwsiStUfkCKLdSjd42737617;     xdyNswlqjdwsiStUfkCKLdSjd42737617 = xdyNswlqjdwsiStUfkCKLdSjd66932616;     xdyNswlqjdwsiStUfkCKLdSjd66932616 = xdyNswlqjdwsiStUfkCKLdSjd44616534;     xdyNswlqjdwsiStUfkCKLdSjd44616534 = xdyNswlqjdwsiStUfkCKLdSjd56061684;     xdyNswlqjdwsiStUfkCKLdSjd56061684 = xdyNswlqjdwsiStUfkCKLdSjd64114174;     xdyNswlqjdwsiStUfkCKLdSjd64114174 = xdyNswlqjdwsiStUfkCKLdSjd91210827;     xdyNswlqjdwsiStUfkCKLdSjd91210827 = xdyNswlqjdwsiStUfkCKLdSjd71376063;     xdyNswlqjdwsiStUfkCKLdSjd71376063 = xdyNswlqjdwsiStUfkCKLdSjd74256080;     xdyNswlqjdwsiStUfkCKLdSjd74256080 = xdyNswlqjdwsiStUfkCKLdSjd94997070;     xdyNswlqjdwsiStUfkCKLdSjd94997070 = xdyNswlqjdwsiStUfkCKLdSjd63336774;     xdyNswlqjdwsiStUfkCKLdSjd63336774 = xdyNswlqjdwsiStUfkCKLdSjd44750391;     xdyNswlqjdwsiStUfkCKLdSjd44750391 = xdyNswlqjdwsiStUfkCKLdSjd99242630;     xdyNswlqjdwsiStUfkCKLdSjd99242630 = xdyNswlqjdwsiStUfkCKLdSjd28403724;     xdyNswlqjdwsiStUfkCKLdSjd28403724 = xdyNswlqjdwsiStUfkCKLdSjd80479374;     xdyNswlqjdwsiStUfkCKLdSjd80479374 = xdyNswlqjdwsiStUfkCKLdSjd51246785;     xdyNswlqjdwsiStUfkCKLdSjd51246785 = xdyNswlqjdwsiStUfkCKLdSjd4666459;     xdyNswlqjdwsiStUfkCKLdSjd4666459 = xdyNswlqjdwsiStUfkCKLdSjd84903428;     xdyNswlqjdwsiStUfkCKLdSjd84903428 = xdyNswlqjdwsiStUfkCKLdSjd16548882;     xdyNswlqjdwsiStUfkCKLdSjd16548882 = xdyNswlqjdwsiStUfkCKLdSjd50425628;     xdyNswlqjdwsiStUfkCKLdSjd50425628 = xdyNswlqjdwsiStUfkCKLdSjd15216846;     xdyNswlqjdwsiStUfkCKLdSjd15216846 = xdyNswlqjdwsiStUfkCKLdSjd95637420;     xdyNswlqjdwsiStUfkCKLdSjd95637420 = xdyNswlqjdwsiStUfkCKLdSjd96085843;     xdyNswlqjdwsiStUfkCKLdSjd96085843 = xdyNswlqjdwsiStUfkCKLdSjd62013578;     xdyNswlqjdwsiStUfkCKLdSjd62013578 = xdyNswlqjdwsiStUfkCKLdSjd36081034;     xdyNswlqjdwsiStUfkCKLdSjd36081034 = xdyNswlqjdwsiStUfkCKLdSjd11555534;     xdyNswlqjdwsiStUfkCKLdSjd11555534 = xdyNswlqjdwsiStUfkCKLdSjd17655893;     xdyNswlqjdwsiStUfkCKLdSjd17655893 = xdyNswlqjdwsiStUfkCKLdSjd9379720;     xdyNswlqjdwsiStUfkCKLdSjd9379720 = xdyNswlqjdwsiStUfkCKLdSjd99910466;     xdyNswlqjdwsiStUfkCKLdSjd99910466 = xdyNswlqjdwsiStUfkCKLdSjd18087872;     xdyNswlqjdwsiStUfkCKLdSjd18087872 = xdyNswlqjdwsiStUfkCKLdSjd74609873;     xdyNswlqjdwsiStUfkCKLdSjd74609873 = xdyNswlqjdwsiStUfkCKLdSjd54144774;     xdyNswlqjdwsiStUfkCKLdSjd54144774 = xdyNswlqjdwsiStUfkCKLdSjd67029462;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GAlpyTgwjzIGXiXTmkOzGsUbLGwrKZUpfIdyUiSFcGjnWPeUyMkUvRnNg869572() {     long KdsWplJeTaPFZyERIXAJgEwbc73146569 = -429430317;    long KdsWplJeTaPFZyERIXAJgEwbc59022297 = -292826500;    long KdsWplJeTaPFZyERIXAJgEwbc67789838 = -262089740;    long KdsWplJeTaPFZyERIXAJgEwbc56231804 = -930304279;    long KdsWplJeTaPFZyERIXAJgEwbc56873122 = -883554259;    long KdsWplJeTaPFZyERIXAJgEwbc91017047 = -293851928;    long KdsWplJeTaPFZyERIXAJgEwbc55819860 = 58835038;    long KdsWplJeTaPFZyERIXAJgEwbc48382367 = -697913219;    long KdsWplJeTaPFZyERIXAJgEwbc60872630 = -2912845;    long KdsWplJeTaPFZyERIXAJgEwbc14252075 = -2016668;    long KdsWplJeTaPFZyERIXAJgEwbc13722369 = -418488099;    long KdsWplJeTaPFZyERIXAJgEwbc13121501 = -37741476;    long KdsWplJeTaPFZyERIXAJgEwbc11077425 = -873146994;    long KdsWplJeTaPFZyERIXAJgEwbc16750968 = -349653696;    long KdsWplJeTaPFZyERIXAJgEwbc57441569 = -216889920;    long KdsWplJeTaPFZyERIXAJgEwbc85310553 = -532928547;    long KdsWplJeTaPFZyERIXAJgEwbc26791678 = -869009648;    long KdsWplJeTaPFZyERIXAJgEwbc97874115 = -981459070;    long KdsWplJeTaPFZyERIXAJgEwbc12010086 = -811325888;    long KdsWplJeTaPFZyERIXAJgEwbc29577856 = -936010318;    long KdsWplJeTaPFZyERIXAJgEwbc82365014 = -824046605;    long KdsWplJeTaPFZyERIXAJgEwbc37571725 = -691449417;    long KdsWplJeTaPFZyERIXAJgEwbc28364128 = -719832228;    long KdsWplJeTaPFZyERIXAJgEwbc20881064 = -932414412;    long KdsWplJeTaPFZyERIXAJgEwbc20598567 = -860026527;    long KdsWplJeTaPFZyERIXAJgEwbc79495564 = -824545910;    long KdsWplJeTaPFZyERIXAJgEwbc29649446 = -806771705;    long KdsWplJeTaPFZyERIXAJgEwbc60000876 = -576361298;    long KdsWplJeTaPFZyERIXAJgEwbc42229440 = -711341610;    long KdsWplJeTaPFZyERIXAJgEwbc6139022 = 82671315;    long KdsWplJeTaPFZyERIXAJgEwbc42098573 = -127199375;    long KdsWplJeTaPFZyERIXAJgEwbc31815559 = -91596521;    long KdsWplJeTaPFZyERIXAJgEwbc20903752 = -668354207;    long KdsWplJeTaPFZyERIXAJgEwbc2056093 = -650429769;    long KdsWplJeTaPFZyERIXAJgEwbc73090833 = -728950376;    long KdsWplJeTaPFZyERIXAJgEwbc87687438 = -539130448;    long KdsWplJeTaPFZyERIXAJgEwbc58134478 = -429938092;    long KdsWplJeTaPFZyERIXAJgEwbc22429354 = -146677247;    long KdsWplJeTaPFZyERIXAJgEwbc18369532 = 32695525;    long KdsWplJeTaPFZyERIXAJgEwbc73568008 = -192752483;    long KdsWplJeTaPFZyERIXAJgEwbc63486087 = -229136198;    long KdsWplJeTaPFZyERIXAJgEwbc54586215 = -577065270;    long KdsWplJeTaPFZyERIXAJgEwbc54861600 = -191242495;    long KdsWplJeTaPFZyERIXAJgEwbc85184006 = 21083554;    long KdsWplJeTaPFZyERIXAJgEwbc85504380 = -68836015;    long KdsWplJeTaPFZyERIXAJgEwbc44087721 = -234936561;    long KdsWplJeTaPFZyERIXAJgEwbc73309833 = 96629729;    long KdsWplJeTaPFZyERIXAJgEwbc10742885 = -695589030;    long KdsWplJeTaPFZyERIXAJgEwbc76090105 = -232198362;    long KdsWplJeTaPFZyERIXAJgEwbc37762052 = -232866988;    long KdsWplJeTaPFZyERIXAJgEwbc68557604 = -386652218;    long KdsWplJeTaPFZyERIXAJgEwbc75762314 = -485774762;    long KdsWplJeTaPFZyERIXAJgEwbc65904512 = -87266215;    long KdsWplJeTaPFZyERIXAJgEwbc56736055 = -920654137;    long KdsWplJeTaPFZyERIXAJgEwbc18504557 = -36380115;    long KdsWplJeTaPFZyERIXAJgEwbc35574844 = -737980901;    long KdsWplJeTaPFZyERIXAJgEwbc30658170 = -572994273;    long KdsWplJeTaPFZyERIXAJgEwbc46908775 = -329675329;    long KdsWplJeTaPFZyERIXAJgEwbc35633238 = 29722248;    long KdsWplJeTaPFZyERIXAJgEwbc77377557 = 40991651;    long KdsWplJeTaPFZyERIXAJgEwbc61367602 = -487080224;    long KdsWplJeTaPFZyERIXAJgEwbc95818984 = -364803665;    long KdsWplJeTaPFZyERIXAJgEwbc6152927 = -986571609;    long KdsWplJeTaPFZyERIXAJgEwbc54733609 = 14415839;    long KdsWplJeTaPFZyERIXAJgEwbc72153502 = -874817294;    long KdsWplJeTaPFZyERIXAJgEwbc81906809 = -226891579;    long KdsWplJeTaPFZyERIXAJgEwbc92217749 = -369387269;    long KdsWplJeTaPFZyERIXAJgEwbc9021333 = -122717225;    long KdsWplJeTaPFZyERIXAJgEwbc43660134 = -620703320;    long KdsWplJeTaPFZyERIXAJgEwbc69754130 = -677759472;    long KdsWplJeTaPFZyERIXAJgEwbc27176075 = -2990456;    long KdsWplJeTaPFZyERIXAJgEwbc4362325 = -622332401;    long KdsWplJeTaPFZyERIXAJgEwbc79504583 = -914154595;    long KdsWplJeTaPFZyERIXAJgEwbc38442078 = -518573405;    long KdsWplJeTaPFZyERIXAJgEwbc66091768 = -606874121;    long KdsWplJeTaPFZyERIXAJgEwbc27778800 = -146981335;    long KdsWplJeTaPFZyERIXAJgEwbc82710125 = -400206922;    long KdsWplJeTaPFZyERIXAJgEwbc43180122 = -640915782;    long KdsWplJeTaPFZyERIXAJgEwbc35376683 = -763578397;    long KdsWplJeTaPFZyERIXAJgEwbc76510846 = -525089967;    long KdsWplJeTaPFZyERIXAJgEwbc6185732 = -821175639;    long KdsWplJeTaPFZyERIXAJgEwbc18906561 = -11182675;    long KdsWplJeTaPFZyERIXAJgEwbc83910770 = -244162936;    long KdsWplJeTaPFZyERIXAJgEwbc4467388 = -378474623;    long KdsWplJeTaPFZyERIXAJgEwbc37581417 = -530676467;    long KdsWplJeTaPFZyERIXAJgEwbc66336258 = -641424613;    long KdsWplJeTaPFZyERIXAJgEwbc65911046 = 95669693;    long KdsWplJeTaPFZyERIXAJgEwbc64167696 = -747700070;    long KdsWplJeTaPFZyERIXAJgEwbc83551535 = -514049655;    long KdsWplJeTaPFZyERIXAJgEwbc37515990 = -990969476;    long KdsWplJeTaPFZyERIXAJgEwbc57029269 = -966136176;    long KdsWplJeTaPFZyERIXAJgEwbc11225704 = -262763;    long KdsWplJeTaPFZyERIXAJgEwbc86796116 = -76399496;    long KdsWplJeTaPFZyERIXAJgEwbc40991975 = 91703874;    long KdsWplJeTaPFZyERIXAJgEwbc12200406 = -705672260;    long KdsWplJeTaPFZyERIXAJgEwbc67667103 = -864332533;    long KdsWplJeTaPFZyERIXAJgEwbc48433288 = -590493661;    long KdsWplJeTaPFZyERIXAJgEwbc127991 = -105658335;    long KdsWplJeTaPFZyERIXAJgEwbc13030504 = -104099153;    long KdsWplJeTaPFZyERIXAJgEwbc3597572 = -429430317;     KdsWplJeTaPFZyERIXAJgEwbc73146569 = KdsWplJeTaPFZyERIXAJgEwbc59022297;     KdsWplJeTaPFZyERIXAJgEwbc59022297 = KdsWplJeTaPFZyERIXAJgEwbc67789838;     KdsWplJeTaPFZyERIXAJgEwbc67789838 = KdsWplJeTaPFZyERIXAJgEwbc56231804;     KdsWplJeTaPFZyERIXAJgEwbc56231804 = KdsWplJeTaPFZyERIXAJgEwbc56873122;     KdsWplJeTaPFZyERIXAJgEwbc56873122 = KdsWplJeTaPFZyERIXAJgEwbc91017047;     KdsWplJeTaPFZyERIXAJgEwbc91017047 = KdsWplJeTaPFZyERIXAJgEwbc55819860;     KdsWplJeTaPFZyERIXAJgEwbc55819860 = KdsWplJeTaPFZyERIXAJgEwbc48382367;     KdsWplJeTaPFZyERIXAJgEwbc48382367 = KdsWplJeTaPFZyERIXAJgEwbc60872630;     KdsWplJeTaPFZyERIXAJgEwbc60872630 = KdsWplJeTaPFZyERIXAJgEwbc14252075;     KdsWplJeTaPFZyERIXAJgEwbc14252075 = KdsWplJeTaPFZyERIXAJgEwbc13722369;     KdsWplJeTaPFZyERIXAJgEwbc13722369 = KdsWplJeTaPFZyERIXAJgEwbc13121501;     KdsWplJeTaPFZyERIXAJgEwbc13121501 = KdsWplJeTaPFZyERIXAJgEwbc11077425;     KdsWplJeTaPFZyERIXAJgEwbc11077425 = KdsWplJeTaPFZyERIXAJgEwbc16750968;     KdsWplJeTaPFZyERIXAJgEwbc16750968 = KdsWplJeTaPFZyERIXAJgEwbc57441569;     KdsWplJeTaPFZyERIXAJgEwbc57441569 = KdsWplJeTaPFZyERIXAJgEwbc85310553;     KdsWplJeTaPFZyERIXAJgEwbc85310553 = KdsWplJeTaPFZyERIXAJgEwbc26791678;     KdsWplJeTaPFZyERIXAJgEwbc26791678 = KdsWplJeTaPFZyERIXAJgEwbc97874115;     KdsWplJeTaPFZyERIXAJgEwbc97874115 = KdsWplJeTaPFZyERIXAJgEwbc12010086;     KdsWplJeTaPFZyERIXAJgEwbc12010086 = KdsWplJeTaPFZyERIXAJgEwbc29577856;     KdsWplJeTaPFZyERIXAJgEwbc29577856 = KdsWplJeTaPFZyERIXAJgEwbc82365014;     KdsWplJeTaPFZyERIXAJgEwbc82365014 = KdsWplJeTaPFZyERIXAJgEwbc37571725;     KdsWplJeTaPFZyERIXAJgEwbc37571725 = KdsWplJeTaPFZyERIXAJgEwbc28364128;     KdsWplJeTaPFZyERIXAJgEwbc28364128 = KdsWplJeTaPFZyERIXAJgEwbc20881064;     KdsWplJeTaPFZyERIXAJgEwbc20881064 = KdsWplJeTaPFZyERIXAJgEwbc20598567;     KdsWplJeTaPFZyERIXAJgEwbc20598567 = KdsWplJeTaPFZyERIXAJgEwbc79495564;     KdsWplJeTaPFZyERIXAJgEwbc79495564 = KdsWplJeTaPFZyERIXAJgEwbc29649446;     KdsWplJeTaPFZyERIXAJgEwbc29649446 = KdsWplJeTaPFZyERIXAJgEwbc60000876;     KdsWplJeTaPFZyERIXAJgEwbc60000876 = KdsWplJeTaPFZyERIXAJgEwbc42229440;     KdsWplJeTaPFZyERIXAJgEwbc42229440 = KdsWplJeTaPFZyERIXAJgEwbc6139022;     KdsWplJeTaPFZyERIXAJgEwbc6139022 = KdsWplJeTaPFZyERIXAJgEwbc42098573;     KdsWplJeTaPFZyERIXAJgEwbc42098573 = KdsWplJeTaPFZyERIXAJgEwbc31815559;     KdsWplJeTaPFZyERIXAJgEwbc31815559 = KdsWplJeTaPFZyERIXAJgEwbc20903752;     KdsWplJeTaPFZyERIXAJgEwbc20903752 = KdsWplJeTaPFZyERIXAJgEwbc2056093;     KdsWplJeTaPFZyERIXAJgEwbc2056093 = KdsWplJeTaPFZyERIXAJgEwbc73090833;     KdsWplJeTaPFZyERIXAJgEwbc73090833 = KdsWplJeTaPFZyERIXAJgEwbc87687438;     KdsWplJeTaPFZyERIXAJgEwbc87687438 = KdsWplJeTaPFZyERIXAJgEwbc58134478;     KdsWplJeTaPFZyERIXAJgEwbc58134478 = KdsWplJeTaPFZyERIXAJgEwbc22429354;     KdsWplJeTaPFZyERIXAJgEwbc22429354 = KdsWplJeTaPFZyERIXAJgEwbc18369532;     KdsWplJeTaPFZyERIXAJgEwbc18369532 = KdsWplJeTaPFZyERIXAJgEwbc73568008;     KdsWplJeTaPFZyERIXAJgEwbc73568008 = KdsWplJeTaPFZyERIXAJgEwbc63486087;     KdsWplJeTaPFZyERIXAJgEwbc63486087 = KdsWplJeTaPFZyERIXAJgEwbc54586215;     KdsWplJeTaPFZyERIXAJgEwbc54586215 = KdsWplJeTaPFZyERIXAJgEwbc54861600;     KdsWplJeTaPFZyERIXAJgEwbc54861600 = KdsWplJeTaPFZyERIXAJgEwbc85184006;     KdsWplJeTaPFZyERIXAJgEwbc85184006 = KdsWplJeTaPFZyERIXAJgEwbc85504380;     KdsWplJeTaPFZyERIXAJgEwbc85504380 = KdsWplJeTaPFZyERIXAJgEwbc44087721;     KdsWplJeTaPFZyERIXAJgEwbc44087721 = KdsWplJeTaPFZyERIXAJgEwbc73309833;     KdsWplJeTaPFZyERIXAJgEwbc73309833 = KdsWplJeTaPFZyERIXAJgEwbc10742885;     KdsWplJeTaPFZyERIXAJgEwbc10742885 = KdsWplJeTaPFZyERIXAJgEwbc76090105;     KdsWplJeTaPFZyERIXAJgEwbc76090105 = KdsWplJeTaPFZyERIXAJgEwbc37762052;     KdsWplJeTaPFZyERIXAJgEwbc37762052 = KdsWplJeTaPFZyERIXAJgEwbc68557604;     KdsWplJeTaPFZyERIXAJgEwbc68557604 = KdsWplJeTaPFZyERIXAJgEwbc75762314;     KdsWplJeTaPFZyERIXAJgEwbc75762314 = KdsWplJeTaPFZyERIXAJgEwbc65904512;     KdsWplJeTaPFZyERIXAJgEwbc65904512 = KdsWplJeTaPFZyERIXAJgEwbc56736055;     KdsWplJeTaPFZyERIXAJgEwbc56736055 = KdsWplJeTaPFZyERIXAJgEwbc18504557;     KdsWplJeTaPFZyERIXAJgEwbc18504557 = KdsWplJeTaPFZyERIXAJgEwbc35574844;     KdsWplJeTaPFZyERIXAJgEwbc35574844 = KdsWplJeTaPFZyERIXAJgEwbc30658170;     KdsWplJeTaPFZyERIXAJgEwbc30658170 = KdsWplJeTaPFZyERIXAJgEwbc46908775;     KdsWplJeTaPFZyERIXAJgEwbc46908775 = KdsWplJeTaPFZyERIXAJgEwbc35633238;     KdsWplJeTaPFZyERIXAJgEwbc35633238 = KdsWplJeTaPFZyERIXAJgEwbc77377557;     KdsWplJeTaPFZyERIXAJgEwbc77377557 = KdsWplJeTaPFZyERIXAJgEwbc61367602;     KdsWplJeTaPFZyERIXAJgEwbc61367602 = KdsWplJeTaPFZyERIXAJgEwbc95818984;     KdsWplJeTaPFZyERIXAJgEwbc95818984 = KdsWplJeTaPFZyERIXAJgEwbc6152927;     KdsWplJeTaPFZyERIXAJgEwbc6152927 = KdsWplJeTaPFZyERIXAJgEwbc54733609;     KdsWplJeTaPFZyERIXAJgEwbc54733609 = KdsWplJeTaPFZyERIXAJgEwbc72153502;     KdsWplJeTaPFZyERIXAJgEwbc72153502 = KdsWplJeTaPFZyERIXAJgEwbc81906809;     KdsWplJeTaPFZyERIXAJgEwbc81906809 = KdsWplJeTaPFZyERIXAJgEwbc92217749;     KdsWplJeTaPFZyERIXAJgEwbc92217749 = KdsWplJeTaPFZyERIXAJgEwbc9021333;     KdsWplJeTaPFZyERIXAJgEwbc9021333 = KdsWplJeTaPFZyERIXAJgEwbc43660134;     KdsWplJeTaPFZyERIXAJgEwbc43660134 = KdsWplJeTaPFZyERIXAJgEwbc69754130;     KdsWplJeTaPFZyERIXAJgEwbc69754130 = KdsWplJeTaPFZyERIXAJgEwbc27176075;     KdsWplJeTaPFZyERIXAJgEwbc27176075 = KdsWplJeTaPFZyERIXAJgEwbc4362325;     KdsWplJeTaPFZyERIXAJgEwbc4362325 = KdsWplJeTaPFZyERIXAJgEwbc79504583;     KdsWplJeTaPFZyERIXAJgEwbc79504583 = KdsWplJeTaPFZyERIXAJgEwbc38442078;     KdsWplJeTaPFZyERIXAJgEwbc38442078 = KdsWplJeTaPFZyERIXAJgEwbc66091768;     KdsWplJeTaPFZyERIXAJgEwbc66091768 = KdsWplJeTaPFZyERIXAJgEwbc27778800;     KdsWplJeTaPFZyERIXAJgEwbc27778800 = KdsWplJeTaPFZyERIXAJgEwbc82710125;     KdsWplJeTaPFZyERIXAJgEwbc82710125 = KdsWplJeTaPFZyERIXAJgEwbc43180122;     KdsWplJeTaPFZyERIXAJgEwbc43180122 = KdsWplJeTaPFZyERIXAJgEwbc35376683;     KdsWplJeTaPFZyERIXAJgEwbc35376683 = KdsWplJeTaPFZyERIXAJgEwbc76510846;     KdsWplJeTaPFZyERIXAJgEwbc76510846 = KdsWplJeTaPFZyERIXAJgEwbc6185732;     KdsWplJeTaPFZyERIXAJgEwbc6185732 = KdsWplJeTaPFZyERIXAJgEwbc18906561;     KdsWplJeTaPFZyERIXAJgEwbc18906561 = KdsWplJeTaPFZyERIXAJgEwbc83910770;     KdsWplJeTaPFZyERIXAJgEwbc83910770 = KdsWplJeTaPFZyERIXAJgEwbc4467388;     KdsWplJeTaPFZyERIXAJgEwbc4467388 = KdsWplJeTaPFZyERIXAJgEwbc37581417;     KdsWplJeTaPFZyERIXAJgEwbc37581417 = KdsWplJeTaPFZyERIXAJgEwbc66336258;     KdsWplJeTaPFZyERIXAJgEwbc66336258 = KdsWplJeTaPFZyERIXAJgEwbc65911046;     KdsWplJeTaPFZyERIXAJgEwbc65911046 = KdsWplJeTaPFZyERIXAJgEwbc64167696;     KdsWplJeTaPFZyERIXAJgEwbc64167696 = KdsWplJeTaPFZyERIXAJgEwbc83551535;     KdsWplJeTaPFZyERIXAJgEwbc83551535 = KdsWplJeTaPFZyERIXAJgEwbc37515990;     KdsWplJeTaPFZyERIXAJgEwbc37515990 = KdsWplJeTaPFZyERIXAJgEwbc57029269;     KdsWplJeTaPFZyERIXAJgEwbc57029269 = KdsWplJeTaPFZyERIXAJgEwbc11225704;     KdsWplJeTaPFZyERIXAJgEwbc11225704 = KdsWplJeTaPFZyERIXAJgEwbc86796116;     KdsWplJeTaPFZyERIXAJgEwbc86796116 = KdsWplJeTaPFZyERIXAJgEwbc40991975;     KdsWplJeTaPFZyERIXAJgEwbc40991975 = KdsWplJeTaPFZyERIXAJgEwbc12200406;     KdsWplJeTaPFZyERIXAJgEwbc12200406 = KdsWplJeTaPFZyERIXAJgEwbc67667103;     KdsWplJeTaPFZyERIXAJgEwbc67667103 = KdsWplJeTaPFZyERIXAJgEwbc48433288;     KdsWplJeTaPFZyERIXAJgEwbc48433288 = KdsWplJeTaPFZyERIXAJgEwbc127991;     KdsWplJeTaPFZyERIXAJgEwbc127991 = KdsWplJeTaPFZyERIXAJgEwbc13030504;     KdsWplJeTaPFZyERIXAJgEwbc13030504 = KdsWplJeTaPFZyERIXAJgEwbc3597572;     KdsWplJeTaPFZyERIXAJgEwbc3597572 = KdsWplJeTaPFZyERIXAJgEwbc73146569;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YUKESObmDYzwCiDNcxeuSEKFldhmXtnnHIaWDAQfWtqjlXfpzqJTSKZUJ68161171() {     long FSpgoPKlMpuIgKcgyYZOaTOxs8605538 = -895707217;    long FSpgoPKlMpuIgKcgyYZOaTOxs72294376 = -173378107;    long FSpgoPKlMpuIgKcgyYZOaTOxs5176315 = 72243185;    long FSpgoPKlMpuIgKcgyYZOaTOxs28455159 = -751455350;    long FSpgoPKlMpuIgKcgyYZOaTOxs13158392 = -989153104;    long FSpgoPKlMpuIgKcgyYZOaTOxs27239920 = -556199824;    long FSpgoPKlMpuIgKcgyYZOaTOxs66477266 = -885890696;    long FSpgoPKlMpuIgKcgyYZOaTOxs10513928 = -342147360;    long FSpgoPKlMpuIgKcgyYZOaTOxs62390235 = -491244252;    long FSpgoPKlMpuIgKcgyYZOaTOxs29154787 = -766703666;    long FSpgoPKlMpuIgKcgyYZOaTOxs51904103 = -220495829;    long FSpgoPKlMpuIgKcgyYZOaTOxs13689650 = 98137753;    long FSpgoPKlMpuIgKcgyYZOaTOxs49312070 = -325159498;    long FSpgoPKlMpuIgKcgyYZOaTOxs69891830 = -326017105;    long FSpgoPKlMpuIgKcgyYZOaTOxs15636086 = -720314935;    long FSpgoPKlMpuIgKcgyYZOaTOxs68851854 = -168740154;    long FSpgoPKlMpuIgKcgyYZOaTOxs82627614 = -295984200;    long FSpgoPKlMpuIgKcgyYZOaTOxs97634307 = 45112861;    long FSpgoPKlMpuIgKcgyYZOaTOxs12560416 = -27889309;    long FSpgoPKlMpuIgKcgyYZOaTOxs23415075 = -262571384;    long FSpgoPKlMpuIgKcgyYZOaTOxs95451877 = -481321294;    long FSpgoPKlMpuIgKcgyYZOaTOxs40993250 = -778085711;    long FSpgoPKlMpuIgKcgyYZOaTOxs98889507 = -357464412;    long FSpgoPKlMpuIgKcgyYZOaTOxs14674009 = -343239016;    long FSpgoPKlMpuIgKcgyYZOaTOxs28616518 = -884011726;    long FSpgoPKlMpuIgKcgyYZOaTOxs90193736 = -513122716;    long FSpgoPKlMpuIgKcgyYZOaTOxs90070019 = -613055846;    long FSpgoPKlMpuIgKcgyYZOaTOxs729301 = -746133472;    long FSpgoPKlMpuIgKcgyYZOaTOxs88897654 = -185436413;    long FSpgoPKlMpuIgKcgyYZOaTOxs11672432 = 48164145;    long FSpgoPKlMpuIgKcgyYZOaTOxs60681804 = -679179862;    long FSpgoPKlMpuIgKcgyYZOaTOxs69638577 = -964567936;    long FSpgoPKlMpuIgKcgyYZOaTOxs33121763 = -815950185;    long FSpgoPKlMpuIgKcgyYZOaTOxs31804519 = -715123583;    long FSpgoPKlMpuIgKcgyYZOaTOxs38899287 = -680050627;    long FSpgoPKlMpuIgKcgyYZOaTOxs39248283 = -753695754;    long FSpgoPKlMpuIgKcgyYZOaTOxs7546295 = -294634132;    long FSpgoPKlMpuIgKcgyYZOaTOxs73644757 = -129332828;    long FSpgoPKlMpuIgKcgyYZOaTOxs48760094 = -718180752;    long FSpgoPKlMpuIgKcgyYZOaTOxs37839540 = -758015029;    long FSpgoPKlMpuIgKcgyYZOaTOxs96937695 = 1664888;    long FSpgoPKlMpuIgKcgyYZOaTOxs43951342 = -171610561;    long FSpgoPKlMpuIgKcgyYZOaTOxs44244978 = -844423281;    long FSpgoPKlMpuIgKcgyYZOaTOxs25315345 = -583248856;    long FSpgoPKlMpuIgKcgyYZOaTOxs85520839 = -995347177;    long FSpgoPKlMpuIgKcgyYZOaTOxs90049049 = -273860194;    long FSpgoPKlMpuIgKcgyYZOaTOxs92654996 = -387356632;    long FSpgoPKlMpuIgKcgyYZOaTOxs28469197 = -862115623;    long FSpgoPKlMpuIgKcgyYZOaTOxs98982771 = -995935242;    long FSpgoPKlMpuIgKcgyYZOaTOxs62291641 = -723893804;    long FSpgoPKlMpuIgKcgyYZOaTOxs49328328 = -260928775;    long FSpgoPKlMpuIgKcgyYZOaTOxs59247787 = -699427108;    long FSpgoPKlMpuIgKcgyYZOaTOxs34525661 = -943311769;    long FSpgoPKlMpuIgKcgyYZOaTOxs72727901 = -12162637;    long FSpgoPKlMpuIgKcgyYZOaTOxs72709293 = -382870261;    long FSpgoPKlMpuIgKcgyYZOaTOxs67612287 = -17621507;    long FSpgoPKlMpuIgKcgyYZOaTOxs73404868 = -815913696;    long FSpgoPKlMpuIgKcgyYZOaTOxs90502306 = -584517799;    long FSpgoPKlMpuIgKcgyYZOaTOxs99838641 = -867443625;    long FSpgoPKlMpuIgKcgyYZOaTOxs22964655 = -376030388;    long FSpgoPKlMpuIgKcgyYZOaTOxs37169900 = -943143978;    long FSpgoPKlMpuIgKcgyYZOaTOxs65747966 = -39757224;    long FSpgoPKlMpuIgKcgyYZOaTOxs21616274 = -56710947;    long FSpgoPKlMpuIgKcgyYZOaTOxs50717804 = -439408397;    long FSpgoPKlMpuIgKcgyYZOaTOxs68472982 = 12476195;    long FSpgoPKlMpuIgKcgyYZOaTOxs82265526 = -255927893;    long FSpgoPKlMpuIgKcgyYZOaTOxs80567887 = -85912063;    long FSpgoPKlMpuIgKcgyYZOaTOxs17507552 = -610035916;    long FSpgoPKlMpuIgKcgyYZOaTOxs30992544 = -645966479;    long FSpgoPKlMpuIgKcgyYZOaTOxs76387803 = -966619181;    long FSpgoPKlMpuIgKcgyYZOaTOxs61305559 = -874106023;    long FSpgoPKlMpuIgKcgyYZOaTOxs8982857 = -66651373;    long FSpgoPKlMpuIgKcgyYZOaTOxs48874214 = -236706388;    long FSpgoPKlMpuIgKcgyYZOaTOxs74720875 = -269874280;    long FSpgoPKlMpuIgKcgyYZOaTOxs26477379 = -164236273;    long FSpgoPKlMpuIgKcgyYZOaTOxs51500536 = -209710733;    long FSpgoPKlMpuIgKcgyYZOaTOxs96748271 = -933662430;    long FSpgoPKlMpuIgKcgyYZOaTOxs73574163 = -774215556;    long FSpgoPKlMpuIgKcgyYZOaTOxs29153170 = -347891840;    long FSpgoPKlMpuIgKcgyYZOaTOxs38567469 = -510151533;    long FSpgoPKlMpuIgKcgyYZOaTOxs97538740 = -25766085;    long FSpgoPKlMpuIgKcgyYZOaTOxs61600823 = -750940223;    long FSpgoPKlMpuIgKcgyYZOaTOxs1746530 = -750198231;    long FSpgoPKlMpuIgKcgyYZOaTOxs26606013 = -461542610;    long FSpgoPKlMpuIgKcgyYZOaTOxs62344104 = -690907080;    long FSpgoPKlMpuIgKcgyYZOaTOxs1434018 = -979752754;    long FSpgoPKlMpuIgKcgyYZOaTOxs35112917 = 78743833;    long FSpgoPKlMpuIgKcgyYZOaTOxs60393861 = -703787548;    long FSpgoPKlMpuIgKcgyYZOaTOxs59095225 = -232253323;    long FSpgoPKlMpuIgKcgyYZOaTOxs71286999 = -562429121;    long FSpgoPKlMpuIgKcgyYZOaTOxs65843414 = -937782059;    long FSpgoPKlMpuIgKcgyYZOaTOxs17043989 = -710116333;    long FSpgoPKlMpuIgKcgyYZOaTOxs73806115 = -261889204;    long FSpgoPKlMpuIgKcgyYZOaTOxs25795439 = -242150364;    long FSpgoPKlMpuIgKcgyYZOaTOxs669641 = -814871051;    long FSpgoPKlMpuIgKcgyYZOaTOxs31189730 = -958577888;    long FSpgoPKlMpuIgKcgyYZOaTOxs22335069 = -14899614;    long FSpgoPKlMpuIgKcgyYZOaTOxs93527174 = -305014884;    long FSpgoPKlMpuIgKcgyYZOaTOxs56842362 = -495725052;    long FSpgoPKlMpuIgKcgyYZOaTOxs3255314 = -895707217;     FSpgoPKlMpuIgKcgyYZOaTOxs8605538 = FSpgoPKlMpuIgKcgyYZOaTOxs72294376;     FSpgoPKlMpuIgKcgyYZOaTOxs72294376 = FSpgoPKlMpuIgKcgyYZOaTOxs5176315;     FSpgoPKlMpuIgKcgyYZOaTOxs5176315 = FSpgoPKlMpuIgKcgyYZOaTOxs28455159;     FSpgoPKlMpuIgKcgyYZOaTOxs28455159 = FSpgoPKlMpuIgKcgyYZOaTOxs13158392;     FSpgoPKlMpuIgKcgyYZOaTOxs13158392 = FSpgoPKlMpuIgKcgyYZOaTOxs27239920;     FSpgoPKlMpuIgKcgyYZOaTOxs27239920 = FSpgoPKlMpuIgKcgyYZOaTOxs66477266;     FSpgoPKlMpuIgKcgyYZOaTOxs66477266 = FSpgoPKlMpuIgKcgyYZOaTOxs10513928;     FSpgoPKlMpuIgKcgyYZOaTOxs10513928 = FSpgoPKlMpuIgKcgyYZOaTOxs62390235;     FSpgoPKlMpuIgKcgyYZOaTOxs62390235 = FSpgoPKlMpuIgKcgyYZOaTOxs29154787;     FSpgoPKlMpuIgKcgyYZOaTOxs29154787 = FSpgoPKlMpuIgKcgyYZOaTOxs51904103;     FSpgoPKlMpuIgKcgyYZOaTOxs51904103 = FSpgoPKlMpuIgKcgyYZOaTOxs13689650;     FSpgoPKlMpuIgKcgyYZOaTOxs13689650 = FSpgoPKlMpuIgKcgyYZOaTOxs49312070;     FSpgoPKlMpuIgKcgyYZOaTOxs49312070 = FSpgoPKlMpuIgKcgyYZOaTOxs69891830;     FSpgoPKlMpuIgKcgyYZOaTOxs69891830 = FSpgoPKlMpuIgKcgyYZOaTOxs15636086;     FSpgoPKlMpuIgKcgyYZOaTOxs15636086 = FSpgoPKlMpuIgKcgyYZOaTOxs68851854;     FSpgoPKlMpuIgKcgyYZOaTOxs68851854 = FSpgoPKlMpuIgKcgyYZOaTOxs82627614;     FSpgoPKlMpuIgKcgyYZOaTOxs82627614 = FSpgoPKlMpuIgKcgyYZOaTOxs97634307;     FSpgoPKlMpuIgKcgyYZOaTOxs97634307 = FSpgoPKlMpuIgKcgyYZOaTOxs12560416;     FSpgoPKlMpuIgKcgyYZOaTOxs12560416 = FSpgoPKlMpuIgKcgyYZOaTOxs23415075;     FSpgoPKlMpuIgKcgyYZOaTOxs23415075 = FSpgoPKlMpuIgKcgyYZOaTOxs95451877;     FSpgoPKlMpuIgKcgyYZOaTOxs95451877 = FSpgoPKlMpuIgKcgyYZOaTOxs40993250;     FSpgoPKlMpuIgKcgyYZOaTOxs40993250 = FSpgoPKlMpuIgKcgyYZOaTOxs98889507;     FSpgoPKlMpuIgKcgyYZOaTOxs98889507 = FSpgoPKlMpuIgKcgyYZOaTOxs14674009;     FSpgoPKlMpuIgKcgyYZOaTOxs14674009 = FSpgoPKlMpuIgKcgyYZOaTOxs28616518;     FSpgoPKlMpuIgKcgyYZOaTOxs28616518 = FSpgoPKlMpuIgKcgyYZOaTOxs90193736;     FSpgoPKlMpuIgKcgyYZOaTOxs90193736 = FSpgoPKlMpuIgKcgyYZOaTOxs90070019;     FSpgoPKlMpuIgKcgyYZOaTOxs90070019 = FSpgoPKlMpuIgKcgyYZOaTOxs729301;     FSpgoPKlMpuIgKcgyYZOaTOxs729301 = FSpgoPKlMpuIgKcgyYZOaTOxs88897654;     FSpgoPKlMpuIgKcgyYZOaTOxs88897654 = FSpgoPKlMpuIgKcgyYZOaTOxs11672432;     FSpgoPKlMpuIgKcgyYZOaTOxs11672432 = FSpgoPKlMpuIgKcgyYZOaTOxs60681804;     FSpgoPKlMpuIgKcgyYZOaTOxs60681804 = FSpgoPKlMpuIgKcgyYZOaTOxs69638577;     FSpgoPKlMpuIgKcgyYZOaTOxs69638577 = FSpgoPKlMpuIgKcgyYZOaTOxs33121763;     FSpgoPKlMpuIgKcgyYZOaTOxs33121763 = FSpgoPKlMpuIgKcgyYZOaTOxs31804519;     FSpgoPKlMpuIgKcgyYZOaTOxs31804519 = FSpgoPKlMpuIgKcgyYZOaTOxs38899287;     FSpgoPKlMpuIgKcgyYZOaTOxs38899287 = FSpgoPKlMpuIgKcgyYZOaTOxs39248283;     FSpgoPKlMpuIgKcgyYZOaTOxs39248283 = FSpgoPKlMpuIgKcgyYZOaTOxs7546295;     FSpgoPKlMpuIgKcgyYZOaTOxs7546295 = FSpgoPKlMpuIgKcgyYZOaTOxs73644757;     FSpgoPKlMpuIgKcgyYZOaTOxs73644757 = FSpgoPKlMpuIgKcgyYZOaTOxs48760094;     FSpgoPKlMpuIgKcgyYZOaTOxs48760094 = FSpgoPKlMpuIgKcgyYZOaTOxs37839540;     FSpgoPKlMpuIgKcgyYZOaTOxs37839540 = FSpgoPKlMpuIgKcgyYZOaTOxs96937695;     FSpgoPKlMpuIgKcgyYZOaTOxs96937695 = FSpgoPKlMpuIgKcgyYZOaTOxs43951342;     FSpgoPKlMpuIgKcgyYZOaTOxs43951342 = FSpgoPKlMpuIgKcgyYZOaTOxs44244978;     FSpgoPKlMpuIgKcgyYZOaTOxs44244978 = FSpgoPKlMpuIgKcgyYZOaTOxs25315345;     FSpgoPKlMpuIgKcgyYZOaTOxs25315345 = FSpgoPKlMpuIgKcgyYZOaTOxs85520839;     FSpgoPKlMpuIgKcgyYZOaTOxs85520839 = FSpgoPKlMpuIgKcgyYZOaTOxs90049049;     FSpgoPKlMpuIgKcgyYZOaTOxs90049049 = FSpgoPKlMpuIgKcgyYZOaTOxs92654996;     FSpgoPKlMpuIgKcgyYZOaTOxs92654996 = FSpgoPKlMpuIgKcgyYZOaTOxs28469197;     FSpgoPKlMpuIgKcgyYZOaTOxs28469197 = FSpgoPKlMpuIgKcgyYZOaTOxs98982771;     FSpgoPKlMpuIgKcgyYZOaTOxs98982771 = FSpgoPKlMpuIgKcgyYZOaTOxs62291641;     FSpgoPKlMpuIgKcgyYZOaTOxs62291641 = FSpgoPKlMpuIgKcgyYZOaTOxs49328328;     FSpgoPKlMpuIgKcgyYZOaTOxs49328328 = FSpgoPKlMpuIgKcgyYZOaTOxs59247787;     FSpgoPKlMpuIgKcgyYZOaTOxs59247787 = FSpgoPKlMpuIgKcgyYZOaTOxs34525661;     FSpgoPKlMpuIgKcgyYZOaTOxs34525661 = FSpgoPKlMpuIgKcgyYZOaTOxs72727901;     FSpgoPKlMpuIgKcgyYZOaTOxs72727901 = FSpgoPKlMpuIgKcgyYZOaTOxs72709293;     FSpgoPKlMpuIgKcgyYZOaTOxs72709293 = FSpgoPKlMpuIgKcgyYZOaTOxs67612287;     FSpgoPKlMpuIgKcgyYZOaTOxs67612287 = FSpgoPKlMpuIgKcgyYZOaTOxs73404868;     FSpgoPKlMpuIgKcgyYZOaTOxs73404868 = FSpgoPKlMpuIgKcgyYZOaTOxs90502306;     FSpgoPKlMpuIgKcgyYZOaTOxs90502306 = FSpgoPKlMpuIgKcgyYZOaTOxs99838641;     FSpgoPKlMpuIgKcgyYZOaTOxs99838641 = FSpgoPKlMpuIgKcgyYZOaTOxs22964655;     FSpgoPKlMpuIgKcgyYZOaTOxs22964655 = FSpgoPKlMpuIgKcgyYZOaTOxs37169900;     FSpgoPKlMpuIgKcgyYZOaTOxs37169900 = FSpgoPKlMpuIgKcgyYZOaTOxs65747966;     FSpgoPKlMpuIgKcgyYZOaTOxs65747966 = FSpgoPKlMpuIgKcgyYZOaTOxs21616274;     FSpgoPKlMpuIgKcgyYZOaTOxs21616274 = FSpgoPKlMpuIgKcgyYZOaTOxs50717804;     FSpgoPKlMpuIgKcgyYZOaTOxs50717804 = FSpgoPKlMpuIgKcgyYZOaTOxs68472982;     FSpgoPKlMpuIgKcgyYZOaTOxs68472982 = FSpgoPKlMpuIgKcgyYZOaTOxs82265526;     FSpgoPKlMpuIgKcgyYZOaTOxs82265526 = FSpgoPKlMpuIgKcgyYZOaTOxs80567887;     FSpgoPKlMpuIgKcgyYZOaTOxs80567887 = FSpgoPKlMpuIgKcgyYZOaTOxs17507552;     FSpgoPKlMpuIgKcgyYZOaTOxs17507552 = FSpgoPKlMpuIgKcgyYZOaTOxs30992544;     FSpgoPKlMpuIgKcgyYZOaTOxs30992544 = FSpgoPKlMpuIgKcgyYZOaTOxs76387803;     FSpgoPKlMpuIgKcgyYZOaTOxs76387803 = FSpgoPKlMpuIgKcgyYZOaTOxs61305559;     FSpgoPKlMpuIgKcgyYZOaTOxs61305559 = FSpgoPKlMpuIgKcgyYZOaTOxs8982857;     FSpgoPKlMpuIgKcgyYZOaTOxs8982857 = FSpgoPKlMpuIgKcgyYZOaTOxs48874214;     FSpgoPKlMpuIgKcgyYZOaTOxs48874214 = FSpgoPKlMpuIgKcgyYZOaTOxs74720875;     FSpgoPKlMpuIgKcgyYZOaTOxs74720875 = FSpgoPKlMpuIgKcgyYZOaTOxs26477379;     FSpgoPKlMpuIgKcgyYZOaTOxs26477379 = FSpgoPKlMpuIgKcgyYZOaTOxs51500536;     FSpgoPKlMpuIgKcgyYZOaTOxs51500536 = FSpgoPKlMpuIgKcgyYZOaTOxs96748271;     FSpgoPKlMpuIgKcgyYZOaTOxs96748271 = FSpgoPKlMpuIgKcgyYZOaTOxs73574163;     FSpgoPKlMpuIgKcgyYZOaTOxs73574163 = FSpgoPKlMpuIgKcgyYZOaTOxs29153170;     FSpgoPKlMpuIgKcgyYZOaTOxs29153170 = FSpgoPKlMpuIgKcgyYZOaTOxs38567469;     FSpgoPKlMpuIgKcgyYZOaTOxs38567469 = FSpgoPKlMpuIgKcgyYZOaTOxs97538740;     FSpgoPKlMpuIgKcgyYZOaTOxs97538740 = FSpgoPKlMpuIgKcgyYZOaTOxs61600823;     FSpgoPKlMpuIgKcgyYZOaTOxs61600823 = FSpgoPKlMpuIgKcgyYZOaTOxs1746530;     FSpgoPKlMpuIgKcgyYZOaTOxs1746530 = FSpgoPKlMpuIgKcgyYZOaTOxs26606013;     FSpgoPKlMpuIgKcgyYZOaTOxs26606013 = FSpgoPKlMpuIgKcgyYZOaTOxs62344104;     FSpgoPKlMpuIgKcgyYZOaTOxs62344104 = FSpgoPKlMpuIgKcgyYZOaTOxs1434018;     FSpgoPKlMpuIgKcgyYZOaTOxs1434018 = FSpgoPKlMpuIgKcgyYZOaTOxs35112917;     FSpgoPKlMpuIgKcgyYZOaTOxs35112917 = FSpgoPKlMpuIgKcgyYZOaTOxs60393861;     FSpgoPKlMpuIgKcgyYZOaTOxs60393861 = FSpgoPKlMpuIgKcgyYZOaTOxs59095225;     FSpgoPKlMpuIgKcgyYZOaTOxs59095225 = FSpgoPKlMpuIgKcgyYZOaTOxs71286999;     FSpgoPKlMpuIgKcgyYZOaTOxs71286999 = FSpgoPKlMpuIgKcgyYZOaTOxs65843414;     FSpgoPKlMpuIgKcgyYZOaTOxs65843414 = FSpgoPKlMpuIgKcgyYZOaTOxs17043989;     FSpgoPKlMpuIgKcgyYZOaTOxs17043989 = FSpgoPKlMpuIgKcgyYZOaTOxs73806115;     FSpgoPKlMpuIgKcgyYZOaTOxs73806115 = FSpgoPKlMpuIgKcgyYZOaTOxs25795439;     FSpgoPKlMpuIgKcgyYZOaTOxs25795439 = FSpgoPKlMpuIgKcgyYZOaTOxs669641;     FSpgoPKlMpuIgKcgyYZOaTOxs669641 = FSpgoPKlMpuIgKcgyYZOaTOxs31189730;     FSpgoPKlMpuIgKcgyYZOaTOxs31189730 = FSpgoPKlMpuIgKcgyYZOaTOxs22335069;     FSpgoPKlMpuIgKcgyYZOaTOxs22335069 = FSpgoPKlMpuIgKcgyYZOaTOxs93527174;     FSpgoPKlMpuIgKcgyYZOaTOxs93527174 = FSpgoPKlMpuIgKcgyYZOaTOxs56842362;     FSpgoPKlMpuIgKcgyYZOaTOxs56842362 = FSpgoPKlMpuIgKcgyYZOaTOxs3255314;     FSpgoPKlMpuIgKcgyYZOaTOxs3255314 = FSpgoPKlMpuIgKcgyYZOaTOxs8605538;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BubqmXumSQGsShKVLcyvwgmgqVNNCQNewWvWfkKniGNsTvQlBBWBZGNUH54971244() {     long vzQKgjCCcwvlopbRLNqTtNvFb53662220 = -247609459;    long vzQKgjCCcwvlopbRLNqTtNvFb52429225 = -953436317;    long vzQKgjCCcwvlopbRLNqTtNvFb4235877 = 46717340;    long vzQKgjCCcwvlopbRLNqTtNvFb284308 = -115082091;    long vzQKgjCCcwvlopbRLNqTtNvFb78526861 = -328170146;    long vzQKgjCCcwvlopbRLNqTtNvFb52438554 = -751949189;    long vzQKgjCCcwvlopbRLNqTtNvFb32356322 = -409199900;    long vzQKgjCCcwvlopbRLNqTtNvFb56167260 = -964548546;    long vzQKgjCCcwvlopbRLNqTtNvFb7036244 = -208836641;    long vzQKgjCCcwvlopbRLNqTtNvFb27922136 = -738447800;    long vzQKgjCCcwvlopbRLNqTtNvFb10300619 = -984177979;    long vzQKgjCCcwvlopbRLNqTtNvFb45356080 = -477134678;    long vzQKgjCCcwvlopbRLNqTtNvFb338051 = 47064097;    long vzQKgjCCcwvlopbRLNqTtNvFb92945477 = -670250599;    long vzQKgjCCcwvlopbRLNqTtNvFb9845381 = -925588258;    long vzQKgjCCcwvlopbRLNqTtNvFb55506272 = -351725740;    long vzQKgjCCcwvlopbRLNqTtNvFb60461464 = -246271391;    long vzQKgjCCcwvlopbRLNqTtNvFb81312696 = -573383407;    long vzQKgjCCcwvlopbRLNqTtNvFb13445882 = -879076794;    long vzQKgjCCcwvlopbRLNqTtNvFb29150962 = -648534990;    long vzQKgjCCcwvlopbRLNqTtNvFb69082503 = -594000213;    long vzQKgjCCcwvlopbRLNqTtNvFb68330307 = -904625911;    long vzQKgjCCcwvlopbRLNqTtNvFb52387113 = 80347786;    long vzQKgjCCcwvlopbRLNqTtNvFb12284666 = -998171727;    long vzQKgjCCcwvlopbRLNqTtNvFb30501802 = 17538949;    long vzQKgjCCcwvlopbRLNqTtNvFb66163296 = -909265512;    long vzQKgjCCcwvlopbRLNqTtNvFb71275269 = -793620055;    long vzQKgjCCcwvlopbRLNqTtNvFb97718013 = -835045490;    long vzQKgjCCcwvlopbRLNqTtNvFb32180600 = -662606252;    long vzQKgjCCcwvlopbRLNqTtNvFb61656842 = -114468425;    long vzQKgjCCcwvlopbRLNqTtNvFb95826184 = -129606368;    long vzQKgjCCcwvlopbRLNqTtNvFb54045892 = -506801907;    long vzQKgjCCcwvlopbRLNqTtNvFb23058706 = -68006980;    long vzQKgjCCcwvlopbRLNqTtNvFb44006678 = -587530894;    long vzQKgjCCcwvlopbRLNqTtNvFb39055592 = -214532382;    long vzQKgjCCcwvlopbRLNqTtNvFb58691975 = -984976205;    long vzQKgjCCcwvlopbRLNqTtNvFb69604446 = -702195462;    long vzQKgjCCcwvlopbRLNqTtNvFb55741078 = -57625129;    long vzQKgjCCcwvlopbRLNqTtNvFb39340199 = -734593191;    long vzQKgjCCcwvlopbRLNqTtNvFb81968503 = -869800602;    long vzQKgjCCcwvlopbRLNqTtNvFb91643199 = -489209648;    long vzQKgjCCcwvlopbRLNqTtNvFb6971235 = -822649250;    long vzQKgjCCcwvlopbRLNqTtNvFb84436759 = -541266333;    long vzQKgjCCcwvlopbRLNqTtNvFb99878213 = -622254894;    long vzQKgjCCcwvlopbRLNqTtNvFb15521101 = -424861556;    long vzQKgjCCcwvlopbRLNqTtNvFb90696514 = -877716817;    long vzQKgjCCcwvlopbRLNqTtNvFb60564434 = -92878504;    long vzQKgjCCcwvlopbRLNqTtNvFb49046007 = -384205106;    long vzQKgjCCcwvlopbRLNqTtNvFb31600488 = -777668777;    long vzQKgjCCcwvlopbRLNqTtNvFb46977267 = -539416859;    long vzQKgjCCcwvlopbRLNqTtNvFb27270460 = -26674805;    long vzQKgjCCcwvlopbRLNqTtNvFb95681597 = -513786273;    long vzQKgjCCcwvlopbRLNqTtNvFb34700237 = -691292274;    long vzQKgjCCcwvlopbRLNqTtNvFb9431704 = -605860129;    long vzQKgjCCcwvlopbRLNqTtNvFb85888741 = -754069674;    long vzQKgjCCcwvlopbRLNqTtNvFb85331913 = -342983548;    long vzQKgjCCcwvlopbRLNqTtNvFb42112 = -933784103;    long vzQKgjCCcwvlopbRLNqTtNvFb91951210 = 44889067;    long vzQKgjCCcwvlopbRLNqTtNvFb69782505 = -32621041;    long vzQKgjCCcwvlopbRLNqTtNvFb12363566 = -418904635;    long vzQKgjCCcwvlopbRLNqTtNvFb81163285 = -958329134;    long vzQKgjCCcwvlopbRLNqTtNvFb34638308 = -574154410;    long vzQKgjCCcwvlopbRLNqTtNvFb23986660 = -201942295;    long vzQKgjCCcwvlopbRLNqTtNvFb45379402 = 5631783;    long vzQKgjCCcwvlopbRLNqTtNvFb32095951 = -508841432;    long vzQKgjCCcwvlopbRLNqTtNvFb56254726 = -377376073;    long vzQKgjCCcwvlopbRLNqTtNvFb22297374 = -309127698;    long vzQKgjCCcwvlopbRLNqTtNvFb56331372 = -365405009;    long vzQKgjCCcwvlopbRLNqTtNvFb53889885 = -355718217;    long vzQKgjCCcwvlopbRLNqTtNvFb51153405 = -940612053;    long vzQKgjCCcwvlopbRLNqTtNvFb85901825 = -649530278;    long vzQKgjCCcwvlopbRLNqTtNvFb4720386 = -88646263;    long vzQKgjCCcwvlopbRLNqTtNvFb41972498 = -838790217;    long vzQKgjCCcwvlopbRLNqTtNvFb31477378 = 90723808;    long vzQKgjCCcwvlopbRLNqTtNvFb37507762 = -59325343;    long vzQKgjCCcwvlopbRLNqTtNvFb62111268 = -771350964;    long vzQKgjCCcwvlopbRLNqTtNvFb83893548 = -263359579;    long vzQKgjCCcwvlopbRLNqTtNvFb52508900 = -297397321;    long vzQKgjCCcwvlopbRLNqTtNvFb96763565 = -473310171;    long vzQKgjCCcwvlopbRLNqTtNvFb39805287 = -104744234;    long vzQKgjCCcwvlopbRLNqTtNvFb5598862 = -716387009;    long vzQKgjCCcwvlopbRLNqTtNvFb22229262 = -309414950;    long vzQKgjCCcwvlopbRLNqTtNvFb66117525 = 42623286;    long vzQKgjCCcwvlopbRLNqTtNvFb85203333 = -23189394;    long vzQKgjCCcwvlopbRLNqTtNvFb34386383 = 12206380;    long vzQKgjCCcwvlopbRLNqTtNvFb144587 = -615820096;    long vzQKgjCCcwvlopbRLNqTtNvFb19345655 = -815509633;    long vzQKgjCCcwvlopbRLNqTtNvFb13627003 = -462146852;    long vzQKgjCCcwvlopbRLNqTtNvFb58117937 = -833461221;    long vzQKgjCCcwvlopbRLNqTtNvFb53723679 = -871548835;    long vzQKgjCCcwvlopbRLNqTtNvFb58649864 = 48807897;    long vzQKgjCCcwvlopbRLNqTtNvFb77653236 = -647084529;    long vzQKgjCCcwvlopbRLNqTtNvFb85958572 = 74995911;    long vzQKgjCCcwvlopbRLNqTtNvFb26976634 = -215688556;    long vzQKgjCCcwvlopbRLNqTtNvFb805219 = -911471468;    long vzQKgjCCcwvlopbRLNqTtNvFb57004891 = -915055238;    long vzQKgjCCcwvlopbRLNqTtNvFb82984574 = -520706955;    long vzQKgjCCcwvlopbRLNqTtNvFb39057358 = -446898117;    long vzQKgjCCcwvlopbRLNqTtNvFb67782262 = -13413462;    long vzQKgjCCcwvlopbRLNqTtNvFb59266374 = -247609459;     vzQKgjCCcwvlopbRLNqTtNvFb53662220 = vzQKgjCCcwvlopbRLNqTtNvFb52429225;     vzQKgjCCcwvlopbRLNqTtNvFb52429225 = vzQKgjCCcwvlopbRLNqTtNvFb4235877;     vzQKgjCCcwvlopbRLNqTtNvFb4235877 = vzQKgjCCcwvlopbRLNqTtNvFb284308;     vzQKgjCCcwvlopbRLNqTtNvFb284308 = vzQKgjCCcwvlopbRLNqTtNvFb78526861;     vzQKgjCCcwvlopbRLNqTtNvFb78526861 = vzQKgjCCcwvlopbRLNqTtNvFb52438554;     vzQKgjCCcwvlopbRLNqTtNvFb52438554 = vzQKgjCCcwvlopbRLNqTtNvFb32356322;     vzQKgjCCcwvlopbRLNqTtNvFb32356322 = vzQKgjCCcwvlopbRLNqTtNvFb56167260;     vzQKgjCCcwvlopbRLNqTtNvFb56167260 = vzQKgjCCcwvlopbRLNqTtNvFb7036244;     vzQKgjCCcwvlopbRLNqTtNvFb7036244 = vzQKgjCCcwvlopbRLNqTtNvFb27922136;     vzQKgjCCcwvlopbRLNqTtNvFb27922136 = vzQKgjCCcwvlopbRLNqTtNvFb10300619;     vzQKgjCCcwvlopbRLNqTtNvFb10300619 = vzQKgjCCcwvlopbRLNqTtNvFb45356080;     vzQKgjCCcwvlopbRLNqTtNvFb45356080 = vzQKgjCCcwvlopbRLNqTtNvFb338051;     vzQKgjCCcwvlopbRLNqTtNvFb338051 = vzQKgjCCcwvlopbRLNqTtNvFb92945477;     vzQKgjCCcwvlopbRLNqTtNvFb92945477 = vzQKgjCCcwvlopbRLNqTtNvFb9845381;     vzQKgjCCcwvlopbRLNqTtNvFb9845381 = vzQKgjCCcwvlopbRLNqTtNvFb55506272;     vzQKgjCCcwvlopbRLNqTtNvFb55506272 = vzQKgjCCcwvlopbRLNqTtNvFb60461464;     vzQKgjCCcwvlopbRLNqTtNvFb60461464 = vzQKgjCCcwvlopbRLNqTtNvFb81312696;     vzQKgjCCcwvlopbRLNqTtNvFb81312696 = vzQKgjCCcwvlopbRLNqTtNvFb13445882;     vzQKgjCCcwvlopbRLNqTtNvFb13445882 = vzQKgjCCcwvlopbRLNqTtNvFb29150962;     vzQKgjCCcwvlopbRLNqTtNvFb29150962 = vzQKgjCCcwvlopbRLNqTtNvFb69082503;     vzQKgjCCcwvlopbRLNqTtNvFb69082503 = vzQKgjCCcwvlopbRLNqTtNvFb68330307;     vzQKgjCCcwvlopbRLNqTtNvFb68330307 = vzQKgjCCcwvlopbRLNqTtNvFb52387113;     vzQKgjCCcwvlopbRLNqTtNvFb52387113 = vzQKgjCCcwvlopbRLNqTtNvFb12284666;     vzQKgjCCcwvlopbRLNqTtNvFb12284666 = vzQKgjCCcwvlopbRLNqTtNvFb30501802;     vzQKgjCCcwvlopbRLNqTtNvFb30501802 = vzQKgjCCcwvlopbRLNqTtNvFb66163296;     vzQKgjCCcwvlopbRLNqTtNvFb66163296 = vzQKgjCCcwvlopbRLNqTtNvFb71275269;     vzQKgjCCcwvlopbRLNqTtNvFb71275269 = vzQKgjCCcwvlopbRLNqTtNvFb97718013;     vzQKgjCCcwvlopbRLNqTtNvFb97718013 = vzQKgjCCcwvlopbRLNqTtNvFb32180600;     vzQKgjCCcwvlopbRLNqTtNvFb32180600 = vzQKgjCCcwvlopbRLNqTtNvFb61656842;     vzQKgjCCcwvlopbRLNqTtNvFb61656842 = vzQKgjCCcwvlopbRLNqTtNvFb95826184;     vzQKgjCCcwvlopbRLNqTtNvFb95826184 = vzQKgjCCcwvlopbRLNqTtNvFb54045892;     vzQKgjCCcwvlopbRLNqTtNvFb54045892 = vzQKgjCCcwvlopbRLNqTtNvFb23058706;     vzQKgjCCcwvlopbRLNqTtNvFb23058706 = vzQKgjCCcwvlopbRLNqTtNvFb44006678;     vzQKgjCCcwvlopbRLNqTtNvFb44006678 = vzQKgjCCcwvlopbRLNqTtNvFb39055592;     vzQKgjCCcwvlopbRLNqTtNvFb39055592 = vzQKgjCCcwvlopbRLNqTtNvFb58691975;     vzQKgjCCcwvlopbRLNqTtNvFb58691975 = vzQKgjCCcwvlopbRLNqTtNvFb69604446;     vzQKgjCCcwvlopbRLNqTtNvFb69604446 = vzQKgjCCcwvlopbRLNqTtNvFb55741078;     vzQKgjCCcwvlopbRLNqTtNvFb55741078 = vzQKgjCCcwvlopbRLNqTtNvFb39340199;     vzQKgjCCcwvlopbRLNqTtNvFb39340199 = vzQKgjCCcwvlopbRLNqTtNvFb81968503;     vzQKgjCCcwvlopbRLNqTtNvFb81968503 = vzQKgjCCcwvlopbRLNqTtNvFb91643199;     vzQKgjCCcwvlopbRLNqTtNvFb91643199 = vzQKgjCCcwvlopbRLNqTtNvFb6971235;     vzQKgjCCcwvlopbRLNqTtNvFb6971235 = vzQKgjCCcwvlopbRLNqTtNvFb84436759;     vzQKgjCCcwvlopbRLNqTtNvFb84436759 = vzQKgjCCcwvlopbRLNqTtNvFb99878213;     vzQKgjCCcwvlopbRLNqTtNvFb99878213 = vzQKgjCCcwvlopbRLNqTtNvFb15521101;     vzQKgjCCcwvlopbRLNqTtNvFb15521101 = vzQKgjCCcwvlopbRLNqTtNvFb90696514;     vzQKgjCCcwvlopbRLNqTtNvFb90696514 = vzQKgjCCcwvlopbRLNqTtNvFb60564434;     vzQKgjCCcwvlopbRLNqTtNvFb60564434 = vzQKgjCCcwvlopbRLNqTtNvFb49046007;     vzQKgjCCcwvlopbRLNqTtNvFb49046007 = vzQKgjCCcwvlopbRLNqTtNvFb31600488;     vzQKgjCCcwvlopbRLNqTtNvFb31600488 = vzQKgjCCcwvlopbRLNqTtNvFb46977267;     vzQKgjCCcwvlopbRLNqTtNvFb46977267 = vzQKgjCCcwvlopbRLNqTtNvFb27270460;     vzQKgjCCcwvlopbRLNqTtNvFb27270460 = vzQKgjCCcwvlopbRLNqTtNvFb95681597;     vzQKgjCCcwvlopbRLNqTtNvFb95681597 = vzQKgjCCcwvlopbRLNqTtNvFb34700237;     vzQKgjCCcwvlopbRLNqTtNvFb34700237 = vzQKgjCCcwvlopbRLNqTtNvFb9431704;     vzQKgjCCcwvlopbRLNqTtNvFb9431704 = vzQKgjCCcwvlopbRLNqTtNvFb85888741;     vzQKgjCCcwvlopbRLNqTtNvFb85888741 = vzQKgjCCcwvlopbRLNqTtNvFb85331913;     vzQKgjCCcwvlopbRLNqTtNvFb85331913 = vzQKgjCCcwvlopbRLNqTtNvFb42112;     vzQKgjCCcwvlopbRLNqTtNvFb42112 = vzQKgjCCcwvlopbRLNqTtNvFb91951210;     vzQKgjCCcwvlopbRLNqTtNvFb91951210 = vzQKgjCCcwvlopbRLNqTtNvFb69782505;     vzQKgjCCcwvlopbRLNqTtNvFb69782505 = vzQKgjCCcwvlopbRLNqTtNvFb12363566;     vzQKgjCCcwvlopbRLNqTtNvFb12363566 = vzQKgjCCcwvlopbRLNqTtNvFb81163285;     vzQKgjCCcwvlopbRLNqTtNvFb81163285 = vzQKgjCCcwvlopbRLNqTtNvFb34638308;     vzQKgjCCcwvlopbRLNqTtNvFb34638308 = vzQKgjCCcwvlopbRLNqTtNvFb23986660;     vzQKgjCCcwvlopbRLNqTtNvFb23986660 = vzQKgjCCcwvlopbRLNqTtNvFb45379402;     vzQKgjCCcwvlopbRLNqTtNvFb45379402 = vzQKgjCCcwvlopbRLNqTtNvFb32095951;     vzQKgjCCcwvlopbRLNqTtNvFb32095951 = vzQKgjCCcwvlopbRLNqTtNvFb56254726;     vzQKgjCCcwvlopbRLNqTtNvFb56254726 = vzQKgjCCcwvlopbRLNqTtNvFb22297374;     vzQKgjCCcwvlopbRLNqTtNvFb22297374 = vzQKgjCCcwvlopbRLNqTtNvFb56331372;     vzQKgjCCcwvlopbRLNqTtNvFb56331372 = vzQKgjCCcwvlopbRLNqTtNvFb53889885;     vzQKgjCCcwvlopbRLNqTtNvFb53889885 = vzQKgjCCcwvlopbRLNqTtNvFb51153405;     vzQKgjCCcwvlopbRLNqTtNvFb51153405 = vzQKgjCCcwvlopbRLNqTtNvFb85901825;     vzQKgjCCcwvlopbRLNqTtNvFb85901825 = vzQKgjCCcwvlopbRLNqTtNvFb4720386;     vzQKgjCCcwvlopbRLNqTtNvFb4720386 = vzQKgjCCcwvlopbRLNqTtNvFb41972498;     vzQKgjCCcwvlopbRLNqTtNvFb41972498 = vzQKgjCCcwvlopbRLNqTtNvFb31477378;     vzQKgjCCcwvlopbRLNqTtNvFb31477378 = vzQKgjCCcwvlopbRLNqTtNvFb37507762;     vzQKgjCCcwvlopbRLNqTtNvFb37507762 = vzQKgjCCcwvlopbRLNqTtNvFb62111268;     vzQKgjCCcwvlopbRLNqTtNvFb62111268 = vzQKgjCCcwvlopbRLNqTtNvFb83893548;     vzQKgjCCcwvlopbRLNqTtNvFb83893548 = vzQKgjCCcwvlopbRLNqTtNvFb52508900;     vzQKgjCCcwvlopbRLNqTtNvFb52508900 = vzQKgjCCcwvlopbRLNqTtNvFb96763565;     vzQKgjCCcwvlopbRLNqTtNvFb96763565 = vzQKgjCCcwvlopbRLNqTtNvFb39805287;     vzQKgjCCcwvlopbRLNqTtNvFb39805287 = vzQKgjCCcwvlopbRLNqTtNvFb5598862;     vzQKgjCCcwvlopbRLNqTtNvFb5598862 = vzQKgjCCcwvlopbRLNqTtNvFb22229262;     vzQKgjCCcwvlopbRLNqTtNvFb22229262 = vzQKgjCCcwvlopbRLNqTtNvFb66117525;     vzQKgjCCcwvlopbRLNqTtNvFb66117525 = vzQKgjCCcwvlopbRLNqTtNvFb85203333;     vzQKgjCCcwvlopbRLNqTtNvFb85203333 = vzQKgjCCcwvlopbRLNqTtNvFb34386383;     vzQKgjCCcwvlopbRLNqTtNvFb34386383 = vzQKgjCCcwvlopbRLNqTtNvFb144587;     vzQKgjCCcwvlopbRLNqTtNvFb144587 = vzQKgjCCcwvlopbRLNqTtNvFb19345655;     vzQKgjCCcwvlopbRLNqTtNvFb19345655 = vzQKgjCCcwvlopbRLNqTtNvFb13627003;     vzQKgjCCcwvlopbRLNqTtNvFb13627003 = vzQKgjCCcwvlopbRLNqTtNvFb58117937;     vzQKgjCCcwvlopbRLNqTtNvFb58117937 = vzQKgjCCcwvlopbRLNqTtNvFb53723679;     vzQKgjCCcwvlopbRLNqTtNvFb53723679 = vzQKgjCCcwvlopbRLNqTtNvFb58649864;     vzQKgjCCcwvlopbRLNqTtNvFb58649864 = vzQKgjCCcwvlopbRLNqTtNvFb77653236;     vzQKgjCCcwvlopbRLNqTtNvFb77653236 = vzQKgjCCcwvlopbRLNqTtNvFb85958572;     vzQKgjCCcwvlopbRLNqTtNvFb85958572 = vzQKgjCCcwvlopbRLNqTtNvFb26976634;     vzQKgjCCcwvlopbRLNqTtNvFb26976634 = vzQKgjCCcwvlopbRLNqTtNvFb805219;     vzQKgjCCcwvlopbRLNqTtNvFb805219 = vzQKgjCCcwvlopbRLNqTtNvFb57004891;     vzQKgjCCcwvlopbRLNqTtNvFb57004891 = vzQKgjCCcwvlopbRLNqTtNvFb82984574;     vzQKgjCCcwvlopbRLNqTtNvFb82984574 = vzQKgjCCcwvlopbRLNqTtNvFb39057358;     vzQKgjCCcwvlopbRLNqTtNvFb39057358 = vzQKgjCCcwvlopbRLNqTtNvFb67782262;     vzQKgjCCcwvlopbRLNqTtNvFb67782262 = vzQKgjCCcwvlopbRLNqTtNvFb59266374;     vzQKgjCCcwvlopbRLNqTtNvFb59266374 = vzQKgjCCcwvlopbRLNqTtNvFb53662220;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void umsBXChEDxqAvYtQkwBsbEBCeDYtYFtnsyPRyoYgmYTfdBrlllDxgIPql50501838() {     long qXUeogxDCHxJbSvYUGCkWYcMm50181612 = -373886005;    long qXUeogxDCHxJbSvYUGCkWYcMm28939734 = -863529494;    long qXUeogxDCHxJbSvYUGCkWYcMm58604975 = -844256812;    long qXUeogxDCHxJbSvYUGCkWYcMm27753295 = -763355051;    long qXUeogxDCHxJbSvYUGCkWYcMm38339149 = -515401821;    long qXUeogxDCHxJbSvYUGCkWYcMm54879994 = 16956046;    long qXUeogxDCHxJbSvYUGCkWYcMm37623639 = -869581408;    long qXUeogxDCHxJbSvYUGCkWYcMm22405380 = -273255413;    long qXUeogxDCHxJbSvYUGCkWYcMm28550336 = -747608325;    long qXUeogxDCHxJbSvYUGCkWYcMm85287158 = -760366141;    long qXUeogxDCHxJbSvYUGCkWYcMm50196129 = -999941145;    long qXUeogxDCHxJbSvYUGCkWYcMm46080840 = -210389221;    long qXUeogxDCHxJbSvYUGCkWYcMm73755834 = -217063092;    long qXUeogxDCHxJbSvYUGCkWYcMm6176371 = -834619082;    long qXUeogxDCHxJbSvYUGCkWYcMm69573029 = -814202116;    long qXUeogxDCHxJbSvYUGCkWYcMm93898548 = -877551305;    long qXUeogxDCHxJbSvYUGCkWYcMm32299553 = -339503866;    long qXUeogxDCHxJbSvYUGCkWYcMm94447652 = -793837850;    long qXUeogxDCHxJbSvYUGCkWYcMm74940587 = -750221827;    long qXUeogxDCHxJbSvYUGCkWYcMm97802457 = 53964631;    long qXUeogxDCHxJbSvYUGCkWYcMm97091933 = 5916562;    long qXUeogxDCHxJbSvYUGCkWYcMm30935799 = -772651721;    long qXUeogxDCHxJbSvYUGCkWYcMm5005680 = -841614083;    long qXUeogxDCHxJbSvYUGCkWYcMm92459328 = 23631392;    long qXUeogxDCHxJbSvYUGCkWYcMm80334119 = -181192957;    long qXUeogxDCHxJbSvYUGCkWYcMm25613584 = -80354847;    long qXUeogxDCHxJbSvYUGCkWYcMm48950372 = -320002189;    long qXUeogxDCHxJbSvYUGCkWYcMm54564851 = -981834600;    long qXUeogxDCHxJbSvYUGCkWYcMm1698125 = -981913920;    long qXUeogxDCHxJbSvYUGCkWYcMm85821479 = -903813893;    long qXUeogxDCHxJbSvYUGCkWYcMm71507585 = -44481287;    long qXUeogxDCHxJbSvYUGCkWYcMm5072218 = -446986166;    long qXUeogxDCHxJbSvYUGCkWYcMm55050722 = -856159532;    long qXUeogxDCHxJbSvYUGCkWYcMm56383509 = -531359161;    long qXUeogxDCHxJbSvYUGCkWYcMm66182392 = -169883983;    long qXUeogxDCHxJbSvYUGCkWYcMm59535040 = -82287168;    long qXUeogxDCHxJbSvYUGCkWYcMm38220046 = -112966042;    long qXUeogxDCHxJbSvYUGCkWYcMm58950373 = -983494419;    long qXUeogxDCHxJbSvYUGCkWYcMm52760909 = -362980525;    long qXUeogxDCHxJbSvYUGCkWYcMm89613010 = -696716798;    long qXUeogxDCHxJbSvYUGCkWYcMm36058527 = -932807920;    long qXUeogxDCHxJbSvYUGCkWYcMm65466926 = -36298130;    long qXUeogxDCHxJbSvYUGCkWYcMm11695335 = -478408651;    long qXUeogxDCHxJbSvYUGCkWYcMm52854423 = -106924204;    long qXUeogxDCHxJbSvYUGCkWYcMm97489763 = -483756492;    long qXUeogxDCHxJbSvYUGCkWYcMm47949573 = -297999942;    long qXUeogxDCHxJbSvYUGCkWYcMm29778735 = -990118530;    long qXUeogxDCHxJbSvYUGCkWYcMm54152450 = 61462251;    long qXUeogxDCHxJbSvYUGCkWYcMm31551167 = -745409111;    long qXUeogxDCHxJbSvYUGCkWYcMm99732882 = -201931428;    long qXUeogxDCHxJbSvYUGCkWYcMm65799730 = 22500996;    long qXUeogxDCHxJbSvYUGCkWYcMm53542979 = -713805775;    long qXUeogxDCHxJbSvYUGCkWYcMm51395267 = -491146911;    long qXUeogxDCHxJbSvYUGCkWYcMm84688628 = -524141282;    long qXUeogxDCHxJbSvYUGCkWYcMm53409904 = -329892189;    long qXUeogxDCHxJbSvYUGCkWYcMm19245814 = -601234285;    long qXUeogxDCHxJbSvYUGCkWYcMm23934055 = 78084588;    long qXUeogxDCHxJbSvYUGCkWYcMm66145647 = -767888204;    long qXUeogxDCHxJbSvYUGCkWYcMm47419176 = -482162095;    long qXUeogxDCHxJbSvYUGCkWYcMm12725566 = -335046975;    long qXUeogxDCHxJbSvYUGCkWYcMm5929623 = -663041765;    long qXUeogxDCHxJbSvYUGCkWYcMm83058787 = -887746808;    long qXUeogxDCHxJbSvYUGCkWYcMm20707255 = -291341494;    long qXUeogxDCHxJbSvYUGCkWYcMm42728857 = -843794432;    long qXUeogxDCHxJbSvYUGCkWYcMm13779573 = -615884855;    long qXUeogxDCHxJbSvYUGCkWYcMm45123911 = -452954979;    long qXUeogxDCHxJbSvYUGCkWYcMm91030118 = -354229689;    long qXUeogxDCHxJbSvYUGCkWYcMm17372325 = -685703931;    long qXUeogxDCHxJbSvYUGCkWYcMm39993978 = -564735100;    long qXUeogxDCHxJbSvYUGCkWYcMm10037990 = -631914949;    long qXUeogxDCHxJbSvYUGCkWYcMm55678503 = -664585263;    long qXUeogxDCHxJbSvYUGCkWYcMm73349180 = -356009448;    long qXUeogxDCHxJbSvYUGCkWYcMm41686743 = -330857326;    long qXUeogxDCHxJbSvYUGCkWYcMm85327577 = 46494970;    long qXUeogxDCHxJbSvYUGCkWYcMm61743931 = -13227450;    long qXUeogxDCHxJbSvYUGCkWYcMm31625008 = -957785308;    long qXUeogxDCHxJbSvYUGCkWYcMm19240464 = -194243070;    long qXUeogxDCHxJbSvYUGCkWYcMm52151256 = -634689879;    long qXUeogxDCHxJbSvYUGCkWYcMm94969564 = -492612117;    long qXUeogxDCHxJbSvYUGCkWYcMm32384547 = -883193015;    long qXUeogxDCHxJbSvYUGCkWYcMm95834849 = -90236317;    long qXUeogxDCHxJbSvYUGCkWYcMm94797922 = -281464441;    long qXUeogxDCHxJbSvYUGCkWYcMm23013685 = -136425490;    long qXUeogxDCHxJbSvYUGCkWYcMm1965242 = -679982493;    long qXUeogxDCHxJbSvYUGCkWYcMm20021750 = -826314890;    long qXUeogxDCHxJbSvYUGCkWYcMm17964607 = -330675513;    long qXUeogxDCHxJbSvYUGCkWYcMm53676951 = -955839256;    long qXUeogxDCHxJbSvYUGCkWYcMm70362093 = -232018251;    long qXUeogxDCHxJbSvYUGCkWYcMm2973606 = -101466973;    long qXUeogxDCHxJbSvYUGCkWYcMm46936579 = -568649698;    long qXUeogxDCHxJbSvYUGCkWYcMm35600985 = -60371756;    long qXUeogxDCHxJbSvYUGCkWYcMm72074398 = -345077839;    long qXUeogxDCHxJbSvYUGCkWYcMm11531198 = -401332324;    long qXUeogxDCHxJbSvYUGCkWYcMm40035343 = 72066449;    long qXUeogxDCHxJbSvYUGCkWYcMm83683388 = 66324966;    long qXUeogxDCHxJbSvYUGCkWYcMm52999739 = 54938887;    long qXUeogxDCHxJbSvYUGCkWYcMm44759671 = -744956637;    long qXUeogxDCHxJbSvYUGCkWYcMm68966478 = -634614220;    long qXUeogxDCHxJbSvYUGCkWYcMm39074850 = -491039349;    long qXUeogxDCHxJbSvYUGCkWYcMm52365852 = -373886005;     qXUeogxDCHxJbSvYUGCkWYcMm50181612 = qXUeogxDCHxJbSvYUGCkWYcMm28939734;     qXUeogxDCHxJbSvYUGCkWYcMm28939734 = qXUeogxDCHxJbSvYUGCkWYcMm58604975;     qXUeogxDCHxJbSvYUGCkWYcMm58604975 = qXUeogxDCHxJbSvYUGCkWYcMm27753295;     qXUeogxDCHxJbSvYUGCkWYcMm27753295 = qXUeogxDCHxJbSvYUGCkWYcMm38339149;     qXUeogxDCHxJbSvYUGCkWYcMm38339149 = qXUeogxDCHxJbSvYUGCkWYcMm54879994;     qXUeogxDCHxJbSvYUGCkWYcMm54879994 = qXUeogxDCHxJbSvYUGCkWYcMm37623639;     qXUeogxDCHxJbSvYUGCkWYcMm37623639 = qXUeogxDCHxJbSvYUGCkWYcMm22405380;     qXUeogxDCHxJbSvYUGCkWYcMm22405380 = qXUeogxDCHxJbSvYUGCkWYcMm28550336;     qXUeogxDCHxJbSvYUGCkWYcMm28550336 = qXUeogxDCHxJbSvYUGCkWYcMm85287158;     qXUeogxDCHxJbSvYUGCkWYcMm85287158 = qXUeogxDCHxJbSvYUGCkWYcMm50196129;     qXUeogxDCHxJbSvYUGCkWYcMm50196129 = qXUeogxDCHxJbSvYUGCkWYcMm46080840;     qXUeogxDCHxJbSvYUGCkWYcMm46080840 = qXUeogxDCHxJbSvYUGCkWYcMm73755834;     qXUeogxDCHxJbSvYUGCkWYcMm73755834 = qXUeogxDCHxJbSvYUGCkWYcMm6176371;     qXUeogxDCHxJbSvYUGCkWYcMm6176371 = qXUeogxDCHxJbSvYUGCkWYcMm69573029;     qXUeogxDCHxJbSvYUGCkWYcMm69573029 = qXUeogxDCHxJbSvYUGCkWYcMm93898548;     qXUeogxDCHxJbSvYUGCkWYcMm93898548 = qXUeogxDCHxJbSvYUGCkWYcMm32299553;     qXUeogxDCHxJbSvYUGCkWYcMm32299553 = qXUeogxDCHxJbSvYUGCkWYcMm94447652;     qXUeogxDCHxJbSvYUGCkWYcMm94447652 = qXUeogxDCHxJbSvYUGCkWYcMm74940587;     qXUeogxDCHxJbSvYUGCkWYcMm74940587 = qXUeogxDCHxJbSvYUGCkWYcMm97802457;     qXUeogxDCHxJbSvYUGCkWYcMm97802457 = qXUeogxDCHxJbSvYUGCkWYcMm97091933;     qXUeogxDCHxJbSvYUGCkWYcMm97091933 = qXUeogxDCHxJbSvYUGCkWYcMm30935799;     qXUeogxDCHxJbSvYUGCkWYcMm30935799 = qXUeogxDCHxJbSvYUGCkWYcMm5005680;     qXUeogxDCHxJbSvYUGCkWYcMm5005680 = qXUeogxDCHxJbSvYUGCkWYcMm92459328;     qXUeogxDCHxJbSvYUGCkWYcMm92459328 = qXUeogxDCHxJbSvYUGCkWYcMm80334119;     qXUeogxDCHxJbSvYUGCkWYcMm80334119 = qXUeogxDCHxJbSvYUGCkWYcMm25613584;     qXUeogxDCHxJbSvYUGCkWYcMm25613584 = qXUeogxDCHxJbSvYUGCkWYcMm48950372;     qXUeogxDCHxJbSvYUGCkWYcMm48950372 = qXUeogxDCHxJbSvYUGCkWYcMm54564851;     qXUeogxDCHxJbSvYUGCkWYcMm54564851 = qXUeogxDCHxJbSvYUGCkWYcMm1698125;     qXUeogxDCHxJbSvYUGCkWYcMm1698125 = qXUeogxDCHxJbSvYUGCkWYcMm85821479;     qXUeogxDCHxJbSvYUGCkWYcMm85821479 = qXUeogxDCHxJbSvYUGCkWYcMm71507585;     qXUeogxDCHxJbSvYUGCkWYcMm71507585 = qXUeogxDCHxJbSvYUGCkWYcMm5072218;     qXUeogxDCHxJbSvYUGCkWYcMm5072218 = qXUeogxDCHxJbSvYUGCkWYcMm55050722;     qXUeogxDCHxJbSvYUGCkWYcMm55050722 = qXUeogxDCHxJbSvYUGCkWYcMm56383509;     qXUeogxDCHxJbSvYUGCkWYcMm56383509 = qXUeogxDCHxJbSvYUGCkWYcMm66182392;     qXUeogxDCHxJbSvYUGCkWYcMm66182392 = qXUeogxDCHxJbSvYUGCkWYcMm59535040;     qXUeogxDCHxJbSvYUGCkWYcMm59535040 = qXUeogxDCHxJbSvYUGCkWYcMm38220046;     qXUeogxDCHxJbSvYUGCkWYcMm38220046 = qXUeogxDCHxJbSvYUGCkWYcMm58950373;     qXUeogxDCHxJbSvYUGCkWYcMm58950373 = qXUeogxDCHxJbSvYUGCkWYcMm52760909;     qXUeogxDCHxJbSvYUGCkWYcMm52760909 = qXUeogxDCHxJbSvYUGCkWYcMm89613010;     qXUeogxDCHxJbSvYUGCkWYcMm89613010 = qXUeogxDCHxJbSvYUGCkWYcMm36058527;     qXUeogxDCHxJbSvYUGCkWYcMm36058527 = qXUeogxDCHxJbSvYUGCkWYcMm65466926;     qXUeogxDCHxJbSvYUGCkWYcMm65466926 = qXUeogxDCHxJbSvYUGCkWYcMm11695335;     qXUeogxDCHxJbSvYUGCkWYcMm11695335 = qXUeogxDCHxJbSvYUGCkWYcMm52854423;     qXUeogxDCHxJbSvYUGCkWYcMm52854423 = qXUeogxDCHxJbSvYUGCkWYcMm97489763;     qXUeogxDCHxJbSvYUGCkWYcMm97489763 = qXUeogxDCHxJbSvYUGCkWYcMm47949573;     qXUeogxDCHxJbSvYUGCkWYcMm47949573 = qXUeogxDCHxJbSvYUGCkWYcMm29778735;     qXUeogxDCHxJbSvYUGCkWYcMm29778735 = qXUeogxDCHxJbSvYUGCkWYcMm54152450;     qXUeogxDCHxJbSvYUGCkWYcMm54152450 = qXUeogxDCHxJbSvYUGCkWYcMm31551167;     qXUeogxDCHxJbSvYUGCkWYcMm31551167 = qXUeogxDCHxJbSvYUGCkWYcMm99732882;     qXUeogxDCHxJbSvYUGCkWYcMm99732882 = qXUeogxDCHxJbSvYUGCkWYcMm65799730;     qXUeogxDCHxJbSvYUGCkWYcMm65799730 = qXUeogxDCHxJbSvYUGCkWYcMm53542979;     qXUeogxDCHxJbSvYUGCkWYcMm53542979 = qXUeogxDCHxJbSvYUGCkWYcMm51395267;     qXUeogxDCHxJbSvYUGCkWYcMm51395267 = qXUeogxDCHxJbSvYUGCkWYcMm84688628;     qXUeogxDCHxJbSvYUGCkWYcMm84688628 = qXUeogxDCHxJbSvYUGCkWYcMm53409904;     qXUeogxDCHxJbSvYUGCkWYcMm53409904 = qXUeogxDCHxJbSvYUGCkWYcMm19245814;     qXUeogxDCHxJbSvYUGCkWYcMm19245814 = qXUeogxDCHxJbSvYUGCkWYcMm23934055;     qXUeogxDCHxJbSvYUGCkWYcMm23934055 = qXUeogxDCHxJbSvYUGCkWYcMm66145647;     qXUeogxDCHxJbSvYUGCkWYcMm66145647 = qXUeogxDCHxJbSvYUGCkWYcMm47419176;     qXUeogxDCHxJbSvYUGCkWYcMm47419176 = qXUeogxDCHxJbSvYUGCkWYcMm12725566;     qXUeogxDCHxJbSvYUGCkWYcMm12725566 = qXUeogxDCHxJbSvYUGCkWYcMm5929623;     qXUeogxDCHxJbSvYUGCkWYcMm5929623 = qXUeogxDCHxJbSvYUGCkWYcMm83058787;     qXUeogxDCHxJbSvYUGCkWYcMm83058787 = qXUeogxDCHxJbSvYUGCkWYcMm20707255;     qXUeogxDCHxJbSvYUGCkWYcMm20707255 = qXUeogxDCHxJbSvYUGCkWYcMm42728857;     qXUeogxDCHxJbSvYUGCkWYcMm42728857 = qXUeogxDCHxJbSvYUGCkWYcMm13779573;     qXUeogxDCHxJbSvYUGCkWYcMm13779573 = qXUeogxDCHxJbSvYUGCkWYcMm45123911;     qXUeogxDCHxJbSvYUGCkWYcMm45123911 = qXUeogxDCHxJbSvYUGCkWYcMm91030118;     qXUeogxDCHxJbSvYUGCkWYcMm91030118 = qXUeogxDCHxJbSvYUGCkWYcMm17372325;     qXUeogxDCHxJbSvYUGCkWYcMm17372325 = qXUeogxDCHxJbSvYUGCkWYcMm39993978;     qXUeogxDCHxJbSvYUGCkWYcMm39993978 = qXUeogxDCHxJbSvYUGCkWYcMm10037990;     qXUeogxDCHxJbSvYUGCkWYcMm10037990 = qXUeogxDCHxJbSvYUGCkWYcMm55678503;     qXUeogxDCHxJbSvYUGCkWYcMm55678503 = qXUeogxDCHxJbSvYUGCkWYcMm73349180;     qXUeogxDCHxJbSvYUGCkWYcMm73349180 = qXUeogxDCHxJbSvYUGCkWYcMm41686743;     qXUeogxDCHxJbSvYUGCkWYcMm41686743 = qXUeogxDCHxJbSvYUGCkWYcMm85327577;     qXUeogxDCHxJbSvYUGCkWYcMm85327577 = qXUeogxDCHxJbSvYUGCkWYcMm61743931;     qXUeogxDCHxJbSvYUGCkWYcMm61743931 = qXUeogxDCHxJbSvYUGCkWYcMm31625008;     qXUeogxDCHxJbSvYUGCkWYcMm31625008 = qXUeogxDCHxJbSvYUGCkWYcMm19240464;     qXUeogxDCHxJbSvYUGCkWYcMm19240464 = qXUeogxDCHxJbSvYUGCkWYcMm52151256;     qXUeogxDCHxJbSvYUGCkWYcMm52151256 = qXUeogxDCHxJbSvYUGCkWYcMm94969564;     qXUeogxDCHxJbSvYUGCkWYcMm94969564 = qXUeogxDCHxJbSvYUGCkWYcMm32384547;     qXUeogxDCHxJbSvYUGCkWYcMm32384547 = qXUeogxDCHxJbSvYUGCkWYcMm95834849;     qXUeogxDCHxJbSvYUGCkWYcMm95834849 = qXUeogxDCHxJbSvYUGCkWYcMm94797922;     qXUeogxDCHxJbSvYUGCkWYcMm94797922 = qXUeogxDCHxJbSvYUGCkWYcMm23013685;     qXUeogxDCHxJbSvYUGCkWYcMm23013685 = qXUeogxDCHxJbSvYUGCkWYcMm1965242;     qXUeogxDCHxJbSvYUGCkWYcMm1965242 = qXUeogxDCHxJbSvYUGCkWYcMm20021750;     qXUeogxDCHxJbSvYUGCkWYcMm20021750 = qXUeogxDCHxJbSvYUGCkWYcMm17964607;     qXUeogxDCHxJbSvYUGCkWYcMm17964607 = qXUeogxDCHxJbSvYUGCkWYcMm53676951;     qXUeogxDCHxJbSvYUGCkWYcMm53676951 = qXUeogxDCHxJbSvYUGCkWYcMm70362093;     qXUeogxDCHxJbSvYUGCkWYcMm70362093 = qXUeogxDCHxJbSvYUGCkWYcMm2973606;     qXUeogxDCHxJbSvYUGCkWYcMm2973606 = qXUeogxDCHxJbSvYUGCkWYcMm46936579;     qXUeogxDCHxJbSvYUGCkWYcMm46936579 = qXUeogxDCHxJbSvYUGCkWYcMm35600985;     qXUeogxDCHxJbSvYUGCkWYcMm35600985 = qXUeogxDCHxJbSvYUGCkWYcMm72074398;     qXUeogxDCHxJbSvYUGCkWYcMm72074398 = qXUeogxDCHxJbSvYUGCkWYcMm11531198;     qXUeogxDCHxJbSvYUGCkWYcMm11531198 = qXUeogxDCHxJbSvYUGCkWYcMm40035343;     qXUeogxDCHxJbSvYUGCkWYcMm40035343 = qXUeogxDCHxJbSvYUGCkWYcMm83683388;     qXUeogxDCHxJbSvYUGCkWYcMm83683388 = qXUeogxDCHxJbSvYUGCkWYcMm52999739;     qXUeogxDCHxJbSvYUGCkWYcMm52999739 = qXUeogxDCHxJbSvYUGCkWYcMm44759671;     qXUeogxDCHxJbSvYUGCkWYcMm44759671 = qXUeogxDCHxJbSvYUGCkWYcMm68966478;     qXUeogxDCHxJbSvYUGCkWYcMm68966478 = qXUeogxDCHxJbSvYUGCkWYcMm39074850;     qXUeogxDCHxJbSvYUGCkWYcMm39074850 = qXUeogxDCHxJbSvYUGCkWYcMm52365852;     qXUeogxDCHxJbSvYUGCkWYcMm52365852 = qXUeogxDCHxJbSvYUGCkWYcMm50181612;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WbiSHSIcGcUQMDSGzAxXefXVWZMSFYXozcHjEoQFKHaHzlxbXbeqKxQqE65550906() {     long MvhGpXhFgQjwjBLksMXFQWlck56298719 = -485787894;    long MvhGpXhFgQjwjBLksMXFQWlck72313013 = -573129275;    long MvhGpXhFgQjwjBLksMXFQWlck74647159 = -995089733;    long MvhGpXhFgQjwjBLksMXFQWlck54828076 = -954103682;    long MvhGpXhFgQjwjBLksMXFQWlck7234638 = 63948308;    long MvhGpXhFgQjwjBLksMXFQWlck46297197 = -247540189;    long MvhGpXhFgQjwjBLksMXFQWlck98112604 = 91453615;    long MvhGpXhFgQjwjBLksMXFQWlck72165270 = -560129327;    long MvhGpXhFgQjwjBLksMXFQWlck93192831 = -515640990;    long MvhGpXhFgQjwjBLksMXFQWlck26516818 = 10658381;    long MvhGpXhFgQjwjBLksMXFQWlck10306419 = -877378731;    long MvhGpXhFgQjwjBLksMXFQWlck77903883 = -654795423;    long MvhGpXhFgQjwjBLksMXFQWlck59964953 = -656954181;    long MvhGpXhFgQjwjBLksMXFQWlck89320047 = -266857650;    long MvhGpXhFgQjwjBLksMXFQWlck65315455 = -404664283;    long MvhGpXhFgQjwjBLksMXFQWlck35403942 = -850550848;    long MvhGpXhFgQjwjBLksMXFQWlck26135556 = -956048979;    long MvhGpXhFgQjwjBLksMXFQWlck91500805 = -459360493;    long MvhGpXhFgQjwjBLksMXFQWlck36770429 = -55990924;    long MvhGpXhFgQjwjBLksMXFQWlck78352622 = -302938289;    long MvhGpXhFgQjwjBLksMXFQWlck85645127 = -949570893;    long MvhGpXhFgQjwjBLksMXFQWlck17456822 = -680581437;    long MvhGpXhFgQjwjBLksMXFQWlck40596471 = -588131570;    long MvhGpXhFgQjwjBLksMXFQWlck76451702 = -198673596;    long MvhGpXhFgQjwjBLksMXFQWlck24033770 = -554388990;    long MvhGpXhFgQjwjBLksMXFQWlck50335259 = 40989830;    long MvhGpXhFgQjwjBLksMXFQWlck47410150 = -220664393;    long MvhGpXhFgQjwjBLksMXFQWlck67671976 = 52236446;    long MvhGpXhFgQjwjBLksMXFQWlck67830380 = -104296624;    long MvhGpXhFgQjwjBLksMXFQWlck54437116 = -721284761;    long MvhGpXhFgQjwjBLksMXFQWlck63750135 = 42197775;    long MvhGpXhFgQjwjBLksMXFQWlck2682840 = -156432982;    long MvhGpXhFgQjwjBLksMXFQWlck64761670 = -748772902;    long MvhGpXhFgQjwjBLksMXFQWlck51214074 = -282900927;    long MvhGpXhFgQjwjBLksMXFQWlck27657045 = -808617088;    long MvhGpXhFgQjwjBLksMXFQWlck28260953 = -296313275;    long MvhGpXhFgQjwjBLksMXFQWlck19481981 = -66601911;    long MvhGpXhFgQjwjBLksMXFQWlck93040585 = -755000428;    long MvhGpXhFgQjwjBLksMXFQWlck26371163 = -356904022;    long MvhGpXhFgQjwjBLksMXFQWlck77114948 = -70156021;    long MvhGpXhFgQjwjBLksMXFQWlck41727751 = -998081814;    long MvhGpXhFgQjwjBLksMXFQWlck97617382 = -306440408;    long MvhGpXhFgQjwjBLksMXFQWlck89762313 = -559213235;    long MvhGpXhFgQjwjBLksMXFQWlck40262164 = -126267142;    long MvhGpXhFgQjwjBLksMXFQWlck9442229 = -145654647;    long MvhGpXhFgQjwjBLksMXFQWlck59888768 = -283216059;    long MvhGpXhFgQjwjBLksMXFQWlck47557309 = -8894068;    long MvhGpXhFgQjwjBLksMXFQWlck62109390 = 51566718;    long MvhGpXhFgQjwjBLksMXFQWlck41226895 = -831146099;    long MvhGpXhFgQjwjBLksMXFQWlck12644536 = -288942236;    long MvhGpXhFgQjwjBLksMXFQWlck1500409 = -919792675;    long MvhGpXhFgQjwjBLksMXFQWlck64352698 = -514532095;    long MvhGpXhFgQjwjBLksMXFQWlck99643724 = -282936498;    long MvhGpXhFgQjwjBLksMXFQWlck80657509 = -844611427;    long MvhGpXhFgQjwjBLksMXFQWlck79905779 = 69576029;    long MvhGpXhFgQjwjBLksMXFQWlck38841897 = -805206457;    long MvhGpXhFgQjwjBLksMXFQWlck31716542 = -984997706;    long MvhGpXhFgQjwjBLksMXFQWlck98195457 = -696416137;    long MvhGpXhFgQjwjBLksMXFQWlck30794306 = -299714692;    long MvhGpXhFgQjwjBLksMXFQWlck56899379 = -977041523;    long MvhGpXhFgQjwjBLksMXFQWlck98887046 = 73124203;    long MvhGpXhFgQjwjBLksMXFQWlck30440629 = -960782831;    long MvhGpXhFgQjwjBLksMXFQWlck4334891 = -355832703;    long MvhGpXhFgQjwjBLksMXFQWlck38755715 = -794356230;    long MvhGpXhFgQjwjBLksMXFQWlck62766683 = 68460605;    long MvhGpXhFgQjwjBLksMXFQWlck7623580 = -620945750;    long MvhGpXhFgQjwjBLksMXFQWlck13142213 = -906022521;    long MvhGpXhFgQjwjBLksMXFQWlck8750880 = -274053255;    long MvhGpXhFgQjwjBLksMXFQWlck61663002 = -458240562;    long MvhGpXhFgQjwjBLksMXFQWlck37054503 = -8351008;    long MvhGpXhFgQjwjBLksMXFQWlck15921962 = -683948937;    long MvhGpXhFgQjwjBLksMXFQWlck33094971 = -101048551;    long MvhGpXhFgQjwjBLksMXFQWlck65129642 = -2456472;    long MvhGpXhFgQjwjBLksMXFQWlck59655481 = -985834904;    long MvhGpXhFgQjwjBLksMXFQWlck36624872 = -304856475;    long MvhGpXhFgQjwjBLksMXFQWlck88027744 = -543130486;    long MvhGpXhFgQjwjBLksMXFQWlck27694509 = -21368203;    long MvhGpXhFgQjwjBLksMXFQWlck334308 = -361864428;    long MvhGpXhFgQjwjBLksMXFQWlck67009473 = 46981050;    long MvhGpXhFgQjwjBLksMXFQWlck64145002 = -171172932;    long MvhGpXhFgQjwjBLksMXFQWlck2777951 = -950116103;    long MvhGpXhFgQjwjBLksMXFQWlck85300759 = -172231111;    long MvhGpXhFgQjwjBLksMXFQWlck26445081 = -116617456;    long MvhGpXhFgQjwjBLksMXFQWlck55185844 = -815354389;    long MvhGpXhFgQjwjBLksMXFQWlck52936708 = -801492086;    long MvhGpXhFgQjwjBLksMXFQWlck99397436 = -443270131;    long MvhGpXhFgQjwjBLksMXFQWlck3039116 = -873496484;    long MvhGpXhFgQjwjBLksMXFQWlck84104161 = -904161476;    long MvhGpXhFgQjwjBLksMXFQWlck71308294 = -252476956;    long MvhGpXhFgQjwjBLksMXFQWlck88815147 = 96589369;    long MvhGpXhFgQjwjBLksMXFQWlck96544410 = -311315570;    long MvhGpXhFgQjwjBLksMXFQWlck21286523 = -370185775;    long MvhGpXhFgQjwjBLksMXFQWlck62246279 = -355285736;    long MvhGpXhFgQjwjBLksMXFQWlck69471783 = -379862500;    long MvhGpXhFgQjwjBLksMXFQWlck78227901 = -43280224;    long MvhGpXhFgQjwjBLksMXFQWlck11287123 = 62701016;    long MvhGpXhFgQjwjBLksMXFQWlck93282492 = -950607706;    long MvhGpXhFgQjwjBLksMXFQWlck51006598 = -764857005;    long MvhGpXhFgQjwjBLksMXFQWlck77495480 = -94727748;    long MvhGpXhFgQjwjBLksMXFQWlck1818649 = -485787894;     MvhGpXhFgQjwjBLksMXFQWlck56298719 = MvhGpXhFgQjwjBLksMXFQWlck72313013;     MvhGpXhFgQjwjBLksMXFQWlck72313013 = MvhGpXhFgQjwjBLksMXFQWlck74647159;     MvhGpXhFgQjwjBLksMXFQWlck74647159 = MvhGpXhFgQjwjBLksMXFQWlck54828076;     MvhGpXhFgQjwjBLksMXFQWlck54828076 = MvhGpXhFgQjwjBLksMXFQWlck7234638;     MvhGpXhFgQjwjBLksMXFQWlck7234638 = MvhGpXhFgQjwjBLksMXFQWlck46297197;     MvhGpXhFgQjwjBLksMXFQWlck46297197 = MvhGpXhFgQjwjBLksMXFQWlck98112604;     MvhGpXhFgQjwjBLksMXFQWlck98112604 = MvhGpXhFgQjwjBLksMXFQWlck72165270;     MvhGpXhFgQjwjBLksMXFQWlck72165270 = MvhGpXhFgQjwjBLksMXFQWlck93192831;     MvhGpXhFgQjwjBLksMXFQWlck93192831 = MvhGpXhFgQjwjBLksMXFQWlck26516818;     MvhGpXhFgQjwjBLksMXFQWlck26516818 = MvhGpXhFgQjwjBLksMXFQWlck10306419;     MvhGpXhFgQjwjBLksMXFQWlck10306419 = MvhGpXhFgQjwjBLksMXFQWlck77903883;     MvhGpXhFgQjwjBLksMXFQWlck77903883 = MvhGpXhFgQjwjBLksMXFQWlck59964953;     MvhGpXhFgQjwjBLksMXFQWlck59964953 = MvhGpXhFgQjwjBLksMXFQWlck89320047;     MvhGpXhFgQjwjBLksMXFQWlck89320047 = MvhGpXhFgQjwjBLksMXFQWlck65315455;     MvhGpXhFgQjwjBLksMXFQWlck65315455 = MvhGpXhFgQjwjBLksMXFQWlck35403942;     MvhGpXhFgQjwjBLksMXFQWlck35403942 = MvhGpXhFgQjwjBLksMXFQWlck26135556;     MvhGpXhFgQjwjBLksMXFQWlck26135556 = MvhGpXhFgQjwjBLksMXFQWlck91500805;     MvhGpXhFgQjwjBLksMXFQWlck91500805 = MvhGpXhFgQjwjBLksMXFQWlck36770429;     MvhGpXhFgQjwjBLksMXFQWlck36770429 = MvhGpXhFgQjwjBLksMXFQWlck78352622;     MvhGpXhFgQjwjBLksMXFQWlck78352622 = MvhGpXhFgQjwjBLksMXFQWlck85645127;     MvhGpXhFgQjwjBLksMXFQWlck85645127 = MvhGpXhFgQjwjBLksMXFQWlck17456822;     MvhGpXhFgQjwjBLksMXFQWlck17456822 = MvhGpXhFgQjwjBLksMXFQWlck40596471;     MvhGpXhFgQjwjBLksMXFQWlck40596471 = MvhGpXhFgQjwjBLksMXFQWlck76451702;     MvhGpXhFgQjwjBLksMXFQWlck76451702 = MvhGpXhFgQjwjBLksMXFQWlck24033770;     MvhGpXhFgQjwjBLksMXFQWlck24033770 = MvhGpXhFgQjwjBLksMXFQWlck50335259;     MvhGpXhFgQjwjBLksMXFQWlck50335259 = MvhGpXhFgQjwjBLksMXFQWlck47410150;     MvhGpXhFgQjwjBLksMXFQWlck47410150 = MvhGpXhFgQjwjBLksMXFQWlck67671976;     MvhGpXhFgQjwjBLksMXFQWlck67671976 = MvhGpXhFgQjwjBLksMXFQWlck67830380;     MvhGpXhFgQjwjBLksMXFQWlck67830380 = MvhGpXhFgQjwjBLksMXFQWlck54437116;     MvhGpXhFgQjwjBLksMXFQWlck54437116 = MvhGpXhFgQjwjBLksMXFQWlck63750135;     MvhGpXhFgQjwjBLksMXFQWlck63750135 = MvhGpXhFgQjwjBLksMXFQWlck2682840;     MvhGpXhFgQjwjBLksMXFQWlck2682840 = MvhGpXhFgQjwjBLksMXFQWlck64761670;     MvhGpXhFgQjwjBLksMXFQWlck64761670 = MvhGpXhFgQjwjBLksMXFQWlck51214074;     MvhGpXhFgQjwjBLksMXFQWlck51214074 = MvhGpXhFgQjwjBLksMXFQWlck27657045;     MvhGpXhFgQjwjBLksMXFQWlck27657045 = MvhGpXhFgQjwjBLksMXFQWlck28260953;     MvhGpXhFgQjwjBLksMXFQWlck28260953 = MvhGpXhFgQjwjBLksMXFQWlck19481981;     MvhGpXhFgQjwjBLksMXFQWlck19481981 = MvhGpXhFgQjwjBLksMXFQWlck93040585;     MvhGpXhFgQjwjBLksMXFQWlck93040585 = MvhGpXhFgQjwjBLksMXFQWlck26371163;     MvhGpXhFgQjwjBLksMXFQWlck26371163 = MvhGpXhFgQjwjBLksMXFQWlck77114948;     MvhGpXhFgQjwjBLksMXFQWlck77114948 = MvhGpXhFgQjwjBLksMXFQWlck41727751;     MvhGpXhFgQjwjBLksMXFQWlck41727751 = MvhGpXhFgQjwjBLksMXFQWlck97617382;     MvhGpXhFgQjwjBLksMXFQWlck97617382 = MvhGpXhFgQjwjBLksMXFQWlck89762313;     MvhGpXhFgQjwjBLksMXFQWlck89762313 = MvhGpXhFgQjwjBLksMXFQWlck40262164;     MvhGpXhFgQjwjBLksMXFQWlck40262164 = MvhGpXhFgQjwjBLksMXFQWlck9442229;     MvhGpXhFgQjwjBLksMXFQWlck9442229 = MvhGpXhFgQjwjBLksMXFQWlck59888768;     MvhGpXhFgQjwjBLksMXFQWlck59888768 = MvhGpXhFgQjwjBLksMXFQWlck47557309;     MvhGpXhFgQjwjBLksMXFQWlck47557309 = MvhGpXhFgQjwjBLksMXFQWlck62109390;     MvhGpXhFgQjwjBLksMXFQWlck62109390 = MvhGpXhFgQjwjBLksMXFQWlck41226895;     MvhGpXhFgQjwjBLksMXFQWlck41226895 = MvhGpXhFgQjwjBLksMXFQWlck12644536;     MvhGpXhFgQjwjBLksMXFQWlck12644536 = MvhGpXhFgQjwjBLksMXFQWlck1500409;     MvhGpXhFgQjwjBLksMXFQWlck1500409 = MvhGpXhFgQjwjBLksMXFQWlck64352698;     MvhGpXhFgQjwjBLksMXFQWlck64352698 = MvhGpXhFgQjwjBLksMXFQWlck99643724;     MvhGpXhFgQjwjBLksMXFQWlck99643724 = MvhGpXhFgQjwjBLksMXFQWlck80657509;     MvhGpXhFgQjwjBLksMXFQWlck80657509 = MvhGpXhFgQjwjBLksMXFQWlck79905779;     MvhGpXhFgQjwjBLksMXFQWlck79905779 = MvhGpXhFgQjwjBLksMXFQWlck38841897;     MvhGpXhFgQjwjBLksMXFQWlck38841897 = MvhGpXhFgQjwjBLksMXFQWlck31716542;     MvhGpXhFgQjwjBLksMXFQWlck31716542 = MvhGpXhFgQjwjBLksMXFQWlck98195457;     MvhGpXhFgQjwjBLksMXFQWlck98195457 = MvhGpXhFgQjwjBLksMXFQWlck30794306;     MvhGpXhFgQjwjBLksMXFQWlck30794306 = MvhGpXhFgQjwjBLksMXFQWlck56899379;     MvhGpXhFgQjwjBLksMXFQWlck56899379 = MvhGpXhFgQjwjBLksMXFQWlck98887046;     MvhGpXhFgQjwjBLksMXFQWlck98887046 = MvhGpXhFgQjwjBLksMXFQWlck30440629;     MvhGpXhFgQjwjBLksMXFQWlck30440629 = MvhGpXhFgQjwjBLksMXFQWlck4334891;     MvhGpXhFgQjwjBLksMXFQWlck4334891 = MvhGpXhFgQjwjBLksMXFQWlck38755715;     MvhGpXhFgQjwjBLksMXFQWlck38755715 = MvhGpXhFgQjwjBLksMXFQWlck62766683;     MvhGpXhFgQjwjBLksMXFQWlck62766683 = MvhGpXhFgQjwjBLksMXFQWlck7623580;     MvhGpXhFgQjwjBLksMXFQWlck7623580 = MvhGpXhFgQjwjBLksMXFQWlck13142213;     MvhGpXhFgQjwjBLksMXFQWlck13142213 = MvhGpXhFgQjwjBLksMXFQWlck8750880;     MvhGpXhFgQjwjBLksMXFQWlck8750880 = MvhGpXhFgQjwjBLksMXFQWlck61663002;     MvhGpXhFgQjwjBLksMXFQWlck61663002 = MvhGpXhFgQjwjBLksMXFQWlck37054503;     MvhGpXhFgQjwjBLksMXFQWlck37054503 = MvhGpXhFgQjwjBLksMXFQWlck15921962;     MvhGpXhFgQjwjBLksMXFQWlck15921962 = MvhGpXhFgQjwjBLksMXFQWlck33094971;     MvhGpXhFgQjwjBLksMXFQWlck33094971 = MvhGpXhFgQjwjBLksMXFQWlck65129642;     MvhGpXhFgQjwjBLksMXFQWlck65129642 = MvhGpXhFgQjwjBLksMXFQWlck59655481;     MvhGpXhFgQjwjBLksMXFQWlck59655481 = MvhGpXhFgQjwjBLksMXFQWlck36624872;     MvhGpXhFgQjwjBLksMXFQWlck36624872 = MvhGpXhFgQjwjBLksMXFQWlck88027744;     MvhGpXhFgQjwjBLksMXFQWlck88027744 = MvhGpXhFgQjwjBLksMXFQWlck27694509;     MvhGpXhFgQjwjBLksMXFQWlck27694509 = MvhGpXhFgQjwjBLksMXFQWlck334308;     MvhGpXhFgQjwjBLksMXFQWlck334308 = MvhGpXhFgQjwjBLksMXFQWlck67009473;     MvhGpXhFgQjwjBLksMXFQWlck67009473 = MvhGpXhFgQjwjBLksMXFQWlck64145002;     MvhGpXhFgQjwjBLksMXFQWlck64145002 = MvhGpXhFgQjwjBLksMXFQWlck2777951;     MvhGpXhFgQjwjBLksMXFQWlck2777951 = MvhGpXhFgQjwjBLksMXFQWlck85300759;     MvhGpXhFgQjwjBLksMXFQWlck85300759 = MvhGpXhFgQjwjBLksMXFQWlck26445081;     MvhGpXhFgQjwjBLksMXFQWlck26445081 = MvhGpXhFgQjwjBLksMXFQWlck55185844;     MvhGpXhFgQjwjBLksMXFQWlck55185844 = MvhGpXhFgQjwjBLksMXFQWlck52936708;     MvhGpXhFgQjwjBLksMXFQWlck52936708 = MvhGpXhFgQjwjBLksMXFQWlck99397436;     MvhGpXhFgQjwjBLksMXFQWlck99397436 = MvhGpXhFgQjwjBLksMXFQWlck3039116;     MvhGpXhFgQjwjBLksMXFQWlck3039116 = MvhGpXhFgQjwjBLksMXFQWlck84104161;     MvhGpXhFgQjwjBLksMXFQWlck84104161 = MvhGpXhFgQjwjBLksMXFQWlck71308294;     MvhGpXhFgQjwjBLksMXFQWlck71308294 = MvhGpXhFgQjwjBLksMXFQWlck88815147;     MvhGpXhFgQjwjBLksMXFQWlck88815147 = MvhGpXhFgQjwjBLksMXFQWlck96544410;     MvhGpXhFgQjwjBLksMXFQWlck96544410 = MvhGpXhFgQjwjBLksMXFQWlck21286523;     MvhGpXhFgQjwjBLksMXFQWlck21286523 = MvhGpXhFgQjwjBLksMXFQWlck62246279;     MvhGpXhFgQjwjBLksMXFQWlck62246279 = MvhGpXhFgQjwjBLksMXFQWlck69471783;     MvhGpXhFgQjwjBLksMXFQWlck69471783 = MvhGpXhFgQjwjBLksMXFQWlck78227901;     MvhGpXhFgQjwjBLksMXFQWlck78227901 = MvhGpXhFgQjwjBLksMXFQWlck11287123;     MvhGpXhFgQjwjBLksMXFQWlck11287123 = MvhGpXhFgQjwjBLksMXFQWlck93282492;     MvhGpXhFgQjwjBLksMXFQWlck93282492 = MvhGpXhFgQjwjBLksMXFQWlck51006598;     MvhGpXhFgQjwjBLksMXFQWlck51006598 = MvhGpXhFgQjwjBLksMXFQWlck77495480;     MvhGpXhFgQjwjBLksMXFQWlck77495480 = MvhGpXhFgQjwjBLksMXFQWlck1818649;     MvhGpXhFgQjwjBLksMXFQWlck1818649 = MvhGpXhFgQjwjBLksMXFQWlck56298719;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qoZzPMVGizVzQQEQDntUsOFnVHdgFRdOdDQrYBCqUiwoalAoGlDHTVcbi32842506() {     long ldIioAQWGVNzNsBkCAJSQNkHp91757687 = -952064794;    long ldIioAQWGVNzNsBkCAJSQNkHp85585091 = -453680881;    long ldIioAQWGVNzNsBkCAJSQNkHp12033636 = -660756808;    long ldIioAQWGVNzNsBkCAJSQNkHp27051431 = -775254753;    long ldIioAQWGVNzNsBkCAJSQNkHp63519907 = -41650537;    long ldIioAQWGVNzNsBkCAJSQNkHp82520068 = -509888084;    long ldIioAQWGVNzNsBkCAJSQNkHp8770012 = -853272119;    long ldIioAQWGVNzNsBkCAJSQNkHp34296831 = -204363467;    long ldIioAQWGVNzNsBkCAJSQNkHp94710436 = 96027603;    long ldIioAQWGVNzNsBkCAJSQNkHp41419530 = -754028617;    long ldIioAQWGVNzNsBkCAJSQNkHp48488154 = -679386460;    long ldIioAQWGVNzNsBkCAJSQNkHp78472031 = -518916194;    long ldIioAQWGVNzNsBkCAJSQNkHp98199598 = -108966686;    long ldIioAQWGVNzNsBkCAJSQNkHp42460910 = -243221059;    long ldIioAQWGVNzNsBkCAJSQNkHp23509972 = -908089298;    long ldIioAQWGVNzNsBkCAJSQNkHp18945243 = -486362455;    long ldIioAQWGVNzNsBkCAJSQNkHp81971491 = -383023531;    long ldIioAQWGVNzNsBkCAJSQNkHp91260996 = -532788561;    long ldIioAQWGVNzNsBkCAJSQNkHp37320759 = -372554346;    long ldIioAQWGVNzNsBkCAJSQNkHp72189841 = -729499355;    long ldIioAQWGVNzNsBkCAJSQNkHp98731990 = -606845582;    long ldIioAQWGVNzNsBkCAJSQNkHp20878347 = -767217731;    long ldIioAQWGVNzNsBkCAJSQNkHp11121851 = -225763754;    long ldIioAQWGVNzNsBkCAJSQNkHp70244647 = -709498200;    long ldIioAQWGVNzNsBkCAJSQNkHp32051721 = -578374188;    long ldIioAQWGVNzNsBkCAJSQNkHp61033430 = -747586977;    long ldIioAQWGVNzNsBkCAJSQNkHp7830725 = -26948533;    long ldIioAQWGVNzNsBkCAJSQNkHp8400402 = -117535728;    long ldIioAQWGVNzNsBkCAJSQNkHp14498595 = -678391427;    long ldIioAQWGVNzNsBkCAJSQNkHp59970527 = -755791931;    long ldIioAQWGVNzNsBkCAJSQNkHp82333366 = -509782712;    long ldIioAQWGVNzNsBkCAJSQNkHp40505858 = 70595604;    long ldIioAQWGVNzNsBkCAJSQNkHp76979681 = -896368880;    long ldIioAQWGVNzNsBkCAJSQNkHp80962500 = -347594740;    long ldIioAQWGVNzNsBkCAJSQNkHp93465498 = -759717339;    long ldIioAQWGVNzNsBkCAJSQNkHp79821796 = -510878581;    long ldIioAQWGVNzNsBkCAJSQNkHp68893797 = 68702048;    long ldIioAQWGVNzNsBkCAJSQNkHp44255989 = -737656009;    long ldIioAQWGVNzNsBkCAJSQNkHp56761724 = -7780298;    long ldIioAQWGVNzNsBkCAJSQNkHp41386480 = -635418567;    long ldIioAQWGVNzNsBkCAJSQNkHp75179358 = -767280729;    long ldIioAQWGVNzNsBkCAJSQNkHp86982509 = 99014301;    long ldIioAQWGVNzNsBkCAJSQNkHp79145691 = -112394021;    long ldIioAQWGVNzNsBkCAJSQNkHp80393501 = -730599552;    long ldIioAQWGVNzNsBkCAJSQNkHp9458687 = 27834192;    long ldIioAQWGVNzNsBkCAJSQNkHp5850097 = -322139691;    long ldIioAQWGVNzNsBkCAJSQNkHp66902472 = -492880428;    long ldIioAQWGVNzNsBkCAJSQNkHp79835702 = -114959875;    long ldIioAQWGVNzNsBkCAJSQNkHp64119561 = -494882979;    long ldIioAQWGVNzNsBkCAJSQNkHp37174125 = -779969051;    long ldIioAQWGVNzNsBkCAJSQNkHp82271131 = -794069233;    long ldIioAQWGVNzNsBkCAJSQNkHp47838171 = -728184441;    long ldIioAQWGVNzNsBkCAJSQNkHp68264873 = -38982052;    long ldIioAQWGVNzNsBkCAJSQNkHp96649355 = 63880073;    long ldIioAQWGVNzNsBkCAJSQNkHp34110516 = -276914117;    long ldIioAQWGVNzNsBkCAJSQNkHp70879341 = -84847063;    long ldIioAQWGVNzNsBkCAJSQNkHp74463240 = -127917128;    long ldIioAQWGVNzNsBkCAJSQNkHp41788989 = -951258608;    long ldIioAQWGVNzNsBkCAJSQNkHp94999710 = -96880565;    long ldIioAQWGVNzNsBkCAJSQNkHp2486477 = -294063561;    long ldIioAQWGVNzNsBkCAJSQNkHp74689344 = -382939552;    long ldIioAQWGVNzNsBkCAJSQNkHp369610 = -635736391;    long ldIioAQWGVNzNsBkCAJSQNkHp19798237 = -525972041;    long ldIioAQWGVNzNsBkCAJSQNkHp34739910 = -148180467;    long ldIioAQWGVNzNsBkCAJSQNkHp59086163 = -144245905;    long ldIioAQWGVNzNsBkCAJSQNkHp7982296 = -649982065;    long ldIioAQWGVNzNsBkCAJSQNkHp1492351 = -622547315;    long ldIioAQWGVNzNsBkCAJSQNkHp17237098 = -761371946;    long ldIioAQWGVNzNsBkCAJSQNkHp48995412 = -483503721;    long ldIioAQWGVNzNsBkCAJSQNkHp43688175 = -297210717;    long ldIioAQWGVNzNsBkCAJSQNkHp50051446 = -455064504;    long ldIioAQWGVNzNsBkCAJSQNkHp37715503 = -645367522;    long ldIioAQWGVNzNsBkCAJSQNkHp34499273 = -425008264;    long ldIioAQWGVNzNsBkCAJSQNkHp95934278 = -737135779;    long ldIioAQWGVNzNsBkCAJSQNkHp97010482 = -962218627;    long ldIioAQWGVNzNsBkCAJSQNkHp11749481 = -605859883;    long ldIioAQWGVNzNsBkCAJSQNkHp41732655 = -554823711;    long ldIioAQWGVNzNsBkCAJSQNkHp30728349 = -495164202;    long ldIioAQWGVNzNsBkCAJSQNkHp60785960 = -637332393;    long ldIioAQWGVNzNsBkCAJSQNkHp26201625 = -156234498;    long ldIioAQWGVNzNsBkCAJSQNkHp94130958 = -154706549;    long ldIioAQWGVNzNsBkCAJSQNkHp27995022 = -911988659;    long ldIioAQWGVNzNsBkCAJSQNkHp44280840 = -622652750;    long ldIioAQWGVNzNsBkCAJSQNkHp77324469 = -898422376;    long ldIioAQWGVNzNsBkCAJSQNkHp77699395 = -961722699;    long ldIioAQWGVNzNsBkCAJSQNkHp34495196 = -781598271;    long ldIioAQWGVNzNsBkCAJSQNkHp72240985 = -890422344;    long ldIioAQWGVNzNsBkCAJSQNkHp80330325 = -860248954;    long ldIioAQWGVNzNsBkCAJSQNkHp46851985 = 29319376;    long ldIioAQWGVNzNsBkCAJSQNkHp22586158 = -574870276;    long ldIioAQWGVNzNsBkCAJSQNkHp5358556 = -282961453;    long ldIioAQWGVNzNsBkCAJSQNkHp27104808 = 19960656;    long ldIioAQWGVNzNsBkCAJSQNkHp49256279 = -540775445;    long ldIioAQWGVNzNsBkCAJSQNkHp54275248 = -713716737;    long ldIioAQWGVNzNsBkCAJSQNkHp66697136 = -152479016;    long ldIioAQWGVNzNsBkCAJSQNkHp74809749 = -31544338;    long ldIioAQWGVNzNsBkCAJSQNkHp67184272 = -375013659;    long ldIioAQWGVNzNsBkCAJSQNkHp44405782 = -964213555;    long ldIioAQWGVNzNsBkCAJSQNkHp21307338 = -486353647;    long ldIioAQWGVNzNsBkCAJSQNkHp1476392 = -952064794;     ldIioAQWGVNzNsBkCAJSQNkHp91757687 = ldIioAQWGVNzNsBkCAJSQNkHp85585091;     ldIioAQWGVNzNsBkCAJSQNkHp85585091 = ldIioAQWGVNzNsBkCAJSQNkHp12033636;     ldIioAQWGVNzNsBkCAJSQNkHp12033636 = ldIioAQWGVNzNsBkCAJSQNkHp27051431;     ldIioAQWGVNzNsBkCAJSQNkHp27051431 = ldIioAQWGVNzNsBkCAJSQNkHp63519907;     ldIioAQWGVNzNsBkCAJSQNkHp63519907 = ldIioAQWGVNzNsBkCAJSQNkHp82520068;     ldIioAQWGVNzNsBkCAJSQNkHp82520068 = ldIioAQWGVNzNsBkCAJSQNkHp8770012;     ldIioAQWGVNzNsBkCAJSQNkHp8770012 = ldIioAQWGVNzNsBkCAJSQNkHp34296831;     ldIioAQWGVNzNsBkCAJSQNkHp34296831 = ldIioAQWGVNzNsBkCAJSQNkHp94710436;     ldIioAQWGVNzNsBkCAJSQNkHp94710436 = ldIioAQWGVNzNsBkCAJSQNkHp41419530;     ldIioAQWGVNzNsBkCAJSQNkHp41419530 = ldIioAQWGVNzNsBkCAJSQNkHp48488154;     ldIioAQWGVNzNsBkCAJSQNkHp48488154 = ldIioAQWGVNzNsBkCAJSQNkHp78472031;     ldIioAQWGVNzNsBkCAJSQNkHp78472031 = ldIioAQWGVNzNsBkCAJSQNkHp98199598;     ldIioAQWGVNzNsBkCAJSQNkHp98199598 = ldIioAQWGVNzNsBkCAJSQNkHp42460910;     ldIioAQWGVNzNsBkCAJSQNkHp42460910 = ldIioAQWGVNzNsBkCAJSQNkHp23509972;     ldIioAQWGVNzNsBkCAJSQNkHp23509972 = ldIioAQWGVNzNsBkCAJSQNkHp18945243;     ldIioAQWGVNzNsBkCAJSQNkHp18945243 = ldIioAQWGVNzNsBkCAJSQNkHp81971491;     ldIioAQWGVNzNsBkCAJSQNkHp81971491 = ldIioAQWGVNzNsBkCAJSQNkHp91260996;     ldIioAQWGVNzNsBkCAJSQNkHp91260996 = ldIioAQWGVNzNsBkCAJSQNkHp37320759;     ldIioAQWGVNzNsBkCAJSQNkHp37320759 = ldIioAQWGVNzNsBkCAJSQNkHp72189841;     ldIioAQWGVNzNsBkCAJSQNkHp72189841 = ldIioAQWGVNzNsBkCAJSQNkHp98731990;     ldIioAQWGVNzNsBkCAJSQNkHp98731990 = ldIioAQWGVNzNsBkCAJSQNkHp20878347;     ldIioAQWGVNzNsBkCAJSQNkHp20878347 = ldIioAQWGVNzNsBkCAJSQNkHp11121851;     ldIioAQWGVNzNsBkCAJSQNkHp11121851 = ldIioAQWGVNzNsBkCAJSQNkHp70244647;     ldIioAQWGVNzNsBkCAJSQNkHp70244647 = ldIioAQWGVNzNsBkCAJSQNkHp32051721;     ldIioAQWGVNzNsBkCAJSQNkHp32051721 = ldIioAQWGVNzNsBkCAJSQNkHp61033430;     ldIioAQWGVNzNsBkCAJSQNkHp61033430 = ldIioAQWGVNzNsBkCAJSQNkHp7830725;     ldIioAQWGVNzNsBkCAJSQNkHp7830725 = ldIioAQWGVNzNsBkCAJSQNkHp8400402;     ldIioAQWGVNzNsBkCAJSQNkHp8400402 = ldIioAQWGVNzNsBkCAJSQNkHp14498595;     ldIioAQWGVNzNsBkCAJSQNkHp14498595 = ldIioAQWGVNzNsBkCAJSQNkHp59970527;     ldIioAQWGVNzNsBkCAJSQNkHp59970527 = ldIioAQWGVNzNsBkCAJSQNkHp82333366;     ldIioAQWGVNzNsBkCAJSQNkHp82333366 = ldIioAQWGVNzNsBkCAJSQNkHp40505858;     ldIioAQWGVNzNsBkCAJSQNkHp40505858 = ldIioAQWGVNzNsBkCAJSQNkHp76979681;     ldIioAQWGVNzNsBkCAJSQNkHp76979681 = ldIioAQWGVNzNsBkCAJSQNkHp80962500;     ldIioAQWGVNzNsBkCAJSQNkHp80962500 = ldIioAQWGVNzNsBkCAJSQNkHp93465498;     ldIioAQWGVNzNsBkCAJSQNkHp93465498 = ldIioAQWGVNzNsBkCAJSQNkHp79821796;     ldIioAQWGVNzNsBkCAJSQNkHp79821796 = ldIioAQWGVNzNsBkCAJSQNkHp68893797;     ldIioAQWGVNzNsBkCAJSQNkHp68893797 = ldIioAQWGVNzNsBkCAJSQNkHp44255989;     ldIioAQWGVNzNsBkCAJSQNkHp44255989 = ldIioAQWGVNzNsBkCAJSQNkHp56761724;     ldIioAQWGVNzNsBkCAJSQNkHp56761724 = ldIioAQWGVNzNsBkCAJSQNkHp41386480;     ldIioAQWGVNzNsBkCAJSQNkHp41386480 = ldIioAQWGVNzNsBkCAJSQNkHp75179358;     ldIioAQWGVNzNsBkCAJSQNkHp75179358 = ldIioAQWGVNzNsBkCAJSQNkHp86982509;     ldIioAQWGVNzNsBkCAJSQNkHp86982509 = ldIioAQWGVNzNsBkCAJSQNkHp79145691;     ldIioAQWGVNzNsBkCAJSQNkHp79145691 = ldIioAQWGVNzNsBkCAJSQNkHp80393501;     ldIioAQWGVNzNsBkCAJSQNkHp80393501 = ldIioAQWGVNzNsBkCAJSQNkHp9458687;     ldIioAQWGVNzNsBkCAJSQNkHp9458687 = ldIioAQWGVNzNsBkCAJSQNkHp5850097;     ldIioAQWGVNzNsBkCAJSQNkHp5850097 = ldIioAQWGVNzNsBkCAJSQNkHp66902472;     ldIioAQWGVNzNsBkCAJSQNkHp66902472 = ldIioAQWGVNzNsBkCAJSQNkHp79835702;     ldIioAQWGVNzNsBkCAJSQNkHp79835702 = ldIioAQWGVNzNsBkCAJSQNkHp64119561;     ldIioAQWGVNzNsBkCAJSQNkHp64119561 = ldIioAQWGVNzNsBkCAJSQNkHp37174125;     ldIioAQWGVNzNsBkCAJSQNkHp37174125 = ldIioAQWGVNzNsBkCAJSQNkHp82271131;     ldIioAQWGVNzNsBkCAJSQNkHp82271131 = ldIioAQWGVNzNsBkCAJSQNkHp47838171;     ldIioAQWGVNzNsBkCAJSQNkHp47838171 = ldIioAQWGVNzNsBkCAJSQNkHp68264873;     ldIioAQWGVNzNsBkCAJSQNkHp68264873 = ldIioAQWGVNzNsBkCAJSQNkHp96649355;     ldIioAQWGVNzNsBkCAJSQNkHp96649355 = ldIioAQWGVNzNsBkCAJSQNkHp34110516;     ldIioAQWGVNzNsBkCAJSQNkHp34110516 = ldIioAQWGVNzNsBkCAJSQNkHp70879341;     ldIioAQWGVNzNsBkCAJSQNkHp70879341 = ldIioAQWGVNzNsBkCAJSQNkHp74463240;     ldIioAQWGVNzNsBkCAJSQNkHp74463240 = ldIioAQWGVNzNsBkCAJSQNkHp41788989;     ldIioAQWGVNzNsBkCAJSQNkHp41788989 = ldIioAQWGVNzNsBkCAJSQNkHp94999710;     ldIioAQWGVNzNsBkCAJSQNkHp94999710 = ldIioAQWGVNzNsBkCAJSQNkHp2486477;     ldIioAQWGVNzNsBkCAJSQNkHp2486477 = ldIioAQWGVNzNsBkCAJSQNkHp74689344;     ldIioAQWGVNzNsBkCAJSQNkHp74689344 = ldIioAQWGVNzNsBkCAJSQNkHp369610;     ldIioAQWGVNzNsBkCAJSQNkHp369610 = ldIioAQWGVNzNsBkCAJSQNkHp19798237;     ldIioAQWGVNzNsBkCAJSQNkHp19798237 = ldIioAQWGVNzNsBkCAJSQNkHp34739910;     ldIioAQWGVNzNsBkCAJSQNkHp34739910 = ldIioAQWGVNzNsBkCAJSQNkHp59086163;     ldIioAQWGVNzNsBkCAJSQNkHp59086163 = ldIioAQWGVNzNsBkCAJSQNkHp7982296;     ldIioAQWGVNzNsBkCAJSQNkHp7982296 = ldIioAQWGVNzNsBkCAJSQNkHp1492351;     ldIioAQWGVNzNsBkCAJSQNkHp1492351 = ldIioAQWGVNzNsBkCAJSQNkHp17237098;     ldIioAQWGVNzNsBkCAJSQNkHp17237098 = ldIioAQWGVNzNsBkCAJSQNkHp48995412;     ldIioAQWGVNzNsBkCAJSQNkHp48995412 = ldIioAQWGVNzNsBkCAJSQNkHp43688175;     ldIioAQWGVNzNsBkCAJSQNkHp43688175 = ldIioAQWGVNzNsBkCAJSQNkHp50051446;     ldIioAQWGVNzNsBkCAJSQNkHp50051446 = ldIioAQWGVNzNsBkCAJSQNkHp37715503;     ldIioAQWGVNzNsBkCAJSQNkHp37715503 = ldIioAQWGVNzNsBkCAJSQNkHp34499273;     ldIioAQWGVNzNsBkCAJSQNkHp34499273 = ldIioAQWGVNzNsBkCAJSQNkHp95934278;     ldIioAQWGVNzNsBkCAJSQNkHp95934278 = ldIioAQWGVNzNsBkCAJSQNkHp97010482;     ldIioAQWGVNzNsBkCAJSQNkHp97010482 = ldIioAQWGVNzNsBkCAJSQNkHp11749481;     ldIioAQWGVNzNsBkCAJSQNkHp11749481 = ldIioAQWGVNzNsBkCAJSQNkHp41732655;     ldIioAQWGVNzNsBkCAJSQNkHp41732655 = ldIioAQWGVNzNsBkCAJSQNkHp30728349;     ldIioAQWGVNzNsBkCAJSQNkHp30728349 = ldIioAQWGVNzNsBkCAJSQNkHp60785960;     ldIioAQWGVNzNsBkCAJSQNkHp60785960 = ldIioAQWGVNzNsBkCAJSQNkHp26201625;     ldIioAQWGVNzNsBkCAJSQNkHp26201625 = ldIioAQWGVNzNsBkCAJSQNkHp94130958;     ldIioAQWGVNzNsBkCAJSQNkHp94130958 = ldIioAQWGVNzNsBkCAJSQNkHp27995022;     ldIioAQWGVNzNsBkCAJSQNkHp27995022 = ldIioAQWGVNzNsBkCAJSQNkHp44280840;     ldIioAQWGVNzNsBkCAJSQNkHp44280840 = ldIioAQWGVNzNsBkCAJSQNkHp77324469;     ldIioAQWGVNzNsBkCAJSQNkHp77324469 = ldIioAQWGVNzNsBkCAJSQNkHp77699395;     ldIioAQWGVNzNsBkCAJSQNkHp77699395 = ldIioAQWGVNzNsBkCAJSQNkHp34495196;     ldIioAQWGVNzNsBkCAJSQNkHp34495196 = ldIioAQWGVNzNsBkCAJSQNkHp72240985;     ldIioAQWGVNzNsBkCAJSQNkHp72240985 = ldIioAQWGVNzNsBkCAJSQNkHp80330325;     ldIioAQWGVNzNsBkCAJSQNkHp80330325 = ldIioAQWGVNzNsBkCAJSQNkHp46851985;     ldIioAQWGVNzNsBkCAJSQNkHp46851985 = ldIioAQWGVNzNsBkCAJSQNkHp22586158;     ldIioAQWGVNzNsBkCAJSQNkHp22586158 = ldIioAQWGVNzNsBkCAJSQNkHp5358556;     ldIioAQWGVNzNsBkCAJSQNkHp5358556 = ldIioAQWGVNzNsBkCAJSQNkHp27104808;     ldIioAQWGVNzNsBkCAJSQNkHp27104808 = ldIioAQWGVNzNsBkCAJSQNkHp49256279;     ldIioAQWGVNzNsBkCAJSQNkHp49256279 = ldIioAQWGVNzNsBkCAJSQNkHp54275248;     ldIioAQWGVNzNsBkCAJSQNkHp54275248 = ldIioAQWGVNzNsBkCAJSQNkHp66697136;     ldIioAQWGVNzNsBkCAJSQNkHp66697136 = ldIioAQWGVNzNsBkCAJSQNkHp74809749;     ldIioAQWGVNzNsBkCAJSQNkHp74809749 = ldIioAQWGVNzNsBkCAJSQNkHp67184272;     ldIioAQWGVNzNsBkCAJSQNkHp67184272 = ldIioAQWGVNzNsBkCAJSQNkHp44405782;     ldIioAQWGVNzNsBkCAJSQNkHp44405782 = ldIioAQWGVNzNsBkCAJSQNkHp21307338;     ldIioAQWGVNzNsBkCAJSQNkHp21307338 = ldIioAQWGVNzNsBkCAJSQNkHp1476392;     ldIioAQWGVNzNsBkCAJSQNkHp1476392 = ldIioAQWGVNzNsBkCAJSQNkHp91757687;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WtTtbvGloeUOpBgJuPxHVmKrIxZAWIZMdoQSKzdqaTmpLvrZxlMZBkOjj47891573() {     long bldVFPgEHkBlNzulGhBAUgMFz97874794 = 36033317;    long bldVFPgEHkBlNzulGhBAUgMFz28958371 = -163280662;    long bldVFPgEHkBlNzulGhBAUgMFz28075820 = -811589729;    long bldVFPgEHkBlNzulGhBAUgMFz54126211 = -966003383;    long bldVFPgEHkBlNzulGhBAUgMFz32415396 = -562300409;    long bldVFPgEHkBlNzulGhBAUgMFz73937271 = -774384319;    long bldVFPgEHkBlNzulGhBAUgMFz69258977 = -992237096;    long bldVFPgEHkBlNzulGhBAUgMFz84056722 = -491237380;    long bldVFPgEHkBlNzulGhBAUgMFz59352932 = -772005063;    long bldVFPgEHkBlNzulGhBAUgMFz82649189 = 16995905;    long bldVFPgEHkBlNzulGhBAUgMFz8598444 = -556824047;    long bldVFPgEHkBlNzulGhBAUgMFz10295074 = -963322396;    long bldVFPgEHkBlNzulGhBAUgMFz84408716 = -548857775;    long bldVFPgEHkBlNzulGhBAUgMFz25604587 = -775459627;    long bldVFPgEHkBlNzulGhBAUgMFz19252399 = -498551464;    long bldVFPgEHkBlNzulGhBAUgMFz60450637 = -459361998;    long bldVFPgEHkBlNzulGhBAUgMFz75807495 = -999568644;    long bldVFPgEHkBlNzulGhBAUgMFz88314149 = -198311204;    long bldVFPgEHkBlNzulGhBAUgMFz99150600 = -778323442;    long bldVFPgEHkBlNzulGhBAUgMFz52740006 = 13597726;    long bldVFPgEHkBlNzulGhBAUgMFz87285183 = -462333038;    long bldVFPgEHkBlNzulGhBAUgMFz7399371 = -675147448;    long bldVFPgEHkBlNzulGhBAUgMFz46712643 = 27718759;    long bldVFPgEHkBlNzulGhBAUgMFz54237021 = -931803188;    long bldVFPgEHkBlNzulGhBAUgMFz75751370 = -951570221;    long bldVFPgEHkBlNzulGhBAUgMFz85755106 = -626242300;    long bldVFPgEHkBlNzulGhBAUgMFz6290503 = 72389264;    long bldVFPgEHkBlNzulGhBAUgMFz21507527 = -183464682;    long bldVFPgEHkBlNzulGhBAUgMFz80630850 = -900774131;    long bldVFPgEHkBlNzulGhBAUgMFz28586164 = -573262799;    long bldVFPgEHkBlNzulGhBAUgMFz74575916 = -423103650;    long bldVFPgEHkBlNzulGhBAUgMFz38116480 = -738851212;    long bldVFPgEHkBlNzulGhBAUgMFz86690629 = -788982250;    long bldVFPgEHkBlNzulGhBAUgMFz75793064 = -99136505;    long bldVFPgEHkBlNzulGhBAUgMFz54940150 = -298450444;    long bldVFPgEHkBlNzulGhBAUgMFz48547710 = -724904689;    long bldVFPgEHkBlNzulGhBAUgMFz50155731 = -984933821;    long bldVFPgEHkBlNzulGhBAUgMFz78346201 = -509162019;    long bldVFPgEHkBlNzulGhBAUgMFz30371978 = -1703795;    long bldVFPgEHkBlNzulGhBAUgMFz28888418 = -8857789;    long bldVFPgEHkBlNzulGhBAUgMFz80848582 = -832554623;    long bldVFPgEHkBlNzulGhBAUgMFz19132967 = -171127977;    long bldVFPgEHkBlNzulGhBAUgMFz57212670 = -193198605;    long bldVFPgEHkBlNzulGhBAUgMFz67801242 = -749942490;    long bldVFPgEHkBlNzulGhBAUgMFz21411152 = -734063962;    long bldVFPgEHkBlNzulGhBAUgMFz17789292 = -307355807;    long bldVFPgEHkBlNzulGhBAUgMFz84681046 = -611655966;    long bldVFPgEHkBlNzulGhBAUgMFz87792643 = -124855408;    long bldVFPgEHkBlNzulGhBAUgMFz73795290 = -580619967;    long bldVFPgEHkBlNzulGhBAUgMFz50085778 = -866979859;    long bldVFPgEHkBlNzulGhBAUgMFz17971810 = -636362904;    long bldVFPgEHkBlNzulGhBAUgMFz58647890 = -528910762;    long bldVFPgEHkBlNzulGhBAUgMFz16513331 = -930771640;    long bldVFPgEHkBlNzulGhBAUgMFz92618235 = -256590072;    long bldVFPgEHkBlNzulGhBAUgMFz60606390 = -977445899;    long bldVFPgEHkBlNzulGhBAUgMFz90475423 = -288819235;    long bldVFPgEHkBlNzulGhBAUgMFz82245728 = -90999422;    long bldVFPgEHkBlNzulGhBAUgMFz73838798 = -879786541;    long bldVFPgEHkBlNzulGhBAUgMFz78374840 = 85566837;    long bldVFPgEHkBlNzulGhBAUgMFz46660290 = -936058109;    long bldVFPgEHkBlNzulGhBAUgMFz67646768 = -746773584;    long bldVFPgEHkBlNzulGhBAUgMFz47751450 = -708772415;    long bldVFPgEHkBlNzulGhBAUgMFz3425873 = -590463249;    long bldVFPgEHkBlNzulGhBAUgMFz30766768 = -98742265;    long bldVFPgEHkBlNzulGhBAUgMFz8073274 = -559900445;    long bldVFPgEHkBlNzulGhBAUgMFz70481964 = -817972836;    long bldVFPgEHkBlNzulGhBAUgMFz23604444 = -74340146;    long bldVFPgEHkBlNzulGhBAUgMFz8615653 = -349721270;    long bldVFPgEHkBlNzulGhBAUgMFz70664437 = -377009183;    long bldVFPgEHkBlNzulGhBAUgMFz70704689 = -773646776;    long bldVFPgEHkBlNzulGhBAUgMFz10294906 = -474428177;    long bldVFPgEHkBlNzulGhBAUgMFz97461293 = -390406626;    long bldVFPgEHkBlNzulGhBAUgMFz57942172 = -96607410;    long bldVFPgEHkBlNzulGhBAUgMFz70262183 = -669465654;    long bldVFPgEHkBlNzulGhBAUgMFz71891423 = -153847652;    long bldVFPgEHkBlNzulGhBAUgMFz68152217 = -191205061;    long bldVFPgEHkBlNzulGhBAUgMFz50186701 = -381948843;    long bldVFPgEHkBlNzulGhBAUgMFz78911400 = -222338751;    long bldVFPgEHkBlNzulGhBAUgMFz32825869 = -97739226;    long bldVFPgEHkBlNzulGhBAUgMFz57962079 = -544214415;    long bldVFPgEHkBlNzulGhBAUgMFz1074060 = 85413666;    long bldVFPgEHkBlNzulGhBAUgMFz18497859 = -802755329;    long bldVFPgEHkBlNzulGhBAUgMFz47712236 = -602844716;    long bldVFPgEHkBlNzulGhBAUgMFz30545073 = 66205728;    long bldVFPgEHkBlNzulGhBAUgMFz10614354 = -936899895;    long bldVFPgEHkBlNzulGhBAUgMFz15928026 = -894192889;    long bldVFPgEHkBlNzulGhBAUgMFz21603150 = -808079572;    long bldVFPgEHkBlNzulGhBAUgMFz94072393 = -432392179;    long bldVFPgEHkBlNzulGhBAUgMFz15186675 = -121690606;    long bldVFPgEHkBlNzulGhBAUgMFz64464726 = 90368791;    long bldVFPgEHkBlNzulGhBAUgMFz66301981 = -533905267;    long bldVFPgEHkBlNzulGhBAUgMFz76316933 = -5147281;    long bldVFPgEHkBlNzulGhBAUgMFz99971360 = -494728857;    long bldVFPgEHkBlNzulGhBAUgMFz83711688 = -65645686;    long bldVFPgEHkBlNzulGhBAUgMFz61241649 = -262084206;    long bldVFPgEHkBlNzulGhBAUgMFz33097132 = -23782209;    long bldVFPgEHkBlNzulGhBAUgMFz15707094 = -580664729;    long bldVFPgEHkBlNzulGhBAUgMFz26445902 = 5543660;    long bldVFPgEHkBlNzulGhBAUgMFz59727969 = -90042046;    long bldVFPgEHkBlNzulGhBAUgMFz50929188 = 36033317;     bldVFPgEHkBlNzulGhBAUgMFz97874794 = bldVFPgEHkBlNzulGhBAUgMFz28958371;     bldVFPgEHkBlNzulGhBAUgMFz28958371 = bldVFPgEHkBlNzulGhBAUgMFz28075820;     bldVFPgEHkBlNzulGhBAUgMFz28075820 = bldVFPgEHkBlNzulGhBAUgMFz54126211;     bldVFPgEHkBlNzulGhBAUgMFz54126211 = bldVFPgEHkBlNzulGhBAUgMFz32415396;     bldVFPgEHkBlNzulGhBAUgMFz32415396 = bldVFPgEHkBlNzulGhBAUgMFz73937271;     bldVFPgEHkBlNzulGhBAUgMFz73937271 = bldVFPgEHkBlNzulGhBAUgMFz69258977;     bldVFPgEHkBlNzulGhBAUgMFz69258977 = bldVFPgEHkBlNzulGhBAUgMFz84056722;     bldVFPgEHkBlNzulGhBAUgMFz84056722 = bldVFPgEHkBlNzulGhBAUgMFz59352932;     bldVFPgEHkBlNzulGhBAUgMFz59352932 = bldVFPgEHkBlNzulGhBAUgMFz82649189;     bldVFPgEHkBlNzulGhBAUgMFz82649189 = bldVFPgEHkBlNzulGhBAUgMFz8598444;     bldVFPgEHkBlNzulGhBAUgMFz8598444 = bldVFPgEHkBlNzulGhBAUgMFz10295074;     bldVFPgEHkBlNzulGhBAUgMFz10295074 = bldVFPgEHkBlNzulGhBAUgMFz84408716;     bldVFPgEHkBlNzulGhBAUgMFz84408716 = bldVFPgEHkBlNzulGhBAUgMFz25604587;     bldVFPgEHkBlNzulGhBAUgMFz25604587 = bldVFPgEHkBlNzulGhBAUgMFz19252399;     bldVFPgEHkBlNzulGhBAUgMFz19252399 = bldVFPgEHkBlNzulGhBAUgMFz60450637;     bldVFPgEHkBlNzulGhBAUgMFz60450637 = bldVFPgEHkBlNzulGhBAUgMFz75807495;     bldVFPgEHkBlNzulGhBAUgMFz75807495 = bldVFPgEHkBlNzulGhBAUgMFz88314149;     bldVFPgEHkBlNzulGhBAUgMFz88314149 = bldVFPgEHkBlNzulGhBAUgMFz99150600;     bldVFPgEHkBlNzulGhBAUgMFz99150600 = bldVFPgEHkBlNzulGhBAUgMFz52740006;     bldVFPgEHkBlNzulGhBAUgMFz52740006 = bldVFPgEHkBlNzulGhBAUgMFz87285183;     bldVFPgEHkBlNzulGhBAUgMFz87285183 = bldVFPgEHkBlNzulGhBAUgMFz7399371;     bldVFPgEHkBlNzulGhBAUgMFz7399371 = bldVFPgEHkBlNzulGhBAUgMFz46712643;     bldVFPgEHkBlNzulGhBAUgMFz46712643 = bldVFPgEHkBlNzulGhBAUgMFz54237021;     bldVFPgEHkBlNzulGhBAUgMFz54237021 = bldVFPgEHkBlNzulGhBAUgMFz75751370;     bldVFPgEHkBlNzulGhBAUgMFz75751370 = bldVFPgEHkBlNzulGhBAUgMFz85755106;     bldVFPgEHkBlNzulGhBAUgMFz85755106 = bldVFPgEHkBlNzulGhBAUgMFz6290503;     bldVFPgEHkBlNzulGhBAUgMFz6290503 = bldVFPgEHkBlNzulGhBAUgMFz21507527;     bldVFPgEHkBlNzulGhBAUgMFz21507527 = bldVFPgEHkBlNzulGhBAUgMFz80630850;     bldVFPgEHkBlNzulGhBAUgMFz80630850 = bldVFPgEHkBlNzulGhBAUgMFz28586164;     bldVFPgEHkBlNzulGhBAUgMFz28586164 = bldVFPgEHkBlNzulGhBAUgMFz74575916;     bldVFPgEHkBlNzulGhBAUgMFz74575916 = bldVFPgEHkBlNzulGhBAUgMFz38116480;     bldVFPgEHkBlNzulGhBAUgMFz38116480 = bldVFPgEHkBlNzulGhBAUgMFz86690629;     bldVFPgEHkBlNzulGhBAUgMFz86690629 = bldVFPgEHkBlNzulGhBAUgMFz75793064;     bldVFPgEHkBlNzulGhBAUgMFz75793064 = bldVFPgEHkBlNzulGhBAUgMFz54940150;     bldVFPgEHkBlNzulGhBAUgMFz54940150 = bldVFPgEHkBlNzulGhBAUgMFz48547710;     bldVFPgEHkBlNzulGhBAUgMFz48547710 = bldVFPgEHkBlNzulGhBAUgMFz50155731;     bldVFPgEHkBlNzulGhBAUgMFz50155731 = bldVFPgEHkBlNzulGhBAUgMFz78346201;     bldVFPgEHkBlNzulGhBAUgMFz78346201 = bldVFPgEHkBlNzulGhBAUgMFz30371978;     bldVFPgEHkBlNzulGhBAUgMFz30371978 = bldVFPgEHkBlNzulGhBAUgMFz28888418;     bldVFPgEHkBlNzulGhBAUgMFz28888418 = bldVFPgEHkBlNzulGhBAUgMFz80848582;     bldVFPgEHkBlNzulGhBAUgMFz80848582 = bldVFPgEHkBlNzulGhBAUgMFz19132967;     bldVFPgEHkBlNzulGhBAUgMFz19132967 = bldVFPgEHkBlNzulGhBAUgMFz57212670;     bldVFPgEHkBlNzulGhBAUgMFz57212670 = bldVFPgEHkBlNzulGhBAUgMFz67801242;     bldVFPgEHkBlNzulGhBAUgMFz67801242 = bldVFPgEHkBlNzulGhBAUgMFz21411152;     bldVFPgEHkBlNzulGhBAUgMFz21411152 = bldVFPgEHkBlNzulGhBAUgMFz17789292;     bldVFPgEHkBlNzulGhBAUgMFz17789292 = bldVFPgEHkBlNzulGhBAUgMFz84681046;     bldVFPgEHkBlNzulGhBAUgMFz84681046 = bldVFPgEHkBlNzulGhBAUgMFz87792643;     bldVFPgEHkBlNzulGhBAUgMFz87792643 = bldVFPgEHkBlNzulGhBAUgMFz73795290;     bldVFPgEHkBlNzulGhBAUgMFz73795290 = bldVFPgEHkBlNzulGhBAUgMFz50085778;     bldVFPgEHkBlNzulGhBAUgMFz50085778 = bldVFPgEHkBlNzulGhBAUgMFz17971810;     bldVFPgEHkBlNzulGhBAUgMFz17971810 = bldVFPgEHkBlNzulGhBAUgMFz58647890;     bldVFPgEHkBlNzulGhBAUgMFz58647890 = bldVFPgEHkBlNzulGhBAUgMFz16513331;     bldVFPgEHkBlNzulGhBAUgMFz16513331 = bldVFPgEHkBlNzulGhBAUgMFz92618235;     bldVFPgEHkBlNzulGhBAUgMFz92618235 = bldVFPgEHkBlNzulGhBAUgMFz60606390;     bldVFPgEHkBlNzulGhBAUgMFz60606390 = bldVFPgEHkBlNzulGhBAUgMFz90475423;     bldVFPgEHkBlNzulGhBAUgMFz90475423 = bldVFPgEHkBlNzulGhBAUgMFz82245728;     bldVFPgEHkBlNzulGhBAUgMFz82245728 = bldVFPgEHkBlNzulGhBAUgMFz73838798;     bldVFPgEHkBlNzulGhBAUgMFz73838798 = bldVFPgEHkBlNzulGhBAUgMFz78374840;     bldVFPgEHkBlNzulGhBAUgMFz78374840 = bldVFPgEHkBlNzulGhBAUgMFz46660290;     bldVFPgEHkBlNzulGhBAUgMFz46660290 = bldVFPgEHkBlNzulGhBAUgMFz67646768;     bldVFPgEHkBlNzulGhBAUgMFz67646768 = bldVFPgEHkBlNzulGhBAUgMFz47751450;     bldVFPgEHkBlNzulGhBAUgMFz47751450 = bldVFPgEHkBlNzulGhBAUgMFz3425873;     bldVFPgEHkBlNzulGhBAUgMFz3425873 = bldVFPgEHkBlNzulGhBAUgMFz30766768;     bldVFPgEHkBlNzulGhBAUgMFz30766768 = bldVFPgEHkBlNzulGhBAUgMFz8073274;     bldVFPgEHkBlNzulGhBAUgMFz8073274 = bldVFPgEHkBlNzulGhBAUgMFz70481964;     bldVFPgEHkBlNzulGhBAUgMFz70481964 = bldVFPgEHkBlNzulGhBAUgMFz23604444;     bldVFPgEHkBlNzulGhBAUgMFz23604444 = bldVFPgEHkBlNzulGhBAUgMFz8615653;     bldVFPgEHkBlNzulGhBAUgMFz8615653 = bldVFPgEHkBlNzulGhBAUgMFz70664437;     bldVFPgEHkBlNzulGhBAUgMFz70664437 = bldVFPgEHkBlNzulGhBAUgMFz70704689;     bldVFPgEHkBlNzulGhBAUgMFz70704689 = bldVFPgEHkBlNzulGhBAUgMFz10294906;     bldVFPgEHkBlNzulGhBAUgMFz10294906 = bldVFPgEHkBlNzulGhBAUgMFz97461293;     bldVFPgEHkBlNzulGhBAUgMFz97461293 = bldVFPgEHkBlNzulGhBAUgMFz57942172;     bldVFPgEHkBlNzulGhBAUgMFz57942172 = bldVFPgEHkBlNzulGhBAUgMFz70262183;     bldVFPgEHkBlNzulGhBAUgMFz70262183 = bldVFPgEHkBlNzulGhBAUgMFz71891423;     bldVFPgEHkBlNzulGhBAUgMFz71891423 = bldVFPgEHkBlNzulGhBAUgMFz68152217;     bldVFPgEHkBlNzulGhBAUgMFz68152217 = bldVFPgEHkBlNzulGhBAUgMFz50186701;     bldVFPgEHkBlNzulGhBAUgMFz50186701 = bldVFPgEHkBlNzulGhBAUgMFz78911400;     bldVFPgEHkBlNzulGhBAUgMFz78911400 = bldVFPgEHkBlNzulGhBAUgMFz32825869;     bldVFPgEHkBlNzulGhBAUgMFz32825869 = bldVFPgEHkBlNzulGhBAUgMFz57962079;     bldVFPgEHkBlNzulGhBAUgMFz57962079 = bldVFPgEHkBlNzulGhBAUgMFz1074060;     bldVFPgEHkBlNzulGhBAUgMFz1074060 = bldVFPgEHkBlNzulGhBAUgMFz18497859;     bldVFPgEHkBlNzulGhBAUgMFz18497859 = bldVFPgEHkBlNzulGhBAUgMFz47712236;     bldVFPgEHkBlNzulGhBAUgMFz47712236 = bldVFPgEHkBlNzulGhBAUgMFz30545073;     bldVFPgEHkBlNzulGhBAUgMFz30545073 = bldVFPgEHkBlNzulGhBAUgMFz10614354;     bldVFPgEHkBlNzulGhBAUgMFz10614354 = bldVFPgEHkBlNzulGhBAUgMFz15928026;     bldVFPgEHkBlNzulGhBAUgMFz15928026 = bldVFPgEHkBlNzulGhBAUgMFz21603150;     bldVFPgEHkBlNzulGhBAUgMFz21603150 = bldVFPgEHkBlNzulGhBAUgMFz94072393;     bldVFPgEHkBlNzulGhBAUgMFz94072393 = bldVFPgEHkBlNzulGhBAUgMFz15186675;     bldVFPgEHkBlNzulGhBAUgMFz15186675 = bldVFPgEHkBlNzulGhBAUgMFz64464726;     bldVFPgEHkBlNzulGhBAUgMFz64464726 = bldVFPgEHkBlNzulGhBAUgMFz66301981;     bldVFPgEHkBlNzulGhBAUgMFz66301981 = bldVFPgEHkBlNzulGhBAUgMFz76316933;     bldVFPgEHkBlNzulGhBAUgMFz76316933 = bldVFPgEHkBlNzulGhBAUgMFz99971360;     bldVFPgEHkBlNzulGhBAUgMFz99971360 = bldVFPgEHkBlNzulGhBAUgMFz83711688;     bldVFPgEHkBlNzulGhBAUgMFz83711688 = bldVFPgEHkBlNzulGhBAUgMFz61241649;     bldVFPgEHkBlNzulGhBAUgMFz61241649 = bldVFPgEHkBlNzulGhBAUgMFz33097132;     bldVFPgEHkBlNzulGhBAUgMFz33097132 = bldVFPgEHkBlNzulGhBAUgMFz15707094;     bldVFPgEHkBlNzulGhBAUgMFz15707094 = bldVFPgEHkBlNzulGhBAUgMFz26445902;     bldVFPgEHkBlNzulGhBAUgMFz26445902 = bldVFPgEHkBlNzulGhBAUgMFz59727969;     bldVFPgEHkBlNzulGhBAUgMFz59727969 = bldVFPgEHkBlNzulGhBAUgMFz50929188;     bldVFPgEHkBlNzulGhBAUgMFz50929188 = bldVFPgEHkBlNzulGhBAUgMFz97874794;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IXOVgzPAQgChDHFHCyzhFtBIcUrhXFrlYPqdGMCnnJRwHehxtisJQGTPV15183173() {     long FsLHicLpRJnQbBqvLuwcFAxnt33333763 = -430243582;    long FsLHicLpRJnQbBqvLuwcFAxnt42230449 = -43832269;    long FsLHicLpRJnQbBqvLuwcFAxnt65462296 = -477256804;    long FsLHicLpRJnQbBqvLuwcFAxnt26349566 = -787154455;    long FsLHicLpRJnQbBqvLuwcFAxnt88700664 = -667899254;    long FsLHicLpRJnQbBqvLuwcFAxnt10160143 = 63267785;    long FsLHicLpRJnQbBqvLuwcFAxnt79916383 = -836962830;    long FsLHicLpRJnQbBqvLuwcFAxnt46188283 = -135471521;    long FsLHicLpRJnQbBqvLuwcFAxnt60870537 = -160336470;    long FsLHicLpRJnQbBqvLuwcFAxnt97551901 = -747691093;    long FsLHicLpRJnQbBqvLuwcFAxnt46780179 = -358831776;    long FsLHicLpRJnQbBqvLuwcFAxnt10863223 = -827443167;    long FsLHicLpRJnQbBqvLuwcFAxnt22643362 = -870279;    long FsLHicLpRJnQbBqvLuwcFAxnt78745450 = -751823036;    long FsLHicLpRJnQbBqvLuwcFAxnt77446915 = 98023521;    long FsLHicLpRJnQbBqvLuwcFAxnt43991938 = -95173605;    long FsLHicLpRJnQbBqvLuwcFAxnt31643431 = -426543197;    long FsLHicLpRJnQbBqvLuwcFAxnt88074341 = -271739273;    long FsLHicLpRJnQbBqvLuwcFAxnt99700930 = 5113136;    long FsLHicLpRJnQbBqvLuwcFAxnt46577224 = -412963340;    long FsLHicLpRJnQbBqvLuwcFAxnt372047 = -119607726;    long FsLHicLpRJnQbBqvLuwcFAxnt10820896 = -761783742;    long FsLHicLpRJnQbBqvLuwcFAxnt17238023 = -709913425;    long FsLHicLpRJnQbBqvLuwcFAxnt48029966 = -342627792;    long FsLHicLpRJnQbBqvLuwcFAxnt83769322 = -975555420;    long FsLHicLpRJnQbBqvLuwcFAxnt96453277 = -314819107;    long FsLHicLpRJnQbBqvLuwcFAxnt66711076 = -833894877;    long FsLHicLpRJnQbBqvLuwcFAxnt62235951 = -353236857;    long FsLHicLpRJnQbBqvLuwcFAxnt27299065 = -374868934;    long FsLHicLpRJnQbBqvLuwcFAxnt34119575 = -607769969;    long FsLHicLpRJnQbBqvLuwcFAxnt93159147 = -975084137;    long FsLHicLpRJnQbBqvLuwcFAxnt75939498 = -511822626;    long FsLHicLpRJnQbBqvLuwcFAxnt98908640 = -936578227;    long FsLHicLpRJnQbBqvLuwcFAxnt5541491 = -163830319;    long FsLHicLpRJnQbBqvLuwcFAxnt20748604 = -249550695;    long FsLHicLpRJnQbBqvLuwcFAxnt108554 = -939469995;    long FsLHicLpRJnQbBqvLuwcFAxnt99567547 = -849629861;    long FsLHicLpRJnQbBqvLuwcFAxnt29561605 = -491817600;    long FsLHicLpRJnQbBqvLuwcFAxnt60762539 = -752580071;    long FsLHicLpRJnQbBqvLuwcFAxnt93159950 = -574120335;    long FsLHicLpRJnQbBqvLuwcFAxnt14300191 = -601753537;    long FsLHicLpRJnQbBqvLuwcFAxnt8498094 = -865673268;    long FsLHicLpRJnQbBqvLuwcFAxnt46596048 = -846379391;    long FsLHicLpRJnQbBqvLuwcFAxnt7932581 = -254274900;    long FsLHicLpRJnQbBqvLuwcFAxnt21427611 = -560575124;    long FsLHicLpRJnQbBqvLuwcFAxnt63750620 = -346279440;    long FsLHicLpRJnQbBqvLuwcFAxnt4026211 = 4357673;    long FsLHicLpRJnQbBqvLuwcFAxnt5518956 = -291382001;    long FsLHicLpRJnQbBqvLuwcFAxnt96687956 = -244356847;    long FsLHicLpRJnQbBqvLuwcFAxnt74615367 = -258006675;    long FsLHicLpRJnQbBqvLuwcFAxnt98742533 = -510639462;    long FsLHicLpRJnQbBqvLuwcFAxnt42133363 = -742563108;    long FsLHicLpRJnQbBqvLuwcFAxnt85134478 = -686817194;    long FsLHicLpRJnQbBqvLuwcFAxnt8610083 = -448098572;    long FsLHicLpRJnQbBqvLuwcFAxnt14811127 = -223936045;    long FsLHicLpRJnQbBqvLuwcFAxnt22512868 = -668459841;    long FsLHicLpRJnQbBqvLuwcFAxnt24992427 = -333918844;    long FsLHicLpRJnQbBqvLuwcFAxnt17432331 = -34629012;    long FsLHicLpRJnQbBqvLuwcFAxnt42580244 = -811599035;    long FsLHicLpRJnQbBqvLuwcFAxnt92247387 = -253080148;    long FsLHicLpRJnQbBqvLuwcFAxnt43449067 = -102837338;    long FsLHicLpRJnQbBqvLuwcFAxnt17680432 = -383725974;    long FsLHicLpRJnQbBqvLuwcFAxnt18889219 = -760602587;    long FsLHicLpRJnQbBqvLuwcFAxnt26750963 = -552566501;    long FsLHicLpRJnQbBqvLuwcFAxnt4392754 = -772606956;    long FsLHicLpRJnQbBqvLuwcFAxnt70840680 = -847009151;    long FsLHicLpRJnQbBqvLuwcFAxnt11954582 = -890864940;    long FsLHicLpRJnQbBqvLuwcFAxnt17101872 = -837039961;    long FsLHicLpRJnQbBqvLuwcFAxnt57996846 = -402272342;    long FsLHicLpRJnQbBqvLuwcFAxnt77338361 = 37493515;    long FsLHicLpRJnQbBqvLuwcFAxnt44424390 = -245543744;    long FsLHicLpRJnQbBqvLuwcFAxnt2081827 = -934725597;    long FsLHicLpRJnQbBqvLuwcFAxnt27311802 = -519159202;    long FsLHicLpRJnQbBqvLuwcFAxnt6540981 = -420766529;    long FsLHicLpRJnQbBqvLuwcFAxnt32277034 = -811209804;    long FsLHicLpRJnQbBqvLuwcFAxnt91873953 = -253934459;    long FsLHicLpRJnQbBqvLuwcFAxnt64224847 = -915404351;    long FsLHicLpRJnQbBqvLuwcFAxnt9305442 = -355638525;    long FsLHicLpRJnQbBqvLuwcFAxnt26602356 = -782052669;    long FsLHicLpRJnQbBqvLuwcFAxnt20018702 = -529275981;    long FsLHicLpRJnQbBqvLuwcFAxnt92427067 = -219176781;    long FsLHicLpRJnQbBqvLuwcFAxnt61192121 = -442512877;    long FsLHicLpRJnQbBqvLuwcFAxnt65547995 = -8880010;    long FsLHicLpRJnQbBqvLuwcFAxnt52683698 = -16862259;    long FsLHicLpRJnQbBqvLuwcFAxnt35377041 = 2869492;    long FsLHicLpRJnQbBqvLuwcFAxnt51025785 = -132521030;    long FsLHicLpRJnQbBqvLuwcFAxnt90805019 = -825005432;    long FsLHicLpRJnQbBqvLuwcFAxnt90298558 = -388479656;    long FsLHicLpRJnQbBqvLuwcFAxnt90730364 = -939894274;    long FsLHicLpRJnQbBqvLuwcFAxnt98235736 = -581090854;    long FsLHicLpRJnQbBqvLuwcFAxnt75116126 = -505551151;    long FsLHicLpRJnQbBqvLuwcFAxnt82135217 = -715000850;    long FsLHicLpRJnQbBqvLuwcFAxnt86981360 = -680218565;    long FsLHicLpRJnQbBqvLuwcFAxnt68515152 = -399499924;    long FsLHicLpRJnQbBqvLuwcFAxnt49710884 = -371282998;    long FsLHicLpRJnQbBqvLuwcFAxnt96619758 = -118027563;    long FsLHicLpRJnQbBqvLuwcFAxnt89608874 = -5070682;    long FsLHicLpRJnQbBqvLuwcFAxnt19845086 = -193812890;    long FsLHicLpRJnQbBqvLuwcFAxnt3539827 = -481667945;    long FsLHicLpRJnQbBqvLuwcFAxnt50586930 = -430243582;     FsLHicLpRJnQbBqvLuwcFAxnt33333763 = FsLHicLpRJnQbBqvLuwcFAxnt42230449;     FsLHicLpRJnQbBqvLuwcFAxnt42230449 = FsLHicLpRJnQbBqvLuwcFAxnt65462296;     FsLHicLpRJnQbBqvLuwcFAxnt65462296 = FsLHicLpRJnQbBqvLuwcFAxnt26349566;     FsLHicLpRJnQbBqvLuwcFAxnt26349566 = FsLHicLpRJnQbBqvLuwcFAxnt88700664;     FsLHicLpRJnQbBqvLuwcFAxnt88700664 = FsLHicLpRJnQbBqvLuwcFAxnt10160143;     FsLHicLpRJnQbBqvLuwcFAxnt10160143 = FsLHicLpRJnQbBqvLuwcFAxnt79916383;     FsLHicLpRJnQbBqvLuwcFAxnt79916383 = FsLHicLpRJnQbBqvLuwcFAxnt46188283;     FsLHicLpRJnQbBqvLuwcFAxnt46188283 = FsLHicLpRJnQbBqvLuwcFAxnt60870537;     FsLHicLpRJnQbBqvLuwcFAxnt60870537 = FsLHicLpRJnQbBqvLuwcFAxnt97551901;     FsLHicLpRJnQbBqvLuwcFAxnt97551901 = FsLHicLpRJnQbBqvLuwcFAxnt46780179;     FsLHicLpRJnQbBqvLuwcFAxnt46780179 = FsLHicLpRJnQbBqvLuwcFAxnt10863223;     FsLHicLpRJnQbBqvLuwcFAxnt10863223 = FsLHicLpRJnQbBqvLuwcFAxnt22643362;     FsLHicLpRJnQbBqvLuwcFAxnt22643362 = FsLHicLpRJnQbBqvLuwcFAxnt78745450;     FsLHicLpRJnQbBqvLuwcFAxnt78745450 = FsLHicLpRJnQbBqvLuwcFAxnt77446915;     FsLHicLpRJnQbBqvLuwcFAxnt77446915 = FsLHicLpRJnQbBqvLuwcFAxnt43991938;     FsLHicLpRJnQbBqvLuwcFAxnt43991938 = FsLHicLpRJnQbBqvLuwcFAxnt31643431;     FsLHicLpRJnQbBqvLuwcFAxnt31643431 = FsLHicLpRJnQbBqvLuwcFAxnt88074341;     FsLHicLpRJnQbBqvLuwcFAxnt88074341 = FsLHicLpRJnQbBqvLuwcFAxnt99700930;     FsLHicLpRJnQbBqvLuwcFAxnt99700930 = FsLHicLpRJnQbBqvLuwcFAxnt46577224;     FsLHicLpRJnQbBqvLuwcFAxnt46577224 = FsLHicLpRJnQbBqvLuwcFAxnt372047;     FsLHicLpRJnQbBqvLuwcFAxnt372047 = FsLHicLpRJnQbBqvLuwcFAxnt10820896;     FsLHicLpRJnQbBqvLuwcFAxnt10820896 = FsLHicLpRJnQbBqvLuwcFAxnt17238023;     FsLHicLpRJnQbBqvLuwcFAxnt17238023 = FsLHicLpRJnQbBqvLuwcFAxnt48029966;     FsLHicLpRJnQbBqvLuwcFAxnt48029966 = FsLHicLpRJnQbBqvLuwcFAxnt83769322;     FsLHicLpRJnQbBqvLuwcFAxnt83769322 = FsLHicLpRJnQbBqvLuwcFAxnt96453277;     FsLHicLpRJnQbBqvLuwcFAxnt96453277 = FsLHicLpRJnQbBqvLuwcFAxnt66711076;     FsLHicLpRJnQbBqvLuwcFAxnt66711076 = FsLHicLpRJnQbBqvLuwcFAxnt62235951;     FsLHicLpRJnQbBqvLuwcFAxnt62235951 = FsLHicLpRJnQbBqvLuwcFAxnt27299065;     FsLHicLpRJnQbBqvLuwcFAxnt27299065 = FsLHicLpRJnQbBqvLuwcFAxnt34119575;     FsLHicLpRJnQbBqvLuwcFAxnt34119575 = FsLHicLpRJnQbBqvLuwcFAxnt93159147;     FsLHicLpRJnQbBqvLuwcFAxnt93159147 = FsLHicLpRJnQbBqvLuwcFAxnt75939498;     FsLHicLpRJnQbBqvLuwcFAxnt75939498 = FsLHicLpRJnQbBqvLuwcFAxnt98908640;     FsLHicLpRJnQbBqvLuwcFAxnt98908640 = FsLHicLpRJnQbBqvLuwcFAxnt5541491;     FsLHicLpRJnQbBqvLuwcFAxnt5541491 = FsLHicLpRJnQbBqvLuwcFAxnt20748604;     FsLHicLpRJnQbBqvLuwcFAxnt20748604 = FsLHicLpRJnQbBqvLuwcFAxnt108554;     FsLHicLpRJnQbBqvLuwcFAxnt108554 = FsLHicLpRJnQbBqvLuwcFAxnt99567547;     FsLHicLpRJnQbBqvLuwcFAxnt99567547 = FsLHicLpRJnQbBqvLuwcFAxnt29561605;     FsLHicLpRJnQbBqvLuwcFAxnt29561605 = FsLHicLpRJnQbBqvLuwcFAxnt60762539;     FsLHicLpRJnQbBqvLuwcFAxnt60762539 = FsLHicLpRJnQbBqvLuwcFAxnt93159950;     FsLHicLpRJnQbBqvLuwcFAxnt93159950 = FsLHicLpRJnQbBqvLuwcFAxnt14300191;     FsLHicLpRJnQbBqvLuwcFAxnt14300191 = FsLHicLpRJnQbBqvLuwcFAxnt8498094;     FsLHicLpRJnQbBqvLuwcFAxnt8498094 = FsLHicLpRJnQbBqvLuwcFAxnt46596048;     FsLHicLpRJnQbBqvLuwcFAxnt46596048 = FsLHicLpRJnQbBqvLuwcFAxnt7932581;     FsLHicLpRJnQbBqvLuwcFAxnt7932581 = FsLHicLpRJnQbBqvLuwcFAxnt21427611;     FsLHicLpRJnQbBqvLuwcFAxnt21427611 = FsLHicLpRJnQbBqvLuwcFAxnt63750620;     FsLHicLpRJnQbBqvLuwcFAxnt63750620 = FsLHicLpRJnQbBqvLuwcFAxnt4026211;     FsLHicLpRJnQbBqvLuwcFAxnt4026211 = FsLHicLpRJnQbBqvLuwcFAxnt5518956;     FsLHicLpRJnQbBqvLuwcFAxnt5518956 = FsLHicLpRJnQbBqvLuwcFAxnt96687956;     FsLHicLpRJnQbBqvLuwcFAxnt96687956 = FsLHicLpRJnQbBqvLuwcFAxnt74615367;     FsLHicLpRJnQbBqvLuwcFAxnt74615367 = FsLHicLpRJnQbBqvLuwcFAxnt98742533;     FsLHicLpRJnQbBqvLuwcFAxnt98742533 = FsLHicLpRJnQbBqvLuwcFAxnt42133363;     FsLHicLpRJnQbBqvLuwcFAxnt42133363 = FsLHicLpRJnQbBqvLuwcFAxnt85134478;     FsLHicLpRJnQbBqvLuwcFAxnt85134478 = FsLHicLpRJnQbBqvLuwcFAxnt8610083;     FsLHicLpRJnQbBqvLuwcFAxnt8610083 = FsLHicLpRJnQbBqvLuwcFAxnt14811127;     FsLHicLpRJnQbBqvLuwcFAxnt14811127 = FsLHicLpRJnQbBqvLuwcFAxnt22512868;     FsLHicLpRJnQbBqvLuwcFAxnt22512868 = FsLHicLpRJnQbBqvLuwcFAxnt24992427;     FsLHicLpRJnQbBqvLuwcFAxnt24992427 = FsLHicLpRJnQbBqvLuwcFAxnt17432331;     FsLHicLpRJnQbBqvLuwcFAxnt17432331 = FsLHicLpRJnQbBqvLuwcFAxnt42580244;     FsLHicLpRJnQbBqvLuwcFAxnt42580244 = FsLHicLpRJnQbBqvLuwcFAxnt92247387;     FsLHicLpRJnQbBqvLuwcFAxnt92247387 = FsLHicLpRJnQbBqvLuwcFAxnt43449067;     FsLHicLpRJnQbBqvLuwcFAxnt43449067 = FsLHicLpRJnQbBqvLuwcFAxnt17680432;     FsLHicLpRJnQbBqvLuwcFAxnt17680432 = FsLHicLpRJnQbBqvLuwcFAxnt18889219;     FsLHicLpRJnQbBqvLuwcFAxnt18889219 = FsLHicLpRJnQbBqvLuwcFAxnt26750963;     FsLHicLpRJnQbBqvLuwcFAxnt26750963 = FsLHicLpRJnQbBqvLuwcFAxnt4392754;     FsLHicLpRJnQbBqvLuwcFAxnt4392754 = FsLHicLpRJnQbBqvLuwcFAxnt70840680;     FsLHicLpRJnQbBqvLuwcFAxnt70840680 = FsLHicLpRJnQbBqvLuwcFAxnt11954582;     FsLHicLpRJnQbBqvLuwcFAxnt11954582 = FsLHicLpRJnQbBqvLuwcFAxnt17101872;     FsLHicLpRJnQbBqvLuwcFAxnt17101872 = FsLHicLpRJnQbBqvLuwcFAxnt57996846;     FsLHicLpRJnQbBqvLuwcFAxnt57996846 = FsLHicLpRJnQbBqvLuwcFAxnt77338361;     FsLHicLpRJnQbBqvLuwcFAxnt77338361 = FsLHicLpRJnQbBqvLuwcFAxnt44424390;     FsLHicLpRJnQbBqvLuwcFAxnt44424390 = FsLHicLpRJnQbBqvLuwcFAxnt2081827;     FsLHicLpRJnQbBqvLuwcFAxnt2081827 = FsLHicLpRJnQbBqvLuwcFAxnt27311802;     FsLHicLpRJnQbBqvLuwcFAxnt27311802 = FsLHicLpRJnQbBqvLuwcFAxnt6540981;     FsLHicLpRJnQbBqvLuwcFAxnt6540981 = FsLHicLpRJnQbBqvLuwcFAxnt32277034;     FsLHicLpRJnQbBqvLuwcFAxnt32277034 = FsLHicLpRJnQbBqvLuwcFAxnt91873953;     FsLHicLpRJnQbBqvLuwcFAxnt91873953 = FsLHicLpRJnQbBqvLuwcFAxnt64224847;     FsLHicLpRJnQbBqvLuwcFAxnt64224847 = FsLHicLpRJnQbBqvLuwcFAxnt9305442;     FsLHicLpRJnQbBqvLuwcFAxnt9305442 = FsLHicLpRJnQbBqvLuwcFAxnt26602356;     FsLHicLpRJnQbBqvLuwcFAxnt26602356 = FsLHicLpRJnQbBqvLuwcFAxnt20018702;     FsLHicLpRJnQbBqvLuwcFAxnt20018702 = FsLHicLpRJnQbBqvLuwcFAxnt92427067;     FsLHicLpRJnQbBqvLuwcFAxnt92427067 = FsLHicLpRJnQbBqvLuwcFAxnt61192121;     FsLHicLpRJnQbBqvLuwcFAxnt61192121 = FsLHicLpRJnQbBqvLuwcFAxnt65547995;     FsLHicLpRJnQbBqvLuwcFAxnt65547995 = FsLHicLpRJnQbBqvLuwcFAxnt52683698;     FsLHicLpRJnQbBqvLuwcFAxnt52683698 = FsLHicLpRJnQbBqvLuwcFAxnt35377041;     FsLHicLpRJnQbBqvLuwcFAxnt35377041 = FsLHicLpRJnQbBqvLuwcFAxnt51025785;     FsLHicLpRJnQbBqvLuwcFAxnt51025785 = FsLHicLpRJnQbBqvLuwcFAxnt90805019;     FsLHicLpRJnQbBqvLuwcFAxnt90805019 = FsLHicLpRJnQbBqvLuwcFAxnt90298558;     FsLHicLpRJnQbBqvLuwcFAxnt90298558 = FsLHicLpRJnQbBqvLuwcFAxnt90730364;     FsLHicLpRJnQbBqvLuwcFAxnt90730364 = FsLHicLpRJnQbBqvLuwcFAxnt98235736;     FsLHicLpRJnQbBqvLuwcFAxnt98235736 = FsLHicLpRJnQbBqvLuwcFAxnt75116126;     FsLHicLpRJnQbBqvLuwcFAxnt75116126 = FsLHicLpRJnQbBqvLuwcFAxnt82135217;     FsLHicLpRJnQbBqvLuwcFAxnt82135217 = FsLHicLpRJnQbBqvLuwcFAxnt86981360;     FsLHicLpRJnQbBqvLuwcFAxnt86981360 = FsLHicLpRJnQbBqvLuwcFAxnt68515152;     FsLHicLpRJnQbBqvLuwcFAxnt68515152 = FsLHicLpRJnQbBqvLuwcFAxnt49710884;     FsLHicLpRJnQbBqvLuwcFAxnt49710884 = FsLHicLpRJnQbBqvLuwcFAxnt96619758;     FsLHicLpRJnQbBqvLuwcFAxnt96619758 = FsLHicLpRJnQbBqvLuwcFAxnt89608874;     FsLHicLpRJnQbBqvLuwcFAxnt89608874 = FsLHicLpRJnQbBqvLuwcFAxnt19845086;     FsLHicLpRJnQbBqvLuwcFAxnt19845086 = FsLHicLpRJnQbBqvLuwcFAxnt3539827;     FsLHicLpRJnQbBqvLuwcFAxnt3539827 = FsLHicLpRJnQbBqvLuwcFAxnt50586930;     FsLHicLpRJnQbBqvLuwcFAxnt50586930 = FsLHicLpRJnQbBqvLuwcFAxnt33333763;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IhjeCdTLDKZxNdbLjdvniqpLaEOEbaNsvqUbUiOkrZbuKcqQNxybJekSr30232241() {     long XEyOOjcxhCXIzqBOKvIOuBxNy39450870 = -542145471;    long XEyOOjcxhCXIzqBOKvIOuBxNy85603728 = -853432049;    long XEyOOjcxhCXIzqBOKvIOuBxNy81504480 = -628089725;    long XEyOOjcxhCXIzqBOKvIOuBxNy53424347 = -977903085;    long XEyOOjcxhCXIzqBOKvIOuBxNy57596153 = -88549125;    long XEyOOjcxhCXIzqBOKvIOuBxNy1577346 = -201228450;    long XEyOOjcxhCXIzqBOKvIOuBxNy40405349 = -975927808;    long XEyOOjcxhCXIzqBOKvIOuBxNy95948174 = -422345434;    long XEyOOjcxhCXIzqBOKvIOuBxNy25513033 = 71630864;    long XEyOOjcxhCXIzqBOKvIOuBxNy38781561 = 23333430;    long XEyOOjcxhCXIzqBOKvIOuBxNy6890469 = -236269363;    long XEyOOjcxhCXIzqBOKvIOuBxNy42686265 = -171849369;    long XEyOOjcxhCXIzqBOKvIOuBxNy8852481 = -440761368;    long XEyOOjcxhCXIzqBOKvIOuBxNy61889127 = -184061604;    long XEyOOjcxhCXIzqBOKvIOuBxNy73189341 = -592438646;    long XEyOOjcxhCXIzqBOKvIOuBxNy85497331 = -68173148;    long XEyOOjcxhCXIzqBOKvIOuBxNy25479434 = 56911690;    long XEyOOjcxhCXIzqBOKvIOuBxNy85127494 = 62738085;    long XEyOOjcxhCXIzqBOKvIOuBxNy61530772 = -400655961;    long XEyOOjcxhCXIzqBOKvIOuBxNy27127389 = -769866259;    long XEyOOjcxhCXIzqBOKvIOuBxNy88925239 = 24904818;    long XEyOOjcxhCXIzqBOKvIOuBxNy97341919 = -669713458;    long XEyOOjcxhCXIzqBOKvIOuBxNy52828814 = -456430911;    long XEyOOjcxhCXIzqBOKvIOuBxNy32022340 = -564932780;    long XEyOOjcxhCXIzqBOKvIOuBxNy27468972 = -248751453;    long XEyOOjcxhCXIzqBOKvIOuBxNy21174953 = -193474430;    long XEyOOjcxhCXIzqBOKvIOuBxNy65170854 = -734557080;    long XEyOOjcxhCXIzqBOKvIOuBxNy75343077 = -419165810;    long XEyOOjcxhCXIzqBOKvIOuBxNy93431320 = -597251638;    long XEyOOjcxhCXIzqBOKvIOuBxNy2735212 = -425240837;    long XEyOOjcxhCXIzqBOKvIOuBxNy85401697 = -888405075;    long XEyOOjcxhCXIzqBOKvIOuBxNy73550120 = -221269442;    long XEyOOjcxhCXIzqBOKvIOuBxNy8619589 = -829191598;    long XEyOOjcxhCXIzqBOKvIOuBxNy372056 = 84627916;    long XEyOOjcxhCXIzqBOKvIOuBxNy82223256 = -888283800;    long XEyOOjcxhCXIzqBOKvIOuBxNy68834467 = -53496102;    long XEyOOjcxhCXIzqBOKvIOuBxNy80829482 = -803265731;    long XEyOOjcxhCXIzqBOKvIOuBxNy63651817 = -263323610;    long XEyOOjcxhCXIzqBOKvIOuBxNy34372793 = -746503568;    long XEyOOjcxhCXIzqBOKvIOuBxNy80661888 = 52440442;    long XEyOOjcxhCXIzqBOKvIOuBxNy19969414 = -667027431;    long XEyOOjcxhCXIzqBOKvIOuBxNy40648550 = -35815546;    long XEyOOjcxhCXIzqBOKvIOuBxNy24663027 = -927183975;    long XEyOOjcxhCXIzqBOKvIOuBxNy95340320 = -273617838;    long XEyOOjcxhCXIzqBOKvIOuBxNy33380076 = -222473278;    long XEyOOjcxhCXIzqBOKvIOuBxNy75689815 = -331495556;    long XEyOOjcxhCXIzqBOKvIOuBxNy21804785 = -114417864;    long XEyOOjcxhCXIzqBOKvIOuBxNy13475896 = -301277533;    long XEyOOjcxhCXIzqBOKvIOuBxNy6363686 = -330093835;    long XEyOOjcxhCXIzqBOKvIOuBxNy87527019 = -345017483;    long XEyOOjcxhCXIzqBOKvIOuBxNy34443212 = -352933133;    long XEyOOjcxhCXIzqBOKvIOuBxNy52943082 = -543289428;    long XEyOOjcxhCXIzqBOKvIOuBxNy33382936 = -478606782;    long XEyOOjcxhCXIzqBOKvIOuBxNy4578963 = -768568717;    long XEyOOjcxhCXIzqBOKvIOuBxNy41307001 = -924467828;    long XEyOOjcxhCXIzqBOKvIOuBxNy42108951 = -872432014;    long XEyOOjcxhCXIzqBOKvIOuBxNy32774915 = -297001138;    long XEyOOjcxhCXIzqBOKvIOuBxNy49482140 = 36843055;    long XEyOOjcxhCXIzqBOKvIOuBxNy25955375 = -629151633;    long XEyOOjcxhCXIzqBOKvIOuBxNy36421201 = -895074696;    long XEyOOjcxhCXIzqBOKvIOuBxNy36406491 = -466671370;    long XEyOOjcxhCXIzqBOKvIOuBxNy65062272 = -456761998;    long XEyOOjcxhCXIzqBOKvIOuBxNy2516854 = -825093796;    long XEyOOjcxhCXIzqBOKvIOuBxNy22777821 = -503128300;    long XEyOOjcxhCXIzqBOKvIOuBxNy53379864 = -88261495;    long XEyOOjcxhCXIzqBOKvIOuBxNy33340349 = 85000078;    long XEyOOjcxhCXIzqBOKvIOuBxNy34066676 = -342657772;    long XEyOOjcxhCXIzqBOKvIOuBxNy8480426 = -425389285;    long XEyOOjcxhCXIzqBOKvIOuBxNy79665871 = -295777804;    long XEyOOjcxhCXIzqBOKvIOuBxNy4354875 = -438942544;    long XEyOOjcxhCXIzqBOKvIOuBxNy4667849 = -264907418;    long XEyOOjcxhCXIzqBOKvIOuBxNy61827617 = -679764700;    long XEyOOjcxhCXIzqBOKvIOuBxNy50754701 = -190758348;    long XEyOOjcxhCXIzqBOKvIOuBxNy80868884 = -353096403;    long XEyOOjcxhCXIzqBOKvIOuBxNy7157975 = -2838829;    long XEyOOjcxhCXIzqBOKvIOuBxNy48276689 = -939279636;    long XEyOOjcxhCXIzqBOKvIOuBxNy72678892 = -742529484;    long XEyOOjcxhCXIzqBOKvIOuBxNy57488493 = -82813074;    long XEyOOjcxhCXIzqBOKvIOuBxNy98642264 = -242459503;    long XEyOOjcxhCXIzqBOKvIOuBxNy51779157 = -917255897;    long XEyOOjcxhCXIzqBOKvIOuBxNy99370168 = 20943434;    long XEyOOjcxhCXIzqBOKvIOuBxNy51694959 = -333279547;    long XEyOOjcxhCXIzqBOKvIOuBxNy68979391 = 10928025;    long XEyOOjcxhCXIzqBOKvIOuBxNy5904301 = -152234156;    long XEyOOjcxhCXIzqBOKvIOuBxNy68291999 = 27692296;    long XEyOOjcxhCXIzqBOKvIOuBxNy32458615 = -245115648;    long XEyOOjcxhCXIzqBOKvIOuBxNy40167184 = -742662660;    long XEyOOjcxhCXIzqBOKvIOuBxNy4040627 = 39377118;    long XEyOOjcxhCXIzqBOKvIOuBxNy59065054 = 9095743;    long XEyOOjcxhCXIzqBOKvIOuBxNy40114306 = 84148213;    long XEyOOjcxhCXIzqBOKvIOuBxNy36059552 = -756494964;    long XEyOOjcxhCXIzqBOKvIOuBxNy31347343 = -740108786;    long XEyOOjcxhCXIzqBOKvIOuBxNy37696442 = -634171977;    long XEyOOjcxhCXIzqBOKvIOuBxNy97951592 = -851428873;    long XEyOOjcxhCXIzqBOKvIOuBxNy44255397 = -480888188;    long XEyOOjcxhCXIzqBOKvIOuBxNy54907142 = -110265434;    long XEyOOjcxhCXIzqBOKvIOuBxNy38131696 = -210721751;    long XEyOOjcxhCXIzqBOKvIOuBxNy1885206 = -324055676;    long XEyOOjcxhCXIzqBOKvIOuBxNy41960457 = -85356344;    long XEyOOjcxhCXIzqBOKvIOuBxNy39727 = -542145471;     XEyOOjcxhCXIzqBOKvIOuBxNy39450870 = XEyOOjcxhCXIzqBOKvIOuBxNy85603728;     XEyOOjcxhCXIzqBOKvIOuBxNy85603728 = XEyOOjcxhCXIzqBOKvIOuBxNy81504480;     XEyOOjcxhCXIzqBOKvIOuBxNy81504480 = XEyOOjcxhCXIzqBOKvIOuBxNy53424347;     XEyOOjcxhCXIzqBOKvIOuBxNy53424347 = XEyOOjcxhCXIzqBOKvIOuBxNy57596153;     XEyOOjcxhCXIzqBOKvIOuBxNy57596153 = XEyOOjcxhCXIzqBOKvIOuBxNy1577346;     XEyOOjcxhCXIzqBOKvIOuBxNy1577346 = XEyOOjcxhCXIzqBOKvIOuBxNy40405349;     XEyOOjcxhCXIzqBOKvIOuBxNy40405349 = XEyOOjcxhCXIzqBOKvIOuBxNy95948174;     XEyOOjcxhCXIzqBOKvIOuBxNy95948174 = XEyOOjcxhCXIzqBOKvIOuBxNy25513033;     XEyOOjcxhCXIzqBOKvIOuBxNy25513033 = XEyOOjcxhCXIzqBOKvIOuBxNy38781561;     XEyOOjcxhCXIzqBOKvIOuBxNy38781561 = XEyOOjcxhCXIzqBOKvIOuBxNy6890469;     XEyOOjcxhCXIzqBOKvIOuBxNy6890469 = XEyOOjcxhCXIzqBOKvIOuBxNy42686265;     XEyOOjcxhCXIzqBOKvIOuBxNy42686265 = XEyOOjcxhCXIzqBOKvIOuBxNy8852481;     XEyOOjcxhCXIzqBOKvIOuBxNy8852481 = XEyOOjcxhCXIzqBOKvIOuBxNy61889127;     XEyOOjcxhCXIzqBOKvIOuBxNy61889127 = XEyOOjcxhCXIzqBOKvIOuBxNy73189341;     XEyOOjcxhCXIzqBOKvIOuBxNy73189341 = XEyOOjcxhCXIzqBOKvIOuBxNy85497331;     XEyOOjcxhCXIzqBOKvIOuBxNy85497331 = XEyOOjcxhCXIzqBOKvIOuBxNy25479434;     XEyOOjcxhCXIzqBOKvIOuBxNy25479434 = XEyOOjcxhCXIzqBOKvIOuBxNy85127494;     XEyOOjcxhCXIzqBOKvIOuBxNy85127494 = XEyOOjcxhCXIzqBOKvIOuBxNy61530772;     XEyOOjcxhCXIzqBOKvIOuBxNy61530772 = XEyOOjcxhCXIzqBOKvIOuBxNy27127389;     XEyOOjcxhCXIzqBOKvIOuBxNy27127389 = XEyOOjcxhCXIzqBOKvIOuBxNy88925239;     XEyOOjcxhCXIzqBOKvIOuBxNy88925239 = XEyOOjcxhCXIzqBOKvIOuBxNy97341919;     XEyOOjcxhCXIzqBOKvIOuBxNy97341919 = XEyOOjcxhCXIzqBOKvIOuBxNy52828814;     XEyOOjcxhCXIzqBOKvIOuBxNy52828814 = XEyOOjcxhCXIzqBOKvIOuBxNy32022340;     XEyOOjcxhCXIzqBOKvIOuBxNy32022340 = XEyOOjcxhCXIzqBOKvIOuBxNy27468972;     XEyOOjcxhCXIzqBOKvIOuBxNy27468972 = XEyOOjcxhCXIzqBOKvIOuBxNy21174953;     XEyOOjcxhCXIzqBOKvIOuBxNy21174953 = XEyOOjcxhCXIzqBOKvIOuBxNy65170854;     XEyOOjcxhCXIzqBOKvIOuBxNy65170854 = XEyOOjcxhCXIzqBOKvIOuBxNy75343077;     XEyOOjcxhCXIzqBOKvIOuBxNy75343077 = XEyOOjcxhCXIzqBOKvIOuBxNy93431320;     XEyOOjcxhCXIzqBOKvIOuBxNy93431320 = XEyOOjcxhCXIzqBOKvIOuBxNy2735212;     XEyOOjcxhCXIzqBOKvIOuBxNy2735212 = XEyOOjcxhCXIzqBOKvIOuBxNy85401697;     XEyOOjcxhCXIzqBOKvIOuBxNy85401697 = XEyOOjcxhCXIzqBOKvIOuBxNy73550120;     XEyOOjcxhCXIzqBOKvIOuBxNy73550120 = XEyOOjcxhCXIzqBOKvIOuBxNy8619589;     XEyOOjcxhCXIzqBOKvIOuBxNy8619589 = XEyOOjcxhCXIzqBOKvIOuBxNy372056;     XEyOOjcxhCXIzqBOKvIOuBxNy372056 = XEyOOjcxhCXIzqBOKvIOuBxNy82223256;     XEyOOjcxhCXIzqBOKvIOuBxNy82223256 = XEyOOjcxhCXIzqBOKvIOuBxNy68834467;     XEyOOjcxhCXIzqBOKvIOuBxNy68834467 = XEyOOjcxhCXIzqBOKvIOuBxNy80829482;     XEyOOjcxhCXIzqBOKvIOuBxNy80829482 = XEyOOjcxhCXIzqBOKvIOuBxNy63651817;     XEyOOjcxhCXIzqBOKvIOuBxNy63651817 = XEyOOjcxhCXIzqBOKvIOuBxNy34372793;     XEyOOjcxhCXIzqBOKvIOuBxNy34372793 = XEyOOjcxhCXIzqBOKvIOuBxNy80661888;     XEyOOjcxhCXIzqBOKvIOuBxNy80661888 = XEyOOjcxhCXIzqBOKvIOuBxNy19969414;     XEyOOjcxhCXIzqBOKvIOuBxNy19969414 = XEyOOjcxhCXIzqBOKvIOuBxNy40648550;     XEyOOjcxhCXIzqBOKvIOuBxNy40648550 = XEyOOjcxhCXIzqBOKvIOuBxNy24663027;     XEyOOjcxhCXIzqBOKvIOuBxNy24663027 = XEyOOjcxhCXIzqBOKvIOuBxNy95340320;     XEyOOjcxhCXIzqBOKvIOuBxNy95340320 = XEyOOjcxhCXIzqBOKvIOuBxNy33380076;     XEyOOjcxhCXIzqBOKvIOuBxNy33380076 = XEyOOjcxhCXIzqBOKvIOuBxNy75689815;     XEyOOjcxhCXIzqBOKvIOuBxNy75689815 = XEyOOjcxhCXIzqBOKvIOuBxNy21804785;     XEyOOjcxhCXIzqBOKvIOuBxNy21804785 = XEyOOjcxhCXIzqBOKvIOuBxNy13475896;     XEyOOjcxhCXIzqBOKvIOuBxNy13475896 = XEyOOjcxhCXIzqBOKvIOuBxNy6363686;     XEyOOjcxhCXIzqBOKvIOuBxNy6363686 = XEyOOjcxhCXIzqBOKvIOuBxNy87527019;     XEyOOjcxhCXIzqBOKvIOuBxNy87527019 = XEyOOjcxhCXIzqBOKvIOuBxNy34443212;     XEyOOjcxhCXIzqBOKvIOuBxNy34443212 = XEyOOjcxhCXIzqBOKvIOuBxNy52943082;     XEyOOjcxhCXIzqBOKvIOuBxNy52943082 = XEyOOjcxhCXIzqBOKvIOuBxNy33382936;     XEyOOjcxhCXIzqBOKvIOuBxNy33382936 = XEyOOjcxhCXIzqBOKvIOuBxNy4578963;     XEyOOjcxhCXIzqBOKvIOuBxNy4578963 = XEyOOjcxhCXIzqBOKvIOuBxNy41307001;     XEyOOjcxhCXIzqBOKvIOuBxNy41307001 = XEyOOjcxhCXIzqBOKvIOuBxNy42108951;     XEyOOjcxhCXIzqBOKvIOuBxNy42108951 = XEyOOjcxhCXIzqBOKvIOuBxNy32774915;     XEyOOjcxhCXIzqBOKvIOuBxNy32774915 = XEyOOjcxhCXIzqBOKvIOuBxNy49482140;     XEyOOjcxhCXIzqBOKvIOuBxNy49482140 = XEyOOjcxhCXIzqBOKvIOuBxNy25955375;     XEyOOjcxhCXIzqBOKvIOuBxNy25955375 = XEyOOjcxhCXIzqBOKvIOuBxNy36421201;     XEyOOjcxhCXIzqBOKvIOuBxNy36421201 = XEyOOjcxhCXIzqBOKvIOuBxNy36406491;     XEyOOjcxhCXIzqBOKvIOuBxNy36406491 = XEyOOjcxhCXIzqBOKvIOuBxNy65062272;     XEyOOjcxhCXIzqBOKvIOuBxNy65062272 = XEyOOjcxhCXIzqBOKvIOuBxNy2516854;     XEyOOjcxhCXIzqBOKvIOuBxNy2516854 = XEyOOjcxhCXIzqBOKvIOuBxNy22777821;     XEyOOjcxhCXIzqBOKvIOuBxNy22777821 = XEyOOjcxhCXIzqBOKvIOuBxNy53379864;     XEyOOjcxhCXIzqBOKvIOuBxNy53379864 = XEyOOjcxhCXIzqBOKvIOuBxNy33340349;     XEyOOjcxhCXIzqBOKvIOuBxNy33340349 = XEyOOjcxhCXIzqBOKvIOuBxNy34066676;     XEyOOjcxhCXIzqBOKvIOuBxNy34066676 = XEyOOjcxhCXIzqBOKvIOuBxNy8480426;     XEyOOjcxhCXIzqBOKvIOuBxNy8480426 = XEyOOjcxhCXIzqBOKvIOuBxNy79665871;     XEyOOjcxhCXIzqBOKvIOuBxNy79665871 = XEyOOjcxhCXIzqBOKvIOuBxNy4354875;     XEyOOjcxhCXIzqBOKvIOuBxNy4354875 = XEyOOjcxhCXIzqBOKvIOuBxNy4667849;     XEyOOjcxhCXIzqBOKvIOuBxNy4667849 = XEyOOjcxhCXIzqBOKvIOuBxNy61827617;     XEyOOjcxhCXIzqBOKvIOuBxNy61827617 = XEyOOjcxhCXIzqBOKvIOuBxNy50754701;     XEyOOjcxhCXIzqBOKvIOuBxNy50754701 = XEyOOjcxhCXIzqBOKvIOuBxNy80868884;     XEyOOjcxhCXIzqBOKvIOuBxNy80868884 = XEyOOjcxhCXIzqBOKvIOuBxNy7157975;     XEyOOjcxhCXIzqBOKvIOuBxNy7157975 = XEyOOjcxhCXIzqBOKvIOuBxNy48276689;     XEyOOjcxhCXIzqBOKvIOuBxNy48276689 = XEyOOjcxhCXIzqBOKvIOuBxNy72678892;     XEyOOjcxhCXIzqBOKvIOuBxNy72678892 = XEyOOjcxhCXIzqBOKvIOuBxNy57488493;     XEyOOjcxhCXIzqBOKvIOuBxNy57488493 = XEyOOjcxhCXIzqBOKvIOuBxNy98642264;     XEyOOjcxhCXIzqBOKvIOuBxNy98642264 = XEyOOjcxhCXIzqBOKvIOuBxNy51779157;     XEyOOjcxhCXIzqBOKvIOuBxNy51779157 = XEyOOjcxhCXIzqBOKvIOuBxNy99370168;     XEyOOjcxhCXIzqBOKvIOuBxNy99370168 = XEyOOjcxhCXIzqBOKvIOuBxNy51694959;     XEyOOjcxhCXIzqBOKvIOuBxNy51694959 = XEyOOjcxhCXIzqBOKvIOuBxNy68979391;     XEyOOjcxhCXIzqBOKvIOuBxNy68979391 = XEyOOjcxhCXIzqBOKvIOuBxNy5904301;     XEyOOjcxhCXIzqBOKvIOuBxNy5904301 = XEyOOjcxhCXIzqBOKvIOuBxNy68291999;     XEyOOjcxhCXIzqBOKvIOuBxNy68291999 = XEyOOjcxhCXIzqBOKvIOuBxNy32458615;     XEyOOjcxhCXIzqBOKvIOuBxNy32458615 = XEyOOjcxhCXIzqBOKvIOuBxNy40167184;     XEyOOjcxhCXIzqBOKvIOuBxNy40167184 = XEyOOjcxhCXIzqBOKvIOuBxNy4040627;     XEyOOjcxhCXIzqBOKvIOuBxNy4040627 = XEyOOjcxhCXIzqBOKvIOuBxNy59065054;     XEyOOjcxhCXIzqBOKvIOuBxNy59065054 = XEyOOjcxhCXIzqBOKvIOuBxNy40114306;     XEyOOjcxhCXIzqBOKvIOuBxNy40114306 = XEyOOjcxhCXIzqBOKvIOuBxNy36059552;     XEyOOjcxhCXIzqBOKvIOuBxNy36059552 = XEyOOjcxhCXIzqBOKvIOuBxNy31347343;     XEyOOjcxhCXIzqBOKvIOuBxNy31347343 = XEyOOjcxhCXIzqBOKvIOuBxNy37696442;     XEyOOjcxhCXIzqBOKvIOuBxNy37696442 = XEyOOjcxhCXIzqBOKvIOuBxNy97951592;     XEyOOjcxhCXIzqBOKvIOuBxNy97951592 = XEyOOjcxhCXIzqBOKvIOuBxNy44255397;     XEyOOjcxhCXIzqBOKvIOuBxNy44255397 = XEyOOjcxhCXIzqBOKvIOuBxNy54907142;     XEyOOjcxhCXIzqBOKvIOuBxNy54907142 = XEyOOjcxhCXIzqBOKvIOuBxNy38131696;     XEyOOjcxhCXIzqBOKvIOuBxNy38131696 = XEyOOjcxhCXIzqBOKvIOuBxNy1885206;     XEyOOjcxhCXIzqBOKvIOuBxNy1885206 = XEyOOjcxhCXIzqBOKvIOuBxNy41960457;     XEyOOjcxhCXIzqBOKvIOuBxNy41960457 = XEyOOjcxhCXIzqBOKvIOuBxNy39727;     XEyOOjcxhCXIzqBOKvIOuBxNy39727 = XEyOOjcxhCXIzqBOKvIOuBxNy39450870;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PSudgbtRcGDYZNknnoDgUYLbmomzeruaNUpjuGVxcZFXNDhZJffJYmYqH97523839() {     long TqsounlLdLEXBthSFEvToNjGN74909838 = 91577629;    long TqsounlLdLEXBthSFEvToNjGN98875807 = -733983656;    long TqsounlLdLEXBthSFEvToNjGN18890957 = -293756800;    long TqsounlLdLEXBthSFEvToNjGN25647702 = -799054156;    long TqsounlLdLEXBthSFEvToNjGN13881423 = -194147971;    long TqsounlLdLEXBthSFEvToNjGN37800217 = -463576345;    long TqsounlLdLEXBthSFEvToNjGN51062756 = -820653542;    long TqsounlLdLEXBthSFEvToNjGN58079735 = -66579574;    long TqsounlLdLEXBthSFEvToNjGN27030638 = -416700543;    long TqsounlLdLEXBthSFEvToNjGN53684273 = -741353568;    long TqsounlLdLEXBthSFEvToNjGN45072204 = -38277092;    long TqsounlLdLEXBthSFEvToNjGN43254413 = -35970141;    long TqsounlLdLEXBthSFEvToNjGN47087126 = -992773873;    long TqsounlLdLEXBthSFEvToNjGN15029990 = -160425014;    long TqsounlLdLEXBthSFEvToNjGN31383858 = 4136339;    long TqsounlLdLEXBthSFEvToNjGN69038632 = -803984755;    long TqsounlLdLEXBthSFEvToNjGN81315369 = -470062862;    long TqsounlLdLEXBthSFEvToNjGN84887685 = -10689984;    long TqsounlLdLEXBthSFEvToNjGN62081102 = -717219382;    long TqsounlLdLEXBthSFEvToNjGN20964608 = -96427325;    long TqsounlLdLEXBthSFEvToNjGN2012103 = -732369871;    long TqsounlLdLEXBthSFEvToNjGN763444 = -756349752;    long TqsounlLdLEXBthSFEvToNjGN23354194 = -94063096;    long TqsounlLdLEXBthSFEvToNjGN25815285 = 24242616;    long TqsounlLdLEXBthSFEvToNjGN35486923 = -272736651;    long TqsounlLdLEXBthSFEvToNjGN31873125 = -982051237;    long TqsounlLdLEXBthSFEvToNjGN25591429 = -540841221;    long TqsounlLdLEXBthSFEvToNjGN16071502 = -588937985;    long TqsounlLdLEXBthSFEvToNjGN40099535 = -71346441;    long TqsounlLdLEXBthSFEvToNjGN8268623 = -459748007;    long TqsounlLdLEXBthSFEvToNjGN3984929 = -340385562;    long TqsounlLdLEXBthSFEvToNjGN11373139 = 5759144;    long TqsounlLdLEXBthSFEvToNjGN20837600 = -976787575;    long TqsounlLdLEXBthSFEvToNjGN30120482 = 19934102;    long TqsounlLdLEXBthSFEvToNjGN48031710 = -839384051;    long TqsounlLdLEXBthSFEvToNjGN20395311 = -268061408;    long TqsounlLdLEXBthSFEvToNjGN30241299 = -667961771;    long TqsounlLdLEXBthSFEvToNjGN14867221 = -245979191;    long TqsounlLdLEXBthSFEvToNjGN64763355 = -397379844;    long TqsounlLdLEXBthSFEvToNjGN44933420 = -512822104;    long TqsounlLdLEXBthSFEvToNjGN53421022 = -436226345;    long TqsounlLdLEXBthSFEvToNjGN30013677 = -730360837;    long TqsounlLdLEXBthSFEvToNjGN14046405 = -480364761;    long TqsounlLdLEXBthSFEvToNjGN35471659 = -877950248;    long TqsounlLdLEXBthSFEvToNjGN33396534 = -48984439;    long TqsounlLdLEXBthSFEvToNjGN21651144 = -370419188;    long TqsounlLdLEXBthSFEvToNjGN41149949 = -598404225;    long TqsounlLdLEXBthSFEvToNjGN31202208 = -467804127;    long TqsounlLdLEXBthSFEvToNjGN29256352 = 6169284;    long TqsounlLdLEXBthSFEvToNjGN12056609 = -836044299;    long TqsounlLdLEXBthSFEvToNjGN15213936 = -227209690;    long TqsounlLdLEXBthSFEvToNjGN36428555 = -756941775;    long TqsounlLdLEXBthSFEvToNjGN2004085 = -234652336;    long TqsounlLdLEXBthSFEvToNjGN20570809 = -960077216;    long TqsounlLdLEXBthSFEvToNjGN95511737 = -170957974;    long TqsounlLdLEXBthSFEvToNjGN74146394 = -152072620;    long TqsounlLdLEXBthSFEvToNjGN75521613 = -539920561;    long TqsounlLdLEXBthSFEvToNjGN93075671 = -217999416;    long TqsounlLdLEXBthSFEvToNjGN90160778 = -426317506;    long TqsounlLdLEXBthSFEvToNjGN82008298 = -212096734;    long TqsounlLdLEXBthSFEvToNjGN12208789 = -922735125;    long TqsounlLdLEXBthSFEvToNjGN34991254 = -131715558;    long TqsounlLdLEXBthSFEvToNjGN17980201 = -995233134;    long TqsounlLdLEXBthSFEvToNjGN18762016 = -956952536;    long TqsounlLdLEXBthSFEvToNjGN49699344 = -300968006;    long TqsounlLdLEXBthSFEvToNjGN33699066 = 55963763;    long TqsounlLdLEXBthSFEvToNjGN22416814 = -59182566;    long TqsounlLdLEXBthSFEvToNjGN16966645 = -912707976;    long TqsounlLdLEXBthSFEvToNjGN66998280 = -321040963;    long TqsounlLdLEXBthSFEvToNjGN10988548 = -727802253;    long TqsounlLdLEXBthSFEvToNjGN38797333 = -36022985;    long TqsounlLdLEXBthSFEvToNjGN66448149 = -124083672;    long TqsounlLdLEXBthSFEvToNjGN20124331 = -613310140;    long TqsounlLdLEXBthSFEvToNjGN17147683 = -104397279;    long TqsounlLdLEXBthSFEvToNjGN67543585 = -660200980;    long TqsounlLdLEXBthSFEvToNjGN71998425 = 97990966;    long TqsounlLdLEXBthSFEvToNjGN86717039 = -175984992;    long TqsounlLdLEXBthSFEvToNjGN87882535 = -216112848;    long TqsounlLdLEXBthSFEvToNjGN92418750 = -926772945;    long TqsounlLdLEXBthSFEvToNjGN13835780 = -902317463;    long TqsounlLdLEXBthSFEvToNjGN90723176 = -283647013;    long TqsounlLdLEXBthSFEvToNjGN94389220 = 26962905;    long TqsounlLdLEXBthSFEvToNjGN86815150 = -495107270;    long TqsounlLdLEXBthSFEvToNjGN28042926 = -235302142;    long TqsounlLdLEXBthSFEvToNjGN93054686 = -132538317;    long TqsounlLdLEXBthSFEvToNjGN67556374 = -583443788;    long TqsounlLdLEXBthSFEvToNjGN9369054 = -759588521;    long TqsounlLdLEXBthSFEvToNjGN266791 = 83289641;    long TqsounlLdLEXBthSFEvToNjGN34608744 = -809107924;    long TqsounlLdLEXBthSFEvToNjGN73885315 = -587311432;    long TqsounlLdLEXBthSFEvToNjGN44873698 = -728140848;    long TqsounlLdLEXBthSFEvToNjGN37165628 = -349962356;    long TqsounlLdLEXBthSFEvToNjGN24706442 = -819661686;    long TqsounlLdLEXBthSFEvToNjGN82755056 = -85283111;    long TqsounlLdLEXBthSFEvToNjGN32724632 = -590086980;    long TqsounlLdLEXBthSFEvToNjGN18429768 = -204510788;    long TqsounlLdLEXBthSFEvToNjGN12033477 = -735127704;    long TqsounlLdLEXBthSFEvToNjGN95284389 = -523412225;    long TqsounlLdLEXBthSFEvToNjGN85772314 = -476982243;    long TqsounlLdLEXBthSFEvToNjGN99697468 = 91577629;     TqsounlLdLEXBthSFEvToNjGN74909838 = TqsounlLdLEXBthSFEvToNjGN98875807;     TqsounlLdLEXBthSFEvToNjGN98875807 = TqsounlLdLEXBthSFEvToNjGN18890957;     TqsounlLdLEXBthSFEvToNjGN18890957 = TqsounlLdLEXBthSFEvToNjGN25647702;     TqsounlLdLEXBthSFEvToNjGN25647702 = TqsounlLdLEXBthSFEvToNjGN13881423;     TqsounlLdLEXBthSFEvToNjGN13881423 = TqsounlLdLEXBthSFEvToNjGN37800217;     TqsounlLdLEXBthSFEvToNjGN37800217 = TqsounlLdLEXBthSFEvToNjGN51062756;     TqsounlLdLEXBthSFEvToNjGN51062756 = TqsounlLdLEXBthSFEvToNjGN58079735;     TqsounlLdLEXBthSFEvToNjGN58079735 = TqsounlLdLEXBthSFEvToNjGN27030638;     TqsounlLdLEXBthSFEvToNjGN27030638 = TqsounlLdLEXBthSFEvToNjGN53684273;     TqsounlLdLEXBthSFEvToNjGN53684273 = TqsounlLdLEXBthSFEvToNjGN45072204;     TqsounlLdLEXBthSFEvToNjGN45072204 = TqsounlLdLEXBthSFEvToNjGN43254413;     TqsounlLdLEXBthSFEvToNjGN43254413 = TqsounlLdLEXBthSFEvToNjGN47087126;     TqsounlLdLEXBthSFEvToNjGN47087126 = TqsounlLdLEXBthSFEvToNjGN15029990;     TqsounlLdLEXBthSFEvToNjGN15029990 = TqsounlLdLEXBthSFEvToNjGN31383858;     TqsounlLdLEXBthSFEvToNjGN31383858 = TqsounlLdLEXBthSFEvToNjGN69038632;     TqsounlLdLEXBthSFEvToNjGN69038632 = TqsounlLdLEXBthSFEvToNjGN81315369;     TqsounlLdLEXBthSFEvToNjGN81315369 = TqsounlLdLEXBthSFEvToNjGN84887685;     TqsounlLdLEXBthSFEvToNjGN84887685 = TqsounlLdLEXBthSFEvToNjGN62081102;     TqsounlLdLEXBthSFEvToNjGN62081102 = TqsounlLdLEXBthSFEvToNjGN20964608;     TqsounlLdLEXBthSFEvToNjGN20964608 = TqsounlLdLEXBthSFEvToNjGN2012103;     TqsounlLdLEXBthSFEvToNjGN2012103 = TqsounlLdLEXBthSFEvToNjGN763444;     TqsounlLdLEXBthSFEvToNjGN763444 = TqsounlLdLEXBthSFEvToNjGN23354194;     TqsounlLdLEXBthSFEvToNjGN23354194 = TqsounlLdLEXBthSFEvToNjGN25815285;     TqsounlLdLEXBthSFEvToNjGN25815285 = TqsounlLdLEXBthSFEvToNjGN35486923;     TqsounlLdLEXBthSFEvToNjGN35486923 = TqsounlLdLEXBthSFEvToNjGN31873125;     TqsounlLdLEXBthSFEvToNjGN31873125 = TqsounlLdLEXBthSFEvToNjGN25591429;     TqsounlLdLEXBthSFEvToNjGN25591429 = TqsounlLdLEXBthSFEvToNjGN16071502;     TqsounlLdLEXBthSFEvToNjGN16071502 = TqsounlLdLEXBthSFEvToNjGN40099535;     TqsounlLdLEXBthSFEvToNjGN40099535 = TqsounlLdLEXBthSFEvToNjGN8268623;     TqsounlLdLEXBthSFEvToNjGN8268623 = TqsounlLdLEXBthSFEvToNjGN3984929;     TqsounlLdLEXBthSFEvToNjGN3984929 = TqsounlLdLEXBthSFEvToNjGN11373139;     TqsounlLdLEXBthSFEvToNjGN11373139 = TqsounlLdLEXBthSFEvToNjGN20837600;     TqsounlLdLEXBthSFEvToNjGN20837600 = TqsounlLdLEXBthSFEvToNjGN30120482;     TqsounlLdLEXBthSFEvToNjGN30120482 = TqsounlLdLEXBthSFEvToNjGN48031710;     TqsounlLdLEXBthSFEvToNjGN48031710 = TqsounlLdLEXBthSFEvToNjGN20395311;     TqsounlLdLEXBthSFEvToNjGN20395311 = TqsounlLdLEXBthSFEvToNjGN30241299;     TqsounlLdLEXBthSFEvToNjGN30241299 = TqsounlLdLEXBthSFEvToNjGN14867221;     TqsounlLdLEXBthSFEvToNjGN14867221 = TqsounlLdLEXBthSFEvToNjGN64763355;     TqsounlLdLEXBthSFEvToNjGN64763355 = TqsounlLdLEXBthSFEvToNjGN44933420;     TqsounlLdLEXBthSFEvToNjGN44933420 = TqsounlLdLEXBthSFEvToNjGN53421022;     TqsounlLdLEXBthSFEvToNjGN53421022 = TqsounlLdLEXBthSFEvToNjGN30013677;     TqsounlLdLEXBthSFEvToNjGN30013677 = TqsounlLdLEXBthSFEvToNjGN14046405;     TqsounlLdLEXBthSFEvToNjGN14046405 = TqsounlLdLEXBthSFEvToNjGN35471659;     TqsounlLdLEXBthSFEvToNjGN35471659 = TqsounlLdLEXBthSFEvToNjGN33396534;     TqsounlLdLEXBthSFEvToNjGN33396534 = TqsounlLdLEXBthSFEvToNjGN21651144;     TqsounlLdLEXBthSFEvToNjGN21651144 = TqsounlLdLEXBthSFEvToNjGN41149949;     TqsounlLdLEXBthSFEvToNjGN41149949 = TqsounlLdLEXBthSFEvToNjGN31202208;     TqsounlLdLEXBthSFEvToNjGN31202208 = TqsounlLdLEXBthSFEvToNjGN29256352;     TqsounlLdLEXBthSFEvToNjGN29256352 = TqsounlLdLEXBthSFEvToNjGN12056609;     TqsounlLdLEXBthSFEvToNjGN12056609 = TqsounlLdLEXBthSFEvToNjGN15213936;     TqsounlLdLEXBthSFEvToNjGN15213936 = TqsounlLdLEXBthSFEvToNjGN36428555;     TqsounlLdLEXBthSFEvToNjGN36428555 = TqsounlLdLEXBthSFEvToNjGN2004085;     TqsounlLdLEXBthSFEvToNjGN2004085 = TqsounlLdLEXBthSFEvToNjGN20570809;     TqsounlLdLEXBthSFEvToNjGN20570809 = TqsounlLdLEXBthSFEvToNjGN95511737;     TqsounlLdLEXBthSFEvToNjGN95511737 = TqsounlLdLEXBthSFEvToNjGN74146394;     TqsounlLdLEXBthSFEvToNjGN74146394 = TqsounlLdLEXBthSFEvToNjGN75521613;     TqsounlLdLEXBthSFEvToNjGN75521613 = TqsounlLdLEXBthSFEvToNjGN93075671;     TqsounlLdLEXBthSFEvToNjGN93075671 = TqsounlLdLEXBthSFEvToNjGN90160778;     TqsounlLdLEXBthSFEvToNjGN90160778 = TqsounlLdLEXBthSFEvToNjGN82008298;     TqsounlLdLEXBthSFEvToNjGN82008298 = TqsounlLdLEXBthSFEvToNjGN12208789;     TqsounlLdLEXBthSFEvToNjGN12208789 = TqsounlLdLEXBthSFEvToNjGN34991254;     TqsounlLdLEXBthSFEvToNjGN34991254 = TqsounlLdLEXBthSFEvToNjGN17980201;     TqsounlLdLEXBthSFEvToNjGN17980201 = TqsounlLdLEXBthSFEvToNjGN18762016;     TqsounlLdLEXBthSFEvToNjGN18762016 = TqsounlLdLEXBthSFEvToNjGN49699344;     TqsounlLdLEXBthSFEvToNjGN49699344 = TqsounlLdLEXBthSFEvToNjGN33699066;     TqsounlLdLEXBthSFEvToNjGN33699066 = TqsounlLdLEXBthSFEvToNjGN22416814;     TqsounlLdLEXBthSFEvToNjGN22416814 = TqsounlLdLEXBthSFEvToNjGN16966645;     TqsounlLdLEXBthSFEvToNjGN16966645 = TqsounlLdLEXBthSFEvToNjGN66998280;     TqsounlLdLEXBthSFEvToNjGN66998280 = TqsounlLdLEXBthSFEvToNjGN10988548;     TqsounlLdLEXBthSFEvToNjGN10988548 = TqsounlLdLEXBthSFEvToNjGN38797333;     TqsounlLdLEXBthSFEvToNjGN38797333 = TqsounlLdLEXBthSFEvToNjGN66448149;     TqsounlLdLEXBthSFEvToNjGN66448149 = TqsounlLdLEXBthSFEvToNjGN20124331;     TqsounlLdLEXBthSFEvToNjGN20124331 = TqsounlLdLEXBthSFEvToNjGN17147683;     TqsounlLdLEXBthSFEvToNjGN17147683 = TqsounlLdLEXBthSFEvToNjGN67543585;     TqsounlLdLEXBthSFEvToNjGN67543585 = TqsounlLdLEXBthSFEvToNjGN71998425;     TqsounlLdLEXBthSFEvToNjGN71998425 = TqsounlLdLEXBthSFEvToNjGN86717039;     TqsounlLdLEXBthSFEvToNjGN86717039 = TqsounlLdLEXBthSFEvToNjGN87882535;     TqsounlLdLEXBthSFEvToNjGN87882535 = TqsounlLdLEXBthSFEvToNjGN92418750;     TqsounlLdLEXBthSFEvToNjGN92418750 = TqsounlLdLEXBthSFEvToNjGN13835780;     TqsounlLdLEXBthSFEvToNjGN13835780 = TqsounlLdLEXBthSFEvToNjGN90723176;     TqsounlLdLEXBthSFEvToNjGN90723176 = TqsounlLdLEXBthSFEvToNjGN94389220;     TqsounlLdLEXBthSFEvToNjGN94389220 = TqsounlLdLEXBthSFEvToNjGN86815150;     TqsounlLdLEXBthSFEvToNjGN86815150 = TqsounlLdLEXBthSFEvToNjGN28042926;     TqsounlLdLEXBthSFEvToNjGN28042926 = TqsounlLdLEXBthSFEvToNjGN93054686;     TqsounlLdLEXBthSFEvToNjGN93054686 = TqsounlLdLEXBthSFEvToNjGN67556374;     TqsounlLdLEXBthSFEvToNjGN67556374 = TqsounlLdLEXBthSFEvToNjGN9369054;     TqsounlLdLEXBthSFEvToNjGN9369054 = TqsounlLdLEXBthSFEvToNjGN266791;     TqsounlLdLEXBthSFEvToNjGN266791 = TqsounlLdLEXBthSFEvToNjGN34608744;     TqsounlLdLEXBthSFEvToNjGN34608744 = TqsounlLdLEXBthSFEvToNjGN73885315;     TqsounlLdLEXBthSFEvToNjGN73885315 = TqsounlLdLEXBthSFEvToNjGN44873698;     TqsounlLdLEXBthSFEvToNjGN44873698 = TqsounlLdLEXBthSFEvToNjGN37165628;     TqsounlLdLEXBthSFEvToNjGN37165628 = TqsounlLdLEXBthSFEvToNjGN24706442;     TqsounlLdLEXBthSFEvToNjGN24706442 = TqsounlLdLEXBthSFEvToNjGN82755056;     TqsounlLdLEXBthSFEvToNjGN82755056 = TqsounlLdLEXBthSFEvToNjGN32724632;     TqsounlLdLEXBthSFEvToNjGN32724632 = TqsounlLdLEXBthSFEvToNjGN18429768;     TqsounlLdLEXBthSFEvToNjGN18429768 = TqsounlLdLEXBthSFEvToNjGN12033477;     TqsounlLdLEXBthSFEvToNjGN12033477 = TqsounlLdLEXBthSFEvToNjGN95284389;     TqsounlLdLEXBthSFEvToNjGN95284389 = TqsounlLdLEXBthSFEvToNjGN85772314;     TqsounlLdLEXBthSFEvToNjGN85772314 = TqsounlLdLEXBthSFEvToNjGN99697468;     TqsounlLdLEXBthSFEvToNjGN99697468 = TqsounlLdLEXBthSFEvToNjGN74909838;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zevhHjSPCmVkLEbHCAiplyySDvqLdlGKDSXnLGfmBdagALfmOGlnvpRAg12572908() {     long ceLtGlQgKgshowwVvoIXSSrPD81026944 = -20324260;    long ceLtGlQgKgshowwVvoIXSSrPD42249087 = -443583437;    long ceLtGlQgKgshowwVvoIXSSrPD34933140 = -444589721;    long ceLtGlQgKgshowwVvoIXSSrPD52722483 = -989802787;    long ceLtGlQgKgshowwVvoIXSSrPD82776911 = -714797842;    long ceLtGlQgKgshowwVvoIXSSrPD29217420 = -728072580;    long ceLtGlQgKgshowwVvoIXSSrPD11551722 = -959618519;    long ceLtGlQgKgshowwVvoIXSSrPD7839626 = -353453487;    long ceLtGlQgKgshowwVvoIXSSrPD91673133 = -184733208;    long ceLtGlQgKgshowwVvoIXSSrPD94913932 = 29670954;    long ceLtGlQgKgshowwVvoIXSSrPD5182495 = 84285321;    long ceLtGlQgKgshowwVvoIXSSrPD75077455 = -480376343;    long ceLtGlQgKgshowwVvoIXSSrPD33296245 = -332664962;    long ceLtGlQgKgshowwVvoIXSSrPD98173666 = -692663581;    long ceLtGlQgKgshowwVvoIXSSrPD27126285 = -686325827;    long ceLtGlQgKgshowwVvoIXSSrPD10544027 = -776984299;    long ceLtGlQgKgshowwVvoIXSSrPD75151373 = 13392025;    long ceLtGlQgKgshowwVvoIXSSrPD81940838 = -776212627;    long ceLtGlQgKgshowwVvoIXSSrPD23910944 = -22988479;    long ceLtGlQgKgshowwVvoIXSSrPD1514773 = -453330245;    long ceLtGlQgKgshowwVvoIXSSrPD90565295 = -587857326;    long ceLtGlQgKgshowwVvoIXSSrPD87284467 = -664279468;    long ceLtGlQgKgshowwVvoIXSSrPD58944986 = -940580582;    long ceLtGlQgKgshowwVvoIXSSrPD9807659 = -198062372;    long ceLtGlQgKgshowwVvoIXSSrPD79186573 = -645932684;    long ceLtGlQgKgshowwVvoIXSSrPD56594800 = -860706560;    long ceLtGlQgKgshowwVvoIXSSrPD24051207 = -441503424;    long ceLtGlQgKgshowwVvoIXSSrPD29178627 = -654866938;    long ceLtGlQgKgshowwVvoIXSSrPD6231791 = -293729145;    long ceLtGlQgKgshowwVvoIXSSrPD76884259 = -277218874;    long ceLtGlQgKgshowwVvoIXSSrPD96227477 = -253706500;    long ceLtGlQgKgshowwVvoIXSSrPD8983761 = -803687672;    long ceLtGlQgKgshowwVvoIXSSrPD30548548 = -869400945;    long ceLtGlQgKgshowwVvoIXSSrPD24951046 = -831607663;    long ceLtGlQgKgshowwVvoIXSSrPD9506362 = -378117156;    long ceLtGlQgKgshowwVvoIXSSrPD89121223 = -482087516;    long ceLtGlQgKgshowwVvoIXSSrPD11503234 = -621597641;    long ceLtGlQgKgshowwVvoIXSSrPD48957433 = -17485200;    long ceLtGlQgKgshowwVvoIXSSrPD38373609 = -391303341;    long ceLtGlQgKgshowwVvoIXSSrPD32435358 = -986261327;    long ceLtGlQgKgshowwVvoIXSSrPD59090246 = -501500240;    long ceLtGlQgKgshowwVvoIXSSrPD62164134 = 99496885;    long ceLtGlQgKgshowwVvoIXSSrPD92113383 = -561169344;    long ceLtGlQgKgshowwVvoIXSSrPD22879400 = -897293187;    long ceLtGlQgKgshowwVvoIXSSrPD45348999 = -810882594;    long ceLtGlQgKgshowwVvoIXSSrPD33590338 = -355635305;    long ceLtGlQgKgshowwVvoIXSSrPD58928523 = -717179762;    long ceLtGlQgKgshowwVvoIXSSrPD39159149 = -477699659;    long ceLtGlQgKgshowwVvoIXSSrPD38932081 = -79567704;    long ceLtGlQgKgshowwVvoIXSSrPD24968262 = -923055107;    long ceLtGlQgKgshowwVvoIXSSrPD50914614 = -69503362;    long ceLtGlQgKgshowwVvoIXSSrPD47238274 = -557668095;    long ceLtGlQgKgshowwVvoIXSSrPD50252542 = -26441923;    long ceLtGlQgKgshowwVvoIXSSrPD16539690 = -180547362;    long ceLtGlQgKgshowwVvoIXSSrPD22007613 = -871489756;    long ceLtGlQgKgshowwVvoIXSSrPD93742477 = -356044792;    long ceLtGlQgKgshowwVvoIXSSrPD83304100 = -503002855;    long ceLtGlQgKgshowwVvoIXSSrPD25125482 = -146527349;    long ceLtGlQgKgshowwVvoIXSSrPD73535909 = -243870103;    long ceLtGlQgKgshowwVvoIXSSrPD26182111 = -854091282;    long ceLtGlQgKgshowwVvoIXSSrPD5166213 = -186569157;    long ceLtGlQgKgshowwVvoIXSSrPD82373094 = -204751581;    long ceLtGlQgKgshowwVvoIXSSrPD1607836 = 40275658;    long ceLtGlQgKgshowwVvoIXSSrPD14788875 = -907514334;    long ceLtGlQgKgshowwVvoIXSSrPD98686454 = -716622546;    long ceLtGlQgKgshowwVvoIXSSrPD96198733 = -112027007;    long ceLtGlQgKgshowwVvoIXSSrPD44528907 = -610975398;    long ceLtGlQgKgshowwVvoIXSSrPD8345199 = -501057300;    long ceLtGlQgKgshowwVvoIXSSrPD88667305 = -214546426;    long ceLtGlQgKgshowwVvoIXSSrPD38005061 = -104238312;    long ceLtGlQgKgshowwVvoIXSSrPD99040792 = -55386658;    long ceLtGlQgKgshowwVvoIXSSrPD26193940 = -969122775;    long ceLtGlQgKgshowwVvoIXSSrPD43567230 = -284909286;    long ceLtGlQgKgshowwVvoIXSSrPD91475586 = -36727153;    long ceLtGlQgKgshowwVvoIXSSrPD42424526 = -951830006;    long ceLtGlQgKgshowwVvoIXSSrPD28401162 = -587354211;    long ceLtGlQgKgshowwVvoIXSSrPD95171084 = -3110124;    long ceLtGlQgKgshowwVvoIXSSrPD36065586 = 56712604;    long ceLtGlQgKgshowwVvoIXSSrPD64458660 = -387179779;    long ceLtGlQgKgshowwVvoIXSSrPD45596235 = -190297380;    long ceLtGlQgKgshowwVvoIXSSrPD97666277 = -43526798;    long ceLtGlQgKgshowwVvoIXSSrPD84892058 = -963803765;    long ceLtGlQgKgshowwVvoIXSSrPD90246546 = -475299235;    long ceLtGlQgKgshowwVvoIXSSrPD81263529 = -370674039;    long ceLtGlQgKgshowwVvoIXSSrPD25969645 = -107715513;    long ceLtGlQgKgshowwVvoIXSSrPD48989204 = -696038406;    long ceLtGlQgKgshowwVvoIXSSrPD58731218 = -677245749;    long ceLtGlQgKgshowwVvoIXSSrPD14008859 = -588853584;    long ceLtGlQgKgshowwVvoIXSSrPD2943434 = -960117907;    long ceLtGlQgKgshowwVvoIXSSrPD15763885 = 77927635;    long ceLtGlQgKgshowwVvoIXSSrPD5817124 = -979084661;    long ceLtGlQgKgshowwVvoIXSSrPD86377752 = -375070292;    long ceLtGlQgKgshowwVvoIXSSrPD75421523 = -773615098;    long ceLtGlQgKgshowwVvoIXSSrPD12191498 = -537212059;    long ceLtGlQgKgshowwVvoIXSSrPD27269145 = -699692170;    long ceLtGlQgKgshowwVvoIXSSrPD76717151 = -196748659;    long ceLtGlQgKgshowwVvoIXSSrPD60556298 = -940778773;    long ceLtGlQgKgshowwVvoIXSSrPD77324509 = -653655011;    long ceLtGlQgKgshowwVvoIXSSrPD24192945 = -80670641;    long ceLtGlQgKgshowwVvoIXSSrPD49150265 = -20324260;     ceLtGlQgKgshowwVvoIXSSrPD81026944 = ceLtGlQgKgshowwVvoIXSSrPD42249087;     ceLtGlQgKgshowwVvoIXSSrPD42249087 = ceLtGlQgKgshowwVvoIXSSrPD34933140;     ceLtGlQgKgshowwVvoIXSSrPD34933140 = ceLtGlQgKgshowwVvoIXSSrPD52722483;     ceLtGlQgKgshowwVvoIXSSrPD52722483 = ceLtGlQgKgshowwVvoIXSSrPD82776911;     ceLtGlQgKgshowwVvoIXSSrPD82776911 = ceLtGlQgKgshowwVvoIXSSrPD29217420;     ceLtGlQgKgshowwVvoIXSSrPD29217420 = ceLtGlQgKgshowwVvoIXSSrPD11551722;     ceLtGlQgKgshowwVvoIXSSrPD11551722 = ceLtGlQgKgshowwVvoIXSSrPD7839626;     ceLtGlQgKgshowwVvoIXSSrPD7839626 = ceLtGlQgKgshowwVvoIXSSrPD91673133;     ceLtGlQgKgshowwVvoIXSSrPD91673133 = ceLtGlQgKgshowwVvoIXSSrPD94913932;     ceLtGlQgKgshowwVvoIXSSrPD94913932 = ceLtGlQgKgshowwVvoIXSSrPD5182495;     ceLtGlQgKgshowwVvoIXSSrPD5182495 = ceLtGlQgKgshowwVvoIXSSrPD75077455;     ceLtGlQgKgshowwVvoIXSSrPD75077455 = ceLtGlQgKgshowwVvoIXSSrPD33296245;     ceLtGlQgKgshowwVvoIXSSrPD33296245 = ceLtGlQgKgshowwVvoIXSSrPD98173666;     ceLtGlQgKgshowwVvoIXSSrPD98173666 = ceLtGlQgKgshowwVvoIXSSrPD27126285;     ceLtGlQgKgshowwVvoIXSSrPD27126285 = ceLtGlQgKgshowwVvoIXSSrPD10544027;     ceLtGlQgKgshowwVvoIXSSrPD10544027 = ceLtGlQgKgshowwVvoIXSSrPD75151373;     ceLtGlQgKgshowwVvoIXSSrPD75151373 = ceLtGlQgKgshowwVvoIXSSrPD81940838;     ceLtGlQgKgshowwVvoIXSSrPD81940838 = ceLtGlQgKgshowwVvoIXSSrPD23910944;     ceLtGlQgKgshowwVvoIXSSrPD23910944 = ceLtGlQgKgshowwVvoIXSSrPD1514773;     ceLtGlQgKgshowwVvoIXSSrPD1514773 = ceLtGlQgKgshowwVvoIXSSrPD90565295;     ceLtGlQgKgshowwVvoIXSSrPD90565295 = ceLtGlQgKgshowwVvoIXSSrPD87284467;     ceLtGlQgKgshowwVvoIXSSrPD87284467 = ceLtGlQgKgshowwVvoIXSSrPD58944986;     ceLtGlQgKgshowwVvoIXSSrPD58944986 = ceLtGlQgKgshowwVvoIXSSrPD9807659;     ceLtGlQgKgshowwVvoIXSSrPD9807659 = ceLtGlQgKgshowwVvoIXSSrPD79186573;     ceLtGlQgKgshowwVvoIXSSrPD79186573 = ceLtGlQgKgshowwVvoIXSSrPD56594800;     ceLtGlQgKgshowwVvoIXSSrPD56594800 = ceLtGlQgKgshowwVvoIXSSrPD24051207;     ceLtGlQgKgshowwVvoIXSSrPD24051207 = ceLtGlQgKgshowwVvoIXSSrPD29178627;     ceLtGlQgKgshowwVvoIXSSrPD29178627 = ceLtGlQgKgshowwVvoIXSSrPD6231791;     ceLtGlQgKgshowwVvoIXSSrPD6231791 = ceLtGlQgKgshowwVvoIXSSrPD76884259;     ceLtGlQgKgshowwVvoIXSSrPD76884259 = ceLtGlQgKgshowwVvoIXSSrPD96227477;     ceLtGlQgKgshowwVvoIXSSrPD96227477 = ceLtGlQgKgshowwVvoIXSSrPD8983761;     ceLtGlQgKgshowwVvoIXSSrPD8983761 = ceLtGlQgKgshowwVvoIXSSrPD30548548;     ceLtGlQgKgshowwVvoIXSSrPD30548548 = ceLtGlQgKgshowwVvoIXSSrPD24951046;     ceLtGlQgKgshowwVvoIXSSrPD24951046 = ceLtGlQgKgshowwVvoIXSSrPD9506362;     ceLtGlQgKgshowwVvoIXSSrPD9506362 = ceLtGlQgKgshowwVvoIXSSrPD89121223;     ceLtGlQgKgshowwVvoIXSSrPD89121223 = ceLtGlQgKgshowwVvoIXSSrPD11503234;     ceLtGlQgKgshowwVvoIXSSrPD11503234 = ceLtGlQgKgshowwVvoIXSSrPD48957433;     ceLtGlQgKgshowwVvoIXSSrPD48957433 = ceLtGlQgKgshowwVvoIXSSrPD38373609;     ceLtGlQgKgshowwVvoIXSSrPD38373609 = ceLtGlQgKgshowwVvoIXSSrPD32435358;     ceLtGlQgKgshowwVvoIXSSrPD32435358 = ceLtGlQgKgshowwVvoIXSSrPD59090246;     ceLtGlQgKgshowwVvoIXSSrPD59090246 = ceLtGlQgKgshowwVvoIXSSrPD62164134;     ceLtGlQgKgshowwVvoIXSSrPD62164134 = ceLtGlQgKgshowwVvoIXSSrPD92113383;     ceLtGlQgKgshowwVvoIXSSrPD92113383 = ceLtGlQgKgshowwVvoIXSSrPD22879400;     ceLtGlQgKgshowwVvoIXSSrPD22879400 = ceLtGlQgKgshowwVvoIXSSrPD45348999;     ceLtGlQgKgshowwVvoIXSSrPD45348999 = ceLtGlQgKgshowwVvoIXSSrPD33590338;     ceLtGlQgKgshowwVvoIXSSrPD33590338 = ceLtGlQgKgshowwVvoIXSSrPD58928523;     ceLtGlQgKgshowwVvoIXSSrPD58928523 = ceLtGlQgKgshowwVvoIXSSrPD39159149;     ceLtGlQgKgshowwVvoIXSSrPD39159149 = ceLtGlQgKgshowwVvoIXSSrPD38932081;     ceLtGlQgKgshowwVvoIXSSrPD38932081 = ceLtGlQgKgshowwVvoIXSSrPD24968262;     ceLtGlQgKgshowwVvoIXSSrPD24968262 = ceLtGlQgKgshowwVvoIXSSrPD50914614;     ceLtGlQgKgshowwVvoIXSSrPD50914614 = ceLtGlQgKgshowwVvoIXSSrPD47238274;     ceLtGlQgKgshowwVvoIXSSrPD47238274 = ceLtGlQgKgshowwVvoIXSSrPD50252542;     ceLtGlQgKgshowwVvoIXSSrPD50252542 = ceLtGlQgKgshowwVvoIXSSrPD16539690;     ceLtGlQgKgshowwVvoIXSSrPD16539690 = ceLtGlQgKgshowwVvoIXSSrPD22007613;     ceLtGlQgKgshowwVvoIXSSrPD22007613 = ceLtGlQgKgshowwVvoIXSSrPD93742477;     ceLtGlQgKgshowwVvoIXSSrPD93742477 = ceLtGlQgKgshowwVvoIXSSrPD83304100;     ceLtGlQgKgshowwVvoIXSSrPD83304100 = ceLtGlQgKgshowwVvoIXSSrPD25125482;     ceLtGlQgKgshowwVvoIXSSrPD25125482 = ceLtGlQgKgshowwVvoIXSSrPD73535909;     ceLtGlQgKgshowwVvoIXSSrPD73535909 = ceLtGlQgKgshowwVvoIXSSrPD26182111;     ceLtGlQgKgshowwVvoIXSSrPD26182111 = ceLtGlQgKgshowwVvoIXSSrPD5166213;     ceLtGlQgKgshowwVvoIXSSrPD5166213 = ceLtGlQgKgshowwVvoIXSSrPD82373094;     ceLtGlQgKgshowwVvoIXSSrPD82373094 = ceLtGlQgKgshowwVvoIXSSrPD1607836;     ceLtGlQgKgshowwVvoIXSSrPD1607836 = ceLtGlQgKgshowwVvoIXSSrPD14788875;     ceLtGlQgKgshowwVvoIXSSrPD14788875 = ceLtGlQgKgshowwVvoIXSSrPD98686454;     ceLtGlQgKgshowwVvoIXSSrPD98686454 = ceLtGlQgKgshowwVvoIXSSrPD96198733;     ceLtGlQgKgshowwVvoIXSSrPD96198733 = ceLtGlQgKgshowwVvoIXSSrPD44528907;     ceLtGlQgKgshowwVvoIXSSrPD44528907 = ceLtGlQgKgshowwVvoIXSSrPD8345199;     ceLtGlQgKgshowwVvoIXSSrPD8345199 = ceLtGlQgKgshowwVvoIXSSrPD88667305;     ceLtGlQgKgshowwVvoIXSSrPD88667305 = ceLtGlQgKgshowwVvoIXSSrPD38005061;     ceLtGlQgKgshowwVvoIXSSrPD38005061 = ceLtGlQgKgshowwVvoIXSSrPD99040792;     ceLtGlQgKgshowwVvoIXSSrPD99040792 = ceLtGlQgKgshowwVvoIXSSrPD26193940;     ceLtGlQgKgshowwVvoIXSSrPD26193940 = ceLtGlQgKgshowwVvoIXSSrPD43567230;     ceLtGlQgKgshowwVvoIXSSrPD43567230 = ceLtGlQgKgshowwVvoIXSSrPD91475586;     ceLtGlQgKgshowwVvoIXSSrPD91475586 = ceLtGlQgKgshowwVvoIXSSrPD42424526;     ceLtGlQgKgshowwVvoIXSSrPD42424526 = ceLtGlQgKgshowwVvoIXSSrPD28401162;     ceLtGlQgKgshowwVvoIXSSrPD28401162 = ceLtGlQgKgshowwVvoIXSSrPD95171084;     ceLtGlQgKgshowwVvoIXSSrPD95171084 = ceLtGlQgKgshowwVvoIXSSrPD36065586;     ceLtGlQgKgshowwVvoIXSSrPD36065586 = ceLtGlQgKgshowwVvoIXSSrPD64458660;     ceLtGlQgKgshowwVvoIXSSrPD64458660 = ceLtGlQgKgshowwVvoIXSSrPD45596235;     ceLtGlQgKgshowwVvoIXSSrPD45596235 = ceLtGlQgKgshowwVvoIXSSrPD97666277;     ceLtGlQgKgshowwVvoIXSSrPD97666277 = ceLtGlQgKgshowwVvoIXSSrPD84892058;     ceLtGlQgKgshowwVvoIXSSrPD84892058 = ceLtGlQgKgshowwVvoIXSSrPD90246546;     ceLtGlQgKgshowwVvoIXSSrPD90246546 = ceLtGlQgKgshowwVvoIXSSrPD81263529;     ceLtGlQgKgshowwVvoIXSSrPD81263529 = ceLtGlQgKgshowwVvoIXSSrPD25969645;     ceLtGlQgKgshowwVvoIXSSrPD25969645 = ceLtGlQgKgshowwVvoIXSSrPD48989204;     ceLtGlQgKgshowwVvoIXSSrPD48989204 = ceLtGlQgKgshowwVvoIXSSrPD58731218;     ceLtGlQgKgshowwVvoIXSSrPD58731218 = ceLtGlQgKgshowwVvoIXSSrPD14008859;     ceLtGlQgKgshowwVvoIXSSrPD14008859 = ceLtGlQgKgshowwVvoIXSSrPD2943434;     ceLtGlQgKgshowwVvoIXSSrPD2943434 = ceLtGlQgKgshowwVvoIXSSrPD15763885;     ceLtGlQgKgshowwVvoIXSSrPD15763885 = ceLtGlQgKgshowwVvoIXSSrPD5817124;     ceLtGlQgKgshowwVvoIXSSrPD5817124 = ceLtGlQgKgshowwVvoIXSSrPD86377752;     ceLtGlQgKgshowwVvoIXSSrPD86377752 = ceLtGlQgKgshowwVvoIXSSrPD75421523;     ceLtGlQgKgshowwVvoIXSSrPD75421523 = ceLtGlQgKgshowwVvoIXSSrPD12191498;     ceLtGlQgKgshowwVvoIXSSrPD12191498 = ceLtGlQgKgshowwVvoIXSSrPD27269145;     ceLtGlQgKgshowwVvoIXSSrPD27269145 = ceLtGlQgKgshowwVvoIXSSrPD76717151;     ceLtGlQgKgshowwVvoIXSSrPD76717151 = ceLtGlQgKgshowwVvoIXSSrPD60556298;     ceLtGlQgKgshowwVvoIXSSrPD60556298 = ceLtGlQgKgshowwVvoIXSSrPD77324509;     ceLtGlQgKgshowwVvoIXSSrPD77324509 = ceLtGlQgKgshowwVvoIXSSrPD24192945;     ceLtGlQgKgshowwVvoIXSSrPD24192945 = ceLtGlQgKgshowwVvoIXSSrPD49150265;     ceLtGlQgKgshowwVvoIXSSrPD49150265 = ceLtGlQgKgshowwVvoIXSSrPD81026944;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LNKLTohRHdZAJifrRvLgFVvYwbQKPfrsFoDYClwwoBQNzfitAQptguCqR54781958() {     long mPrXWBcmgvUfGogzOsDFiYQtX5151131 = -627852020;    long mPrXWBcmgvUfGogzOsDFiYQtX7627491 = -458377465;    long mPrXWBcmgvUfGogzOsDFiYQtX37174476 = -767320796;    long mPrXWBcmgvUfGogzOsDFiYQtX46534608 = -582344253;    long mPrXWBcmgvUfGogzOsDFiYQtX55465072 = -346416667;    long mPrXWBcmgvUfGogzOsDFiYQtX60282533 = -822849982;    long mPrXWBcmgvUfGogzOsDFiYQtX35347470 = -953683304;    long mPrXWBcmgvUfGogzOsDFiYQtX34961450 = -471785356;    long mPrXWBcmgvUfGogzOsDFiYQtX69449300 = -756366440;    long mPrXWBcmgvUfGogzOsDFiYQtX56314762 = -620514643;    long mPrXWBcmgvUfGogzOsDFiYQtX32936901 = -434193533;    long mPrXWBcmgvUfGogzOsDFiYQtX37763863 = -182233546;    long mPrXWBcmgvUfGogzOsDFiYQtX29521990 = -830147924;    long mPrXWBcmgvUfGogzOsDFiYQtX11095083 = -210764622;    long mPrXWBcmgvUfGogzOsDFiYQtX56583792 = -900853037;    long mPrXWBcmgvUfGogzOsDFiYQtX72886074 = -512136884;    long mPrXWBcmgvUfGogzOsDFiYQtX66982060 = -127078842;    long mPrXWBcmgvUfGogzOsDFiYQtX92850043 = -766263906;    long mPrXWBcmgvUfGogzOsDFiYQtX44659357 = 18490779;    long mPrXWBcmgvUfGogzOsDFiYQtX31742189 = -813226734;    long mPrXWBcmgvUfGogzOsDFiYQtX17278400 = -184536209;    long mPrXWBcmgvUfGogzOsDFiYQtX8945073 = -390028818;    long mPrXWBcmgvUfGogzOsDFiYQtX54368224 = -885159161;    long mPrXWBcmgvUfGogzOsDFiYQtX68045169 = -113417050;    long mPrXWBcmgvUfGogzOsDFiYQtX4032007 = -931472782;    long mPrXWBcmgvUfGogzOsDFiYQtX73459689 = -23159081;    long mPrXWBcmgvUfGogzOsDFiYQtX17413867 = -586298706;    long mPrXWBcmgvUfGogzOsDFiYQtX24368421 = -124410331;    long mPrXWBcmgvUfGogzOsDFiYQtX34704813 = -801367588;    long mPrXWBcmgvUfGogzOsDFiYQtX62004055 = -740557694;    long mPrXWBcmgvUfGogzOsDFiYQtX69383922 = -21131810;    long mPrXWBcmgvUfGogzOsDFiYQtX83373717 = -31577778;    long mPrXWBcmgvUfGogzOsDFiYQtX38317423 = -5640272;    long mPrXWBcmgvUfGogzOsDFiYQtX78292736 = -22161246;    long mPrXWBcmgvUfGogzOsDFiYQtX13351345 = -593854741;    long mPrXWBcmgvUfGogzOsDFiYQtX1806656 = -738710284;    long mPrXWBcmgvUfGogzOsDFiYQtX76605830 = -148986992;    long mPrXWBcmgvUfGogzOsDFiYQtX35937727 = 30192633;    long mPrXWBcmgvUfGogzOsDFiYQtX97628183 = -784496414;    long mPrXWBcmgvUfGogzOsDFiYQtX84735265 = 86256899;    long mPrXWBcmgvUfGogzOsDFiYQtX59567787 = -276850719;    long mPrXWBcmgvUfGogzOsDFiYQtX14273510 = -698483407;    long mPrXWBcmgvUfGogzOsDFiYQtX64175967 = -759693896;    long mPrXWBcmgvUfGogzOsDFiYQtX75451363 = -930804402;    long mPrXWBcmgvUfGogzOsDFiYQtX14356961 = -277208304;    long mPrXWBcmgvUfGogzOsDFiYQtX33278075 = -183745173;    long mPrXWBcmgvUfGogzOsDFiYQtX467667 = 12389687;    long mPrXWBcmgvUfGogzOsDFiYQtX18896393 = -761449007;    long mPrXWBcmgvUfGogzOsDFiYQtX92745840 = -927296166;    long mPrXWBcmgvUfGogzOsDFiYQtX55696911 = 72669475;    long mPrXWBcmgvUfGogzOsDFiYQtX47148881 = -238445043;    long mPrXWBcmgvUfGogzOsDFiYQtX99432469 = 20449500;    long mPrXWBcmgvUfGogzOsDFiYQtX7943605 = -294452840;    long mPrXWBcmgvUfGogzOsDFiYQtX94322907 = -213047520;    long mPrXWBcmgvUfGogzOsDFiYQtX37503558 = -2732253;    long mPrXWBcmgvUfGogzOsDFiYQtX96206057 = -137823202;    long mPrXWBcmgvUfGogzOsDFiYQtX53259266 = -573218304;    long mPrXWBcmgvUfGogzOsDFiYQtX69129306 = -553903747;    long mPrXWBcmgvUfGogzOsDFiYQtX42502602 = -650871472;    long mPrXWBcmgvUfGogzOsDFiYQtX82005383 = -223257586;    long mPrXWBcmgvUfGogzOsDFiYQtX42868666 = -136551276;    long mPrXWBcmgvUfGogzOsDFiYQtX10979049 = -729272974;    long mPrXWBcmgvUfGogzOsDFiYQtX256638 = -670417769;    long mPrXWBcmgvUfGogzOsDFiYQtX7445246 = 84191253;    long mPrXWBcmgvUfGogzOsDFiYQtX86930840 = -499382833;    long mPrXWBcmgvUfGogzOsDFiYQtX49563184 = -302615756;    long mPrXWBcmgvUfGogzOsDFiYQtX99446440 = -76593274;    long mPrXWBcmgvUfGogzOsDFiYQtX51229254 = -707986679;    long mPrXWBcmgvUfGogzOsDFiYQtX97743737 = -616909882;    long mPrXWBcmgvUfGogzOsDFiYQtX54777136 = -62142753;    long mPrXWBcmgvUfGogzOsDFiYQtX96280243 = -263149893;    long mPrXWBcmgvUfGogzOsDFiYQtX31044333 = -57271476;    long mPrXWBcmgvUfGogzOsDFiYQtX95221860 = -981767493;    long mPrXWBcmgvUfGogzOsDFiYQtX59924091 = 32233880;    long mPrXWBcmgvUfGogzOsDFiYQtX72174402 = -436376016;    long mPrXWBcmgvUfGogzOsDFiYQtX3004890 = -486052802;    long mPrXWBcmgvUfGogzOsDFiYQtX44769106 = -630334923;    long mPrXWBcmgvUfGogzOsDFiYQtX78916861 = -954354760;    long mPrXWBcmgvUfGogzOsDFiYQtX53688209 = -836208746;    long mPrXWBcmgvUfGogzOsDFiYQtX70753931 = -647727610;    long mPrXWBcmgvUfGogzOsDFiYQtX72992023 = 64451232;    long mPrXWBcmgvUfGogzOsDFiYQtX98517473 = -824849700;    long mPrXWBcmgvUfGogzOsDFiYQtX31622580 = -197114165;    long mPrXWBcmgvUfGogzOsDFiYQtX79007902 = -774037064;    long mPrXWBcmgvUfGogzOsDFiYQtX14855175 = -402112652;    long mPrXWBcmgvUfGogzOsDFiYQtX69951452 = 58418689;    long mPrXWBcmgvUfGogzOsDFiYQtX75430112 = -737124939;    long mPrXWBcmgvUfGogzOsDFiYQtX43994515 = -792592753;    long mPrXWBcmgvUfGogzOsDFiYQtX40789178 = 80571007;    long mPrXWBcmgvUfGogzOsDFiYQtX17145288 = -356031539;    long mPrXWBcmgvUfGogzOsDFiYQtX48547389 = -65491980;    long mPrXWBcmgvUfGogzOsDFiYQtX7476524 = -595083245;    long mPrXWBcmgvUfGogzOsDFiYQtX93435124 = -318935896;    long mPrXWBcmgvUfGogzOsDFiYQtX15622800 = -461238828;    long mPrXWBcmgvUfGogzOsDFiYQtX41866599 = -777191826;    long mPrXWBcmgvUfGogzOsDFiYQtX48588738 = -547577745;    long mPrXWBcmgvUfGogzOsDFiYQtX14016873 = 71934361;    long mPrXWBcmgvUfGogzOsDFiYQtX56730722 = -743885150;    long mPrXWBcmgvUfGogzOsDFiYQtX88520522 = -331421569;    long mPrXWBcmgvUfGogzOsDFiYQtX64793776 = -627852020;     mPrXWBcmgvUfGogzOsDFiYQtX5151131 = mPrXWBcmgvUfGogzOsDFiYQtX7627491;     mPrXWBcmgvUfGogzOsDFiYQtX7627491 = mPrXWBcmgvUfGogzOsDFiYQtX37174476;     mPrXWBcmgvUfGogzOsDFiYQtX37174476 = mPrXWBcmgvUfGogzOsDFiYQtX46534608;     mPrXWBcmgvUfGogzOsDFiYQtX46534608 = mPrXWBcmgvUfGogzOsDFiYQtX55465072;     mPrXWBcmgvUfGogzOsDFiYQtX55465072 = mPrXWBcmgvUfGogzOsDFiYQtX60282533;     mPrXWBcmgvUfGogzOsDFiYQtX60282533 = mPrXWBcmgvUfGogzOsDFiYQtX35347470;     mPrXWBcmgvUfGogzOsDFiYQtX35347470 = mPrXWBcmgvUfGogzOsDFiYQtX34961450;     mPrXWBcmgvUfGogzOsDFiYQtX34961450 = mPrXWBcmgvUfGogzOsDFiYQtX69449300;     mPrXWBcmgvUfGogzOsDFiYQtX69449300 = mPrXWBcmgvUfGogzOsDFiYQtX56314762;     mPrXWBcmgvUfGogzOsDFiYQtX56314762 = mPrXWBcmgvUfGogzOsDFiYQtX32936901;     mPrXWBcmgvUfGogzOsDFiYQtX32936901 = mPrXWBcmgvUfGogzOsDFiYQtX37763863;     mPrXWBcmgvUfGogzOsDFiYQtX37763863 = mPrXWBcmgvUfGogzOsDFiYQtX29521990;     mPrXWBcmgvUfGogzOsDFiYQtX29521990 = mPrXWBcmgvUfGogzOsDFiYQtX11095083;     mPrXWBcmgvUfGogzOsDFiYQtX11095083 = mPrXWBcmgvUfGogzOsDFiYQtX56583792;     mPrXWBcmgvUfGogzOsDFiYQtX56583792 = mPrXWBcmgvUfGogzOsDFiYQtX72886074;     mPrXWBcmgvUfGogzOsDFiYQtX72886074 = mPrXWBcmgvUfGogzOsDFiYQtX66982060;     mPrXWBcmgvUfGogzOsDFiYQtX66982060 = mPrXWBcmgvUfGogzOsDFiYQtX92850043;     mPrXWBcmgvUfGogzOsDFiYQtX92850043 = mPrXWBcmgvUfGogzOsDFiYQtX44659357;     mPrXWBcmgvUfGogzOsDFiYQtX44659357 = mPrXWBcmgvUfGogzOsDFiYQtX31742189;     mPrXWBcmgvUfGogzOsDFiYQtX31742189 = mPrXWBcmgvUfGogzOsDFiYQtX17278400;     mPrXWBcmgvUfGogzOsDFiYQtX17278400 = mPrXWBcmgvUfGogzOsDFiYQtX8945073;     mPrXWBcmgvUfGogzOsDFiYQtX8945073 = mPrXWBcmgvUfGogzOsDFiYQtX54368224;     mPrXWBcmgvUfGogzOsDFiYQtX54368224 = mPrXWBcmgvUfGogzOsDFiYQtX68045169;     mPrXWBcmgvUfGogzOsDFiYQtX68045169 = mPrXWBcmgvUfGogzOsDFiYQtX4032007;     mPrXWBcmgvUfGogzOsDFiYQtX4032007 = mPrXWBcmgvUfGogzOsDFiYQtX73459689;     mPrXWBcmgvUfGogzOsDFiYQtX73459689 = mPrXWBcmgvUfGogzOsDFiYQtX17413867;     mPrXWBcmgvUfGogzOsDFiYQtX17413867 = mPrXWBcmgvUfGogzOsDFiYQtX24368421;     mPrXWBcmgvUfGogzOsDFiYQtX24368421 = mPrXWBcmgvUfGogzOsDFiYQtX34704813;     mPrXWBcmgvUfGogzOsDFiYQtX34704813 = mPrXWBcmgvUfGogzOsDFiYQtX62004055;     mPrXWBcmgvUfGogzOsDFiYQtX62004055 = mPrXWBcmgvUfGogzOsDFiYQtX69383922;     mPrXWBcmgvUfGogzOsDFiYQtX69383922 = mPrXWBcmgvUfGogzOsDFiYQtX83373717;     mPrXWBcmgvUfGogzOsDFiYQtX83373717 = mPrXWBcmgvUfGogzOsDFiYQtX38317423;     mPrXWBcmgvUfGogzOsDFiYQtX38317423 = mPrXWBcmgvUfGogzOsDFiYQtX78292736;     mPrXWBcmgvUfGogzOsDFiYQtX78292736 = mPrXWBcmgvUfGogzOsDFiYQtX13351345;     mPrXWBcmgvUfGogzOsDFiYQtX13351345 = mPrXWBcmgvUfGogzOsDFiYQtX1806656;     mPrXWBcmgvUfGogzOsDFiYQtX1806656 = mPrXWBcmgvUfGogzOsDFiYQtX76605830;     mPrXWBcmgvUfGogzOsDFiYQtX76605830 = mPrXWBcmgvUfGogzOsDFiYQtX35937727;     mPrXWBcmgvUfGogzOsDFiYQtX35937727 = mPrXWBcmgvUfGogzOsDFiYQtX97628183;     mPrXWBcmgvUfGogzOsDFiYQtX97628183 = mPrXWBcmgvUfGogzOsDFiYQtX84735265;     mPrXWBcmgvUfGogzOsDFiYQtX84735265 = mPrXWBcmgvUfGogzOsDFiYQtX59567787;     mPrXWBcmgvUfGogzOsDFiYQtX59567787 = mPrXWBcmgvUfGogzOsDFiYQtX14273510;     mPrXWBcmgvUfGogzOsDFiYQtX14273510 = mPrXWBcmgvUfGogzOsDFiYQtX64175967;     mPrXWBcmgvUfGogzOsDFiYQtX64175967 = mPrXWBcmgvUfGogzOsDFiYQtX75451363;     mPrXWBcmgvUfGogzOsDFiYQtX75451363 = mPrXWBcmgvUfGogzOsDFiYQtX14356961;     mPrXWBcmgvUfGogzOsDFiYQtX14356961 = mPrXWBcmgvUfGogzOsDFiYQtX33278075;     mPrXWBcmgvUfGogzOsDFiYQtX33278075 = mPrXWBcmgvUfGogzOsDFiYQtX467667;     mPrXWBcmgvUfGogzOsDFiYQtX467667 = mPrXWBcmgvUfGogzOsDFiYQtX18896393;     mPrXWBcmgvUfGogzOsDFiYQtX18896393 = mPrXWBcmgvUfGogzOsDFiYQtX92745840;     mPrXWBcmgvUfGogzOsDFiYQtX92745840 = mPrXWBcmgvUfGogzOsDFiYQtX55696911;     mPrXWBcmgvUfGogzOsDFiYQtX55696911 = mPrXWBcmgvUfGogzOsDFiYQtX47148881;     mPrXWBcmgvUfGogzOsDFiYQtX47148881 = mPrXWBcmgvUfGogzOsDFiYQtX99432469;     mPrXWBcmgvUfGogzOsDFiYQtX99432469 = mPrXWBcmgvUfGogzOsDFiYQtX7943605;     mPrXWBcmgvUfGogzOsDFiYQtX7943605 = mPrXWBcmgvUfGogzOsDFiYQtX94322907;     mPrXWBcmgvUfGogzOsDFiYQtX94322907 = mPrXWBcmgvUfGogzOsDFiYQtX37503558;     mPrXWBcmgvUfGogzOsDFiYQtX37503558 = mPrXWBcmgvUfGogzOsDFiYQtX96206057;     mPrXWBcmgvUfGogzOsDFiYQtX96206057 = mPrXWBcmgvUfGogzOsDFiYQtX53259266;     mPrXWBcmgvUfGogzOsDFiYQtX53259266 = mPrXWBcmgvUfGogzOsDFiYQtX69129306;     mPrXWBcmgvUfGogzOsDFiYQtX69129306 = mPrXWBcmgvUfGogzOsDFiYQtX42502602;     mPrXWBcmgvUfGogzOsDFiYQtX42502602 = mPrXWBcmgvUfGogzOsDFiYQtX82005383;     mPrXWBcmgvUfGogzOsDFiYQtX82005383 = mPrXWBcmgvUfGogzOsDFiYQtX42868666;     mPrXWBcmgvUfGogzOsDFiYQtX42868666 = mPrXWBcmgvUfGogzOsDFiYQtX10979049;     mPrXWBcmgvUfGogzOsDFiYQtX10979049 = mPrXWBcmgvUfGogzOsDFiYQtX256638;     mPrXWBcmgvUfGogzOsDFiYQtX256638 = mPrXWBcmgvUfGogzOsDFiYQtX7445246;     mPrXWBcmgvUfGogzOsDFiYQtX7445246 = mPrXWBcmgvUfGogzOsDFiYQtX86930840;     mPrXWBcmgvUfGogzOsDFiYQtX86930840 = mPrXWBcmgvUfGogzOsDFiYQtX49563184;     mPrXWBcmgvUfGogzOsDFiYQtX49563184 = mPrXWBcmgvUfGogzOsDFiYQtX99446440;     mPrXWBcmgvUfGogzOsDFiYQtX99446440 = mPrXWBcmgvUfGogzOsDFiYQtX51229254;     mPrXWBcmgvUfGogzOsDFiYQtX51229254 = mPrXWBcmgvUfGogzOsDFiYQtX97743737;     mPrXWBcmgvUfGogzOsDFiYQtX97743737 = mPrXWBcmgvUfGogzOsDFiYQtX54777136;     mPrXWBcmgvUfGogzOsDFiYQtX54777136 = mPrXWBcmgvUfGogzOsDFiYQtX96280243;     mPrXWBcmgvUfGogzOsDFiYQtX96280243 = mPrXWBcmgvUfGogzOsDFiYQtX31044333;     mPrXWBcmgvUfGogzOsDFiYQtX31044333 = mPrXWBcmgvUfGogzOsDFiYQtX95221860;     mPrXWBcmgvUfGogzOsDFiYQtX95221860 = mPrXWBcmgvUfGogzOsDFiYQtX59924091;     mPrXWBcmgvUfGogzOsDFiYQtX59924091 = mPrXWBcmgvUfGogzOsDFiYQtX72174402;     mPrXWBcmgvUfGogzOsDFiYQtX72174402 = mPrXWBcmgvUfGogzOsDFiYQtX3004890;     mPrXWBcmgvUfGogzOsDFiYQtX3004890 = mPrXWBcmgvUfGogzOsDFiYQtX44769106;     mPrXWBcmgvUfGogzOsDFiYQtX44769106 = mPrXWBcmgvUfGogzOsDFiYQtX78916861;     mPrXWBcmgvUfGogzOsDFiYQtX78916861 = mPrXWBcmgvUfGogzOsDFiYQtX53688209;     mPrXWBcmgvUfGogzOsDFiYQtX53688209 = mPrXWBcmgvUfGogzOsDFiYQtX70753931;     mPrXWBcmgvUfGogzOsDFiYQtX70753931 = mPrXWBcmgvUfGogzOsDFiYQtX72992023;     mPrXWBcmgvUfGogzOsDFiYQtX72992023 = mPrXWBcmgvUfGogzOsDFiYQtX98517473;     mPrXWBcmgvUfGogzOsDFiYQtX98517473 = mPrXWBcmgvUfGogzOsDFiYQtX31622580;     mPrXWBcmgvUfGogzOsDFiYQtX31622580 = mPrXWBcmgvUfGogzOsDFiYQtX79007902;     mPrXWBcmgvUfGogzOsDFiYQtX79007902 = mPrXWBcmgvUfGogzOsDFiYQtX14855175;     mPrXWBcmgvUfGogzOsDFiYQtX14855175 = mPrXWBcmgvUfGogzOsDFiYQtX69951452;     mPrXWBcmgvUfGogzOsDFiYQtX69951452 = mPrXWBcmgvUfGogzOsDFiYQtX75430112;     mPrXWBcmgvUfGogzOsDFiYQtX75430112 = mPrXWBcmgvUfGogzOsDFiYQtX43994515;     mPrXWBcmgvUfGogzOsDFiYQtX43994515 = mPrXWBcmgvUfGogzOsDFiYQtX40789178;     mPrXWBcmgvUfGogzOsDFiYQtX40789178 = mPrXWBcmgvUfGogzOsDFiYQtX17145288;     mPrXWBcmgvUfGogzOsDFiYQtX17145288 = mPrXWBcmgvUfGogzOsDFiYQtX48547389;     mPrXWBcmgvUfGogzOsDFiYQtX48547389 = mPrXWBcmgvUfGogzOsDFiYQtX7476524;     mPrXWBcmgvUfGogzOsDFiYQtX7476524 = mPrXWBcmgvUfGogzOsDFiYQtX93435124;     mPrXWBcmgvUfGogzOsDFiYQtX93435124 = mPrXWBcmgvUfGogzOsDFiYQtX15622800;     mPrXWBcmgvUfGogzOsDFiYQtX15622800 = mPrXWBcmgvUfGogzOsDFiYQtX41866599;     mPrXWBcmgvUfGogzOsDFiYQtX41866599 = mPrXWBcmgvUfGogzOsDFiYQtX48588738;     mPrXWBcmgvUfGogzOsDFiYQtX48588738 = mPrXWBcmgvUfGogzOsDFiYQtX14016873;     mPrXWBcmgvUfGogzOsDFiYQtX14016873 = mPrXWBcmgvUfGogzOsDFiYQtX56730722;     mPrXWBcmgvUfGogzOsDFiYQtX56730722 = mPrXWBcmgvUfGogzOsDFiYQtX88520522;     mPrXWBcmgvUfGogzOsDFiYQtX88520522 = mPrXWBcmgvUfGogzOsDFiYQtX64793776;     mPrXWBcmgvUfGogzOsDFiYQtX64793776 = mPrXWBcmgvUfGogzOsDFiYQtX5151131;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PrkbTRSVSfCJKDDlESWxWHiDqUtDMCOCeoLxJdwfgRxXsFGtEKAHbxmHJ22073557() {     long gkyXOIPRAfWrFbaWrQFKKLkOA40610099 = 5871080;    long gkyXOIPRAfWrFbaWrQFKKLkOA20899569 = -338929072;    long gkyXOIPRAfWrFbaWrQFKKLkOA74560952 = -432987871;    long gkyXOIPRAfWrFbaWrQFKKLkOA18757963 = -403495324;    long gkyXOIPRAfWrFbaWrQFKKLkOA11750342 = -452015512;    long gkyXOIPRAfWrFbaWrQFKKLkOA96505404 = 14802123;    long gkyXOIPRAfWrFbaWrQFKKLkOA46004876 = -798409039;    long gkyXOIPRAfWrFbaWrQFKKLkOA97093011 = -116019497;    long gkyXOIPRAfWrFbaWrQFKKLkOA70966905 = -144697847;    long gkyXOIPRAfWrFbaWrQFKKLkOA71217474 = -285201641;    long gkyXOIPRAfWrFbaWrQFKKLkOA71118636 = -236201262;    long gkyXOIPRAfWrFbaWrQFKKLkOA38332012 = -46354317;    long gkyXOIPRAfWrFbaWrQFKKLkOA67756636 = -282160429;    long gkyXOIPRAfWrFbaWrQFKKLkOA64235946 = -187128032;    long gkyXOIPRAfWrFbaWrQFKKLkOA14778309 = -304278052;    long gkyXOIPRAfWrFbaWrQFKKLkOA56427375 = -147948491;    long gkyXOIPRAfWrFbaWrQFKKLkOA22817996 = -654053395;    long gkyXOIPRAfWrFbaWrQFKKLkOA92610235 = -839691975;    long gkyXOIPRAfWrFbaWrQFKKLkOA45209687 = -298072642;    long gkyXOIPRAfWrFbaWrQFKKLkOA25579408 = -139787800;    long gkyXOIPRAfWrFbaWrQFKKLkOA30365263 = -941810898;    long gkyXOIPRAfWrFbaWrQFKKLkOA12366598 = -476665112;    long gkyXOIPRAfWrFbaWrQFKKLkOA24893604 = -522791346;    long gkyXOIPRAfWrFbaWrQFKKLkOA61838114 = -624241654;    long gkyXOIPRAfWrFbaWrQFKKLkOA12049958 = -955457980;    long gkyXOIPRAfWrFbaWrQFKKLkOA84157861 = -811735888;    long gkyXOIPRAfWrFbaWrQFKKLkOA77834440 = -392582847;    long gkyXOIPRAfWrFbaWrQFKKLkOA65096846 = -294182505;    long gkyXOIPRAfWrFbaWrQFKKLkOA81373027 = -275462390;    long gkyXOIPRAfWrFbaWrQFKKLkOA67537466 = -775064864;    long gkyXOIPRAfWrFbaWrQFKKLkOA87967153 = -573112297;    long gkyXOIPRAfWrFbaWrQFKKLkOA21196736 = -904549192;    long gkyXOIPRAfWrFbaWrQFKKLkOA50535433 = -153236250;    long gkyXOIPRAfWrFbaWrQFKKLkOA8041163 = -86855059;    long gkyXOIPRAfWrFbaWrQFKKLkOA79159798 = -544954991;    long gkyXOIPRAfWrFbaWrQFKKLkOA53367499 = -953275590;    long gkyXOIPRAfWrFbaWrQFKKLkOA26017647 = -13683032;    long gkyXOIPRAfWrFbaWrQFKKLkOA87153129 = 47537052;    long gkyXOIPRAfWrFbaWrQFKKLkOA28018745 = -435372690;    long gkyXOIPRAfWrFbaWrQFKKLkOA49006798 = -479005647;    long gkyXOIPRAfWrFbaWrQFKKLkOA93019394 = -46049633;    long gkyXOIPRAfWrFbaWrQFKKLkOA3638637 = -293028698;    long gkyXOIPRAfWrFbaWrQFKKLkOA53559345 = -312874682;    long gkyXOIPRAfWrFbaWrQFKKLkOA15582701 = -435136812;    long gkyXOIPRAfWrFbaWrQFKKLkOA14373420 = -103719466;    long gkyXOIPRAfWrFbaWrQFKKLkOA79239403 = -222668805;    long gkyXOIPRAfWrFbaWrQFKKLkOA19812830 = -471596674;    long gkyXOIPRAfWrFbaWrQFKKLkOA36622705 = -927975600;    long gkyXOIPRAfWrFbaWrQFKKLkOA15638507 = -591033046;    long gkyXOIPRAfWrFbaWrQFKKLkOA80226500 = -418357341;    long gkyXOIPRAfWrFbaWrQFKKLkOA27919604 = -112721600;    long gkyXOIPRAfWrFbaWrQFKKLkOA82917942 = -193202847;    long gkyXOIPRAfWrFbaWrQFKKLkOA76564753 = -50498394;    long gkyXOIPRAfWrFbaWrQFKKLkOA10314755 = -404556019;    long gkyXOIPRAfWrFbaWrQFKKLkOA91708294 = -349222399;    long gkyXOIPRAfWrFbaWrQFKKLkOA28243501 = -517463808;    long gkyXOIPRAfWrFbaWrQFKKLkOA96005965 = -816137727;    long gkyXOIPRAfWrFbaWrQFKKLkOA12722838 = -808746218;    long gkyXOIPRAfWrFbaWrQFKKLkOA6708006 = -448037345;    long gkyXOIPRAfWrFbaWrQFKKLkOA27592481 = -640279625;    long gkyXOIPRAfWrFbaWrQFKKLkOA18670965 = -592615031;    long gkyXOIPRAfWrFbaWrQFKKLkOA80908030 = -404226534;    long gkyXOIPRAfWrFbaWrQFKKLkOA15719984 = -840557107;    long gkyXOIPRAfWrFbaWrQFKKLkOA3429440 = -369632984;    long gkyXOIPRAfWrFbaWrQFKKLkOA83250321 = -712089344;    long gkyXOIPRAfWrFbaWrQFKKLkOA49921901 = -331652071;    long gkyXOIPRAfWrFbaWrQFKKLkOA87796578 = -893118068;    long gkyXOIPRAfWrFbaWrQFKKLkOA59715473 = -95305371;    long gkyXOIPRAfWrFbaWrQFKKLkOA85076147 = -642173041;    long gkyXOIPRAfWrFbaWrQFKKLkOA61410809 = -351002463;    long gkyXOIPRAfWrFbaWrQFKKLkOA30409728 = -34265460;    long gkyXOIPRAfWrFbaWrQFKKLkOA35664866 = -601590447;    long gkyXOIPRAfWrFbaWrQFKKLkOA64591491 = -304319285;    long gkyXOIPRAfWrFbaWrQFKKLkOA96202889 = -819066996;    long gkyXOIPRAfWrFbaWrQFKKLkOA32560013 = 6261832;    long gkyXOIPRAfWrFbaWrQFKKLkOA26726626 = -548782200;    long gkyXOIPRAfWrFbaWrQFKKLkOA58807252 = -63790431;    long gkyXOIPRAfWrFbaWrQFKKLkOA9310903 = 12345466;    long gkyXOIPRAfWrFbaWrQFKKLkOA47464695 = -420522189;    long gkyXOIPRAfWrFbaWrQFKKLkOA32810554 = -632789176;    long gkyXOIPRAfWrFbaWrQFKKLkOA64345031 = -240139214;    long gkyXOIPRAfWrFbaWrQFKKLkOA41211736 = -464607247;    long gkyXOIPRAfWrFbaWrQFKKLkOA49458339 = -703149460;    long gkyXOIPRAfWrFbaWrQFKKLkOA1146528 = -857105050;    long gkyXOIPRAfWrFbaWrQFKKLkOA39617862 = -562343265;    long gkyXOIPRAfWrFbaWrQFKKLkOA5049212 = -279909451;    long gkyXOIPRAfWrFbaWrQFKKLkOA44631982 = -754050799;    long gkyXOIPRAfWrFbaWrQFKKLkOA40220679 = -748680231;    long gkyXOIPRAfWrFbaWrQFKKLkOA16332868 = -737632661;    long gkyXOIPRAfWrFbaWrQFKKLkOA50916298 = 72508816;    long gkyXOIPRAfWrFbaWrQFKKLkOA57361534 = -37137863;    long gkyXOIPRAfWrFbaWrQFKKLkOA13294809 = -204936815;    long gkyXOIPRAfWrFbaWrQFKKLkOA80445124 = -504425604;    long gkyXOIPRAfWrFbaWrQFKKLkOA426264 = -795093066;    long gkyXOIPRAfWrFbaWrQFKKLkOA30335834 = -886390617;    long gkyXOIPRAfWrFbaWrQFKKLkOA12111365 = -641823099;    long gkyXOIPRAfWrFbaWrQFKKLkOA87918652 = -452471592;    long gkyXOIPRAfWrFbaWrQFKKLkOA50129906 = -943241699;    long gkyXOIPRAfWrFbaWrQFKKLkOA32332380 = -723047468;    long gkyXOIPRAfWrFbaWrQFKKLkOA64451518 = 5871080;     gkyXOIPRAfWrFbaWrQFKKLkOA40610099 = gkyXOIPRAfWrFbaWrQFKKLkOA20899569;     gkyXOIPRAfWrFbaWrQFKKLkOA20899569 = gkyXOIPRAfWrFbaWrQFKKLkOA74560952;     gkyXOIPRAfWrFbaWrQFKKLkOA74560952 = gkyXOIPRAfWrFbaWrQFKKLkOA18757963;     gkyXOIPRAfWrFbaWrQFKKLkOA18757963 = gkyXOIPRAfWrFbaWrQFKKLkOA11750342;     gkyXOIPRAfWrFbaWrQFKKLkOA11750342 = gkyXOIPRAfWrFbaWrQFKKLkOA96505404;     gkyXOIPRAfWrFbaWrQFKKLkOA96505404 = gkyXOIPRAfWrFbaWrQFKKLkOA46004876;     gkyXOIPRAfWrFbaWrQFKKLkOA46004876 = gkyXOIPRAfWrFbaWrQFKKLkOA97093011;     gkyXOIPRAfWrFbaWrQFKKLkOA97093011 = gkyXOIPRAfWrFbaWrQFKKLkOA70966905;     gkyXOIPRAfWrFbaWrQFKKLkOA70966905 = gkyXOIPRAfWrFbaWrQFKKLkOA71217474;     gkyXOIPRAfWrFbaWrQFKKLkOA71217474 = gkyXOIPRAfWrFbaWrQFKKLkOA71118636;     gkyXOIPRAfWrFbaWrQFKKLkOA71118636 = gkyXOIPRAfWrFbaWrQFKKLkOA38332012;     gkyXOIPRAfWrFbaWrQFKKLkOA38332012 = gkyXOIPRAfWrFbaWrQFKKLkOA67756636;     gkyXOIPRAfWrFbaWrQFKKLkOA67756636 = gkyXOIPRAfWrFbaWrQFKKLkOA64235946;     gkyXOIPRAfWrFbaWrQFKKLkOA64235946 = gkyXOIPRAfWrFbaWrQFKKLkOA14778309;     gkyXOIPRAfWrFbaWrQFKKLkOA14778309 = gkyXOIPRAfWrFbaWrQFKKLkOA56427375;     gkyXOIPRAfWrFbaWrQFKKLkOA56427375 = gkyXOIPRAfWrFbaWrQFKKLkOA22817996;     gkyXOIPRAfWrFbaWrQFKKLkOA22817996 = gkyXOIPRAfWrFbaWrQFKKLkOA92610235;     gkyXOIPRAfWrFbaWrQFKKLkOA92610235 = gkyXOIPRAfWrFbaWrQFKKLkOA45209687;     gkyXOIPRAfWrFbaWrQFKKLkOA45209687 = gkyXOIPRAfWrFbaWrQFKKLkOA25579408;     gkyXOIPRAfWrFbaWrQFKKLkOA25579408 = gkyXOIPRAfWrFbaWrQFKKLkOA30365263;     gkyXOIPRAfWrFbaWrQFKKLkOA30365263 = gkyXOIPRAfWrFbaWrQFKKLkOA12366598;     gkyXOIPRAfWrFbaWrQFKKLkOA12366598 = gkyXOIPRAfWrFbaWrQFKKLkOA24893604;     gkyXOIPRAfWrFbaWrQFKKLkOA24893604 = gkyXOIPRAfWrFbaWrQFKKLkOA61838114;     gkyXOIPRAfWrFbaWrQFKKLkOA61838114 = gkyXOIPRAfWrFbaWrQFKKLkOA12049958;     gkyXOIPRAfWrFbaWrQFKKLkOA12049958 = gkyXOIPRAfWrFbaWrQFKKLkOA84157861;     gkyXOIPRAfWrFbaWrQFKKLkOA84157861 = gkyXOIPRAfWrFbaWrQFKKLkOA77834440;     gkyXOIPRAfWrFbaWrQFKKLkOA77834440 = gkyXOIPRAfWrFbaWrQFKKLkOA65096846;     gkyXOIPRAfWrFbaWrQFKKLkOA65096846 = gkyXOIPRAfWrFbaWrQFKKLkOA81373027;     gkyXOIPRAfWrFbaWrQFKKLkOA81373027 = gkyXOIPRAfWrFbaWrQFKKLkOA67537466;     gkyXOIPRAfWrFbaWrQFKKLkOA67537466 = gkyXOIPRAfWrFbaWrQFKKLkOA87967153;     gkyXOIPRAfWrFbaWrQFKKLkOA87967153 = gkyXOIPRAfWrFbaWrQFKKLkOA21196736;     gkyXOIPRAfWrFbaWrQFKKLkOA21196736 = gkyXOIPRAfWrFbaWrQFKKLkOA50535433;     gkyXOIPRAfWrFbaWrQFKKLkOA50535433 = gkyXOIPRAfWrFbaWrQFKKLkOA8041163;     gkyXOIPRAfWrFbaWrQFKKLkOA8041163 = gkyXOIPRAfWrFbaWrQFKKLkOA79159798;     gkyXOIPRAfWrFbaWrQFKKLkOA79159798 = gkyXOIPRAfWrFbaWrQFKKLkOA53367499;     gkyXOIPRAfWrFbaWrQFKKLkOA53367499 = gkyXOIPRAfWrFbaWrQFKKLkOA26017647;     gkyXOIPRAfWrFbaWrQFKKLkOA26017647 = gkyXOIPRAfWrFbaWrQFKKLkOA87153129;     gkyXOIPRAfWrFbaWrQFKKLkOA87153129 = gkyXOIPRAfWrFbaWrQFKKLkOA28018745;     gkyXOIPRAfWrFbaWrQFKKLkOA28018745 = gkyXOIPRAfWrFbaWrQFKKLkOA49006798;     gkyXOIPRAfWrFbaWrQFKKLkOA49006798 = gkyXOIPRAfWrFbaWrQFKKLkOA93019394;     gkyXOIPRAfWrFbaWrQFKKLkOA93019394 = gkyXOIPRAfWrFbaWrQFKKLkOA3638637;     gkyXOIPRAfWrFbaWrQFKKLkOA3638637 = gkyXOIPRAfWrFbaWrQFKKLkOA53559345;     gkyXOIPRAfWrFbaWrQFKKLkOA53559345 = gkyXOIPRAfWrFbaWrQFKKLkOA15582701;     gkyXOIPRAfWrFbaWrQFKKLkOA15582701 = gkyXOIPRAfWrFbaWrQFKKLkOA14373420;     gkyXOIPRAfWrFbaWrQFKKLkOA14373420 = gkyXOIPRAfWrFbaWrQFKKLkOA79239403;     gkyXOIPRAfWrFbaWrQFKKLkOA79239403 = gkyXOIPRAfWrFbaWrQFKKLkOA19812830;     gkyXOIPRAfWrFbaWrQFKKLkOA19812830 = gkyXOIPRAfWrFbaWrQFKKLkOA36622705;     gkyXOIPRAfWrFbaWrQFKKLkOA36622705 = gkyXOIPRAfWrFbaWrQFKKLkOA15638507;     gkyXOIPRAfWrFbaWrQFKKLkOA15638507 = gkyXOIPRAfWrFbaWrQFKKLkOA80226500;     gkyXOIPRAfWrFbaWrQFKKLkOA80226500 = gkyXOIPRAfWrFbaWrQFKKLkOA27919604;     gkyXOIPRAfWrFbaWrQFKKLkOA27919604 = gkyXOIPRAfWrFbaWrQFKKLkOA82917942;     gkyXOIPRAfWrFbaWrQFKKLkOA82917942 = gkyXOIPRAfWrFbaWrQFKKLkOA76564753;     gkyXOIPRAfWrFbaWrQFKKLkOA76564753 = gkyXOIPRAfWrFbaWrQFKKLkOA10314755;     gkyXOIPRAfWrFbaWrQFKKLkOA10314755 = gkyXOIPRAfWrFbaWrQFKKLkOA91708294;     gkyXOIPRAfWrFbaWrQFKKLkOA91708294 = gkyXOIPRAfWrFbaWrQFKKLkOA28243501;     gkyXOIPRAfWrFbaWrQFKKLkOA28243501 = gkyXOIPRAfWrFbaWrQFKKLkOA96005965;     gkyXOIPRAfWrFbaWrQFKKLkOA96005965 = gkyXOIPRAfWrFbaWrQFKKLkOA12722838;     gkyXOIPRAfWrFbaWrQFKKLkOA12722838 = gkyXOIPRAfWrFbaWrQFKKLkOA6708006;     gkyXOIPRAfWrFbaWrQFKKLkOA6708006 = gkyXOIPRAfWrFbaWrQFKKLkOA27592481;     gkyXOIPRAfWrFbaWrQFKKLkOA27592481 = gkyXOIPRAfWrFbaWrQFKKLkOA18670965;     gkyXOIPRAfWrFbaWrQFKKLkOA18670965 = gkyXOIPRAfWrFbaWrQFKKLkOA80908030;     gkyXOIPRAfWrFbaWrQFKKLkOA80908030 = gkyXOIPRAfWrFbaWrQFKKLkOA15719984;     gkyXOIPRAfWrFbaWrQFKKLkOA15719984 = gkyXOIPRAfWrFbaWrQFKKLkOA3429440;     gkyXOIPRAfWrFbaWrQFKKLkOA3429440 = gkyXOIPRAfWrFbaWrQFKKLkOA83250321;     gkyXOIPRAfWrFbaWrQFKKLkOA83250321 = gkyXOIPRAfWrFbaWrQFKKLkOA49921901;     gkyXOIPRAfWrFbaWrQFKKLkOA49921901 = gkyXOIPRAfWrFbaWrQFKKLkOA87796578;     gkyXOIPRAfWrFbaWrQFKKLkOA87796578 = gkyXOIPRAfWrFbaWrQFKKLkOA59715473;     gkyXOIPRAfWrFbaWrQFKKLkOA59715473 = gkyXOIPRAfWrFbaWrQFKKLkOA85076147;     gkyXOIPRAfWrFbaWrQFKKLkOA85076147 = gkyXOIPRAfWrFbaWrQFKKLkOA61410809;     gkyXOIPRAfWrFbaWrQFKKLkOA61410809 = gkyXOIPRAfWrFbaWrQFKKLkOA30409728;     gkyXOIPRAfWrFbaWrQFKKLkOA30409728 = gkyXOIPRAfWrFbaWrQFKKLkOA35664866;     gkyXOIPRAfWrFbaWrQFKKLkOA35664866 = gkyXOIPRAfWrFbaWrQFKKLkOA64591491;     gkyXOIPRAfWrFbaWrQFKKLkOA64591491 = gkyXOIPRAfWrFbaWrQFKKLkOA96202889;     gkyXOIPRAfWrFbaWrQFKKLkOA96202889 = gkyXOIPRAfWrFbaWrQFKKLkOA32560013;     gkyXOIPRAfWrFbaWrQFKKLkOA32560013 = gkyXOIPRAfWrFbaWrQFKKLkOA26726626;     gkyXOIPRAfWrFbaWrQFKKLkOA26726626 = gkyXOIPRAfWrFbaWrQFKKLkOA58807252;     gkyXOIPRAfWrFbaWrQFKKLkOA58807252 = gkyXOIPRAfWrFbaWrQFKKLkOA9310903;     gkyXOIPRAfWrFbaWrQFKKLkOA9310903 = gkyXOIPRAfWrFbaWrQFKKLkOA47464695;     gkyXOIPRAfWrFbaWrQFKKLkOA47464695 = gkyXOIPRAfWrFbaWrQFKKLkOA32810554;     gkyXOIPRAfWrFbaWrQFKKLkOA32810554 = gkyXOIPRAfWrFbaWrQFKKLkOA64345031;     gkyXOIPRAfWrFbaWrQFKKLkOA64345031 = gkyXOIPRAfWrFbaWrQFKKLkOA41211736;     gkyXOIPRAfWrFbaWrQFKKLkOA41211736 = gkyXOIPRAfWrFbaWrQFKKLkOA49458339;     gkyXOIPRAfWrFbaWrQFKKLkOA49458339 = gkyXOIPRAfWrFbaWrQFKKLkOA1146528;     gkyXOIPRAfWrFbaWrQFKKLkOA1146528 = gkyXOIPRAfWrFbaWrQFKKLkOA39617862;     gkyXOIPRAfWrFbaWrQFKKLkOA39617862 = gkyXOIPRAfWrFbaWrQFKKLkOA5049212;     gkyXOIPRAfWrFbaWrQFKKLkOA5049212 = gkyXOIPRAfWrFbaWrQFKKLkOA44631982;     gkyXOIPRAfWrFbaWrQFKKLkOA44631982 = gkyXOIPRAfWrFbaWrQFKKLkOA40220679;     gkyXOIPRAfWrFbaWrQFKKLkOA40220679 = gkyXOIPRAfWrFbaWrQFKKLkOA16332868;     gkyXOIPRAfWrFbaWrQFKKLkOA16332868 = gkyXOIPRAfWrFbaWrQFKKLkOA50916298;     gkyXOIPRAfWrFbaWrQFKKLkOA50916298 = gkyXOIPRAfWrFbaWrQFKKLkOA57361534;     gkyXOIPRAfWrFbaWrQFKKLkOA57361534 = gkyXOIPRAfWrFbaWrQFKKLkOA13294809;     gkyXOIPRAfWrFbaWrQFKKLkOA13294809 = gkyXOIPRAfWrFbaWrQFKKLkOA80445124;     gkyXOIPRAfWrFbaWrQFKKLkOA80445124 = gkyXOIPRAfWrFbaWrQFKKLkOA426264;     gkyXOIPRAfWrFbaWrQFKKLkOA426264 = gkyXOIPRAfWrFbaWrQFKKLkOA30335834;     gkyXOIPRAfWrFbaWrQFKKLkOA30335834 = gkyXOIPRAfWrFbaWrQFKKLkOA12111365;     gkyXOIPRAfWrFbaWrQFKKLkOA12111365 = gkyXOIPRAfWrFbaWrQFKKLkOA87918652;     gkyXOIPRAfWrFbaWrQFKKLkOA87918652 = gkyXOIPRAfWrFbaWrQFKKLkOA50129906;     gkyXOIPRAfWrFbaWrQFKKLkOA50129906 = gkyXOIPRAfWrFbaWrQFKKLkOA32332380;     gkyXOIPRAfWrFbaWrQFKKLkOA32332380 = gkyXOIPRAfWrFbaWrQFKKLkOA64451518;     gkyXOIPRAfWrFbaWrQFKKLkOA64451518 = gkyXOIPRAfWrFbaWrQFKKLkOA40610099;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void nLEpvClhkvZDqBTYhhXiixtwTOCwotuoDvvEoxUREUYoYkjhBOUBbmBqR73003127() {     long HWgzotqBkAvFPkkMFdOZEYjfV16196994 = -276030985;    long HWgzotqBkAvFPkkMFdOZEYjfV82653633 = -583758067;    long HWgzotqBkAvFPkkMFdOZEYjfV32111825 = -521167254;    long HWgzotqBkAvFPkkMFdOZEYjfV68209927 = -180683010;    long HWgzotqBkAvFPkkMFdOZEYjfV78882321 = -931848969;    long HWgzotqBkAvFPkkMFdOZEYjfV4813324 = -215320677;    long HWgzotqBkAvFPkkMFdOZEYjfV9188887 = -629546129;    long HWgzotqBkAvFPkkMFdOZEYjfV44799623 = -20657047;    long HWgzotqBkAvFPkkMFdOZEYjfV25611157 = -437510375;    long HWgzotqBkAvFPkkMFdOZEYjfV91215978 = -985561447;    long HWgzotqBkAvFPkkMFdOZEYjfV80372038 = -6761131;    long HWgzotqBkAvFPkkMFdOZEYjfV70076748 = -6193633;    long HWgzotqBkAvFPkkMFdOZEYjfV86374185 = -315994176;    long HWgzotqBkAvFPkkMFdOZEYjfV67334608 = -625364062;    long HWgzotqBkAvFPkkMFdOZEYjfV9754170 = -202145797;    long HWgzotqBkAvFPkkMFdOZEYjfV70507281 = -225941056;    long HWgzotqBkAvFPkkMFdOZEYjfV8652922 = -937469547;    long HWgzotqBkAvFPkkMFdOZEYjfV32976007 = -431701430;    long HWgzotqBkAvFPkkMFdOZEYjfV26567341 = -376550933;    long HWgzotqBkAvFPkkMFdOZEYjfV18722434 = -511221063;    long HWgzotqBkAvFPkkMFdOZEYjfV11457172 = -925894086;    long HWgzotqBkAvFPkkMFdOZEYjfV69295638 = 56099929;    long HWgzotqBkAvFPkkMFdOZEYjfV19437803 = -727143990;    long HWgzotqBkAvFPkkMFdOZEYjfV2639630 = 37139497;    long HWgzotqBkAvFPkkMFdOZEYjfV84842424 = -141280659;    long HWgzotqBkAvFPkkMFdOZEYjfV84503478 = -949134947;    long HWgzotqBkAvFPkkMFdOZEYjfV67666954 = -983196053;    long HWgzotqBkAvFPkkMFdOZEYjfV20144765 = -921602991;    long HWgzotqBkAvFPkkMFdOZEYjfV36080628 = -625238662;    long HWgzotqBkAvFPkkMFdOZEYjfV26837489 = -765116583;    long HWgzotqBkAvFPkkMFdOZEYjfV1660619 = -804986020;    long HWgzotqBkAvFPkkMFdOZEYjfV62205703 = -530389586;    long HWgzotqBkAvFPkkMFdOZEYjfV359380 = -825571333;    long HWgzotqBkAvFPkkMFdOZEYjfV61557524 = -448829597;    long HWgzotqBkAvFPkkMFdOZEYjfV9975278 = -81562422;    long HWgzotqBkAvFPkkMFdOZEYjfV47452303 = -75928869;    long HWgzotqBkAvFPkkMFdOZEYjfV97677690 = -744281632;    long HWgzotqBkAvFPkkMFdOZEYjfV95246396 = -902362103;    long HWgzotqBkAvFPkkMFdOZEYjfV10113924 = -440540658;    long HWgzotqBkAvFPkkMFdOZEYjfV64822248 = -221618045;    long HWgzotqBkAvFPkkMFdOZEYjfV43206759 = -874123848;    long HWgzotqBkAvFPkkMFdOZEYjfV51223811 = -753619182;    long HWgzotqBkAvFPkkMFdOZEYjfV12688725 = -751698500;    long HWgzotqBkAvFPkkMFdOZEYjfV46568006 = 85688700;    long HWgzotqBkAvFPkkMFdOZEYjfV35349783 = -199425732;    long HWgzotqBkAvFPkkMFdOZEYjfV35532734 = 32794825;    long HWgzotqBkAvFPkkMFdOZEYjfV62656836 = -933745379;    long HWgzotqBkAvFPkkMFdOZEYjfV889581 = -143968108;    long HWgzotqBkAvFPkkMFdOZEYjfV36785230 = -524768307;    long HWgzotqBkAvFPkkMFdOZEYjfV79025139 = -369624272;    long HWgzotqBkAvFPkkMFdOZEYjfV84741009 = -466741451;    long HWgzotqBkAvFPkkMFdOZEYjfV56539707 = -745589;    long HWgzotqBkAvFPkkMFdOZEYjfV50776270 = -370383440;    long HWgzotqBkAvFPkkMFdOZEYjfV26651095 = -861639838;    long HWgzotqBkAvFPkkMFdOZEYjfV61545956 = -885087997;    long HWgzotqBkAvFPkkMFdOZEYjfV46901356 = -232130915;    long HWgzotqBkAvFPkkMFdOZEYjfV63215830 = -856614078;    long HWgzotqBkAvFPkkMFdOZEYjfV29472195 = -458306751;    long HWgzotqBkAvFPkkMFdOZEYjfV83367503 = 60597649;    long HWgzotqBkAvFPkkMFdOZEYjfV94378842 = -982714022;    long HWgzotqBkAvFPkkMFdOZEYjfV37146369 = -232124624;    long HWgzotqBkAvFPkkMFdOZEYjfV89044122 = -707943139;    long HWgzotqBkAvFPkkMFdOZEYjfV8718995 = -395418385;    long HWgzotqBkAvFPkkMFdOZEYjfV98773667 = -672393792;    long HWgzotqBkAvFPkkMFdOZEYjfV89555360 = -80575428;    long HWgzotqBkAvFPkkMFdOZEYjfV18166336 = -476371546;    long HWgzotqBkAvFPkkMFdOZEYjfV69717369 = -180622301;    long HWgzotqBkAvFPkkMFdOZEYjfV24816661 = -867164579;    long HWgzotqBkAvFPkkMFdOZEYjfV57359330 = -443801641;    long HWgzotqBkAvFPkkMFdOZEYjfV62301867 = -26216928;    long HWgzotqBkAvFPkkMFdOZEYjfV72829591 = -481659424;    long HWgzotqBkAvFPkkMFdOZEYjfV13406526 = 64892556;    long HWgzotqBkAvFPkkMFdOZEYjfV22862083 = -991160773;    long HWgzotqBkAvFPkkMFdOZEYjfV61745092 = -54932889;    long HWgzotqBkAvFPkkMFdOZEYjfV75515674 = -637097215;    long HWgzotqBkAvFPkkMFdOZEYjfV60233360 = -72274904;    long HWgzotqBkAvFPkkMFdOZEYjfV56606913 = -192201572;    long HWgzotqBkAvFPkkMFdOZEYjfV72869797 = -712832691;    long HWgzotqBkAvFPkkMFdOZEYjfV67289847 = -763434771;    long HWgzotqBkAvFPkkMFdOZEYjfV49309690 = -74075485;    long HWgzotqBkAvFPkkMFdOZEYjfV21846642 = 84610431;    long HWgzotqBkAvFPkkMFdOZEYjfV66777374 = -739227946;    long HWgzotqBkAvFPkkMFdOZEYjfV83359535 = -296834684;    long HWgzotqBkAvFPkkMFdOZEYjfV57055488 = -155614390;    long HWgzotqBkAvFPkkMFdOZEYjfV42096480 = -198375133;    long HWgzotqBkAvFPkkMFdOZEYjfV45120911 = -704240431;    long HWgzotqBkAvFPkkMFdOZEYjfV11429434 = -60006146;    long HWgzotqBkAvFPkkMFdOZEYjfV73708284 = -963931495;    long HWgzotqBkAvFPkkMFdOZEYjfV11569 = -563741601;    long HWgzotqBkAvFPkkMFdOZEYjfV63073921 = -849431508;    long HWgzotqBkAvFPkkMFdOZEYjfV84236472 = -219314792;    long HWgzotqBkAvFPkkMFdOZEYjfV68205495 = -185974881;    long HWgzotqBkAvFPkkMFdOZEYjfV11878894 = -862959753;    long HWgzotqBkAvFPkkMFdOZEYjfV15735082 = -457826636;    long HWgzotqBkAvFPkkMFdOZEYjfV27675880 = -989493421;    long HWgzotqBkAvFPkkMFdOZEYjfV54162637 = -66180710;    long HWgzotqBkAvFPkkMFdOZEYjfV42504817 = -258200797;    long HWgzotqBkAvFPkkMFdOZEYjfV13915057 = 20695292;    long HWgzotqBkAvFPkkMFdOZEYjfV57012645 = -833735873;    long HWgzotqBkAvFPkkMFdOZEYjfV17183447 = -276030985;     HWgzotqBkAvFPkkMFdOZEYjfV16196994 = HWgzotqBkAvFPkkMFdOZEYjfV82653633;     HWgzotqBkAvFPkkMFdOZEYjfV82653633 = HWgzotqBkAvFPkkMFdOZEYjfV32111825;     HWgzotqBkAvFPkkMFdOZEYjfV32111825 = HWgzotqBkAvFPkkMFdOZEYjfV68209927;     HWgzotqBkAvFPkkMFdOZEYjfV68209927 = HWgzotqBkAvFPkkMFdOZEYjfV78882321;     HWgzotqBkAvFPkkMFdOZEYjfV78882321 = HWgzotqBkAvFPkkMFdOZEYjfV4813324;     HWgzotqBkAvFPkkMFdOZEYjfV4813324 = HWgzotqBkAvFPkkMFdOZEYjfV9188887;     HWgzotqBkAvFPkkMFdOZEYjfV9188887 = HWgzotqBkAvFPkkMFdOZEYjfV44799623;     HWgzotqBkAvFPkkMFdOZEYjfV44799623 = HWgzotqBkAvFPkkMFdOZEYjfV25611157;     HWgzotqBkAvFPkkMFdOZEYjfV25611157 = HWgzotqBkAvFPkkMFdOZEYjfV91215978;     HWgzotqBkAvFPkkMFdOZEYjfV91215978 = HWgzotqBkAvFPkkMFdOZEYjfV80372038;     HWgzotqBkAvFPkkMFdOZEYjfV80372038 = HWgzotqBkAvFPkkMFdOZEYjfV70076748;     HWgzotqBkAvFPkkMFdOZEYjfV70076748 = HWgzotqBkAvFPkkMFdOZEYjfV86374185;     HWgzotqBkAvFPkkMFdOZEYjfV86374185 = HWgzotqBkAvFPkkMFdOZEYjfV67334608;     HWgzotqBkAvFPkkMFdOZEYjfV67334608 = HWgzotqBkAvFPkkMFdOZEYjfV9754170;     HWgzotqBkAvFPkkMFdOZEYjfV9754170 = HWgzotqBkAvFPkkMFdOZEYjfV70507281;     HWgzotqBkAvFPkkMFdOZEYjfV70507281 = HWgzotqBkAvFPkkMFdOZEYjfV8652922;     HWgzotqBkAvFPkkMFdOZEYjfV8652922 = HWgzotqBkAvFPkkMFdOZEYjfV32976007;     HWgzotqBkAvFPkkMFdOZEYjfV32976007 = HWgzotqBkAvFPkkMFdOZEYjfV26567341;     HWgzotqBkAvFPkkMFdOZEYjfV26567341 = HWgzotqBkAvFPkkMFdOZEYjfV18722434;     HWgzotqBkAvFPkkMFdOZEYjfV18722434 = HWgzotqBkAvFPkkMFdOZEYjfV11457172;     HWgzotqBkAvFPkkMFdOZEYjfV11457172 = HWgzotqBkAvFPkkMFdOZEYjfV69295638;     HWgzotqBkAvFPkkMFdOZEYjfV69295638 = HWgzotqBkAvFPkkMFdOZEYjfV19437803;     HWgzotqBkAvFPkkMFdOZEYjfV19437803 = HWgzotqBkAvFPkkMFdOZEYjfV2639630;     HWgzotqBkAvFPkkMFdOZEYjfV2639630 = HWgzotqBkAvFPkkMFdOZEYjfV84842424;     HWgzotqBkAvFPkkMFdOZEYjfV84842424 = HWgzotqBkAvFPkkMFdOZEYjfV84503478;     HWgzotqBkAvFPkkMFdOZEYjfV84503478 = HWgzotqBkAvFPkkMFdOZEYjfV67666954;     HWgzotqBkAvFPkkMFdOZEYjfV67666954 = HWgzotqBkAvFPkkMFdOZEYjfV20144765;     HWgzotqBkAvFPkkMFdOZEYjfV20144765 = HWgzotqBkAvFPkkMFdOZEYjfV36080628;     HWgzotqBkAvFPkkMFdOZEYjfV36080628 = HWgzotqBkAvFPkkMFdOZEYjfV26837489;     HWgzotqBkAvFPkkMFdOZEYjfV26837489 = HWgzotqBkAvFPkkMFdOZEYjfV1660619;     HWgzotqBkAvFPkkMFdOZEYjfV1660619 = HWgzotqBkAvFPkkMFdOZEYjfV62205703;     HWgzotqBkAvFPkkMFdOZEYjfV62205703 = HWgzotqBkAvFPkkMFdOZEYjfV359380;     HWgzotqBkAvFPkkMFdOZEYjfV359380 = HWgzotqBkAvFPkkMFdOZEYjfV61557524;     HWgzotqBkAvFPkkMFdOZEYjfV61557524 = HWgzotqBkAvFPkkMFdOZEYjfV9975278;     HWgzotqBkAvFPkkMFdOZEYjfV9975278 = HWgzotqBkAvFPkkMFdOZEYjfV47452303;     HWgzotqBkAvFPkkMFdOZEYjfV47452303 = HWgzotqBkAvFPkkMFdOZEYjfV97677690;     HWgzotqBkAvFPkkMFdOZEYjfV97677690 = HWgzotqBkAvFPkkMFdOZEYjfV95246396;     HWgzotqBkAvFPkkMFdOZEYjfV95246396 = HWgzotqBkAvFPkkMFdOZEYjfV10113924;     HWgzotqBkAvFPkkMFdOZEYjfV10113924 = HWgzotqBkAvFPkkMFdOZEYjfV64822248;     HWgzotqBkAvFPkkMFdOZEYjfV64822248 = HWgzotqBkAvFPkkMFdOZEYjfV43206759;     HWgzotqBkAvFPkkMFdOZEYjfV43206759 = HWgzotqBkAvFPkkMFdOZEYjfV51223811;     HWgzotqBkAvFPkkMFdOZEYjfV51223811 = HWgzotqBkAvFPkkMFdOZEYjfV12688725;     HWgzotqBkAvFPkkMFdOZEYjfV12688725 = HWgzotqBkAvFPkkMFdOZEYjfV46568006;     HWgzotqBkAvFPkkMFdOZEYjfV46568006 = HWgzotqBkAvFPkkMFdOZEYjfV35349783;     HWgzotqBkAvFPkkMFdOZEYjfV35349783 = HWgzotqBkAvFPkkMFdOZEYjfV35532734;     HWgzotqBkAvFPkkMFdOZEYjfV35532734 = HWgzotqBkAvFPkkMFdOZEYjfV62656836;     HWgzotqBkAvFPkkMFdOZEYjfV62656836 = HWgzotqBkAvFPkkMFdOZEYjfV889581;     HWgzotqBkAvFPkkMFdOZEYjfV889581 = HWgzotqBkAvFPkkMFdOZEYjfV36785230;     HWgzotqBkAvFPkkMFdOZEYjfV36785230 = HWgzotqBkAvFPkkMFdOZEYjfV79025139;     HWgzotqBkAvFPkkMFdOZEYjfV79025139 = HWgzotqBkAvFPkkMFdOZEYjfV84741009;     HWgzotqBkAvFPkkMFdOZEYjfV84741009 = HWgzotqBkAvFPkkMFdOZEYjfV56539707;     HWgzotqBkAvFPkkMFdOZEYjfV56539707 = HWgzotqBkAvFPkkMFdOZEYjfV50776270;     HWgzotqBkAvFPkkMFdOZEYjfV50776270 = HWgzotqBkAvFPkkMFdOZEYjfV26651095;     HWgzotqBkAvFPkkMFdOZEYjfV26651095 = HWgzotqBkAvFPkkMFdOZEYjfV61545956;     HWgzotqBkAvFPkkMFdOZEYjfV61545956 = HWgzotqBkAvFPkkMFdOZEYjfV46901356;     HWgzotqBkAvFPkkMFdOZEYjfV46901356 = HWgzotqBkAvFPkkMFdOZEYjfV63215830;     HWgzotqBkAvFPkkMFdOZEYjfV63215830 = HWgzotqBkAvFPkkMFdOZEYjfV29472195;     HWgzotqBkAvFPkkMFdOZEYjfV29472195 = HWgzotqBkAvFPkkMFdOZEYjfV83367503;     HWgzotqBkAvFPkkMFdOZEYjfV83367503 = HWgzotqBkAvFPkkMFdOZEYjfV94378842;     HWgzotqBkAvFPkkMFdOZEYjfV94378842 = HWgzotqBkAvFPkkMFdOZEYjfV37146369;     HWgzotqBkAvFPkkMFdOZEYjfV37146369 = HWgzotqBkAvFPkkMFdOZEYjfV89044122;     HWgzotqBkAvFPkkMFdOZEYjfV89044122 = HWgzotqBkAvFPkkMFdOZEYjfV8718995;     HWgzotqBkAvFPkkMFdOZEYjfV8718995 = HWgzotqBkAvFPkkMFdOZEYjfV98773667;     HWgzotqBkAvFPkkMFdOZEYjfV98773667 = HWgzotqBkAvFPkkMFdOZEYjfV89555360;     HWgzotqBkAvFPkkMFdOZEYjfV89555360 = HWgzotqBkAvFPkkMFdOZEYjfV18166336;     HWgzotqBkAvFPkkMFdOZEYjfV18166336 = HWgzotqBkAvFPkkMFdOZEYjfV69717369;     HWgzotqBkAvFPkkMFdOZEYjfV69717369 = HWgzotqBkAvFPkkMFdOZEYjfV24816661;     HWgzotqBkAvFPkkMFdOZEYjfV24816661 = HWgzotqBkAvFPkkMFdOZEYjfV57359330;     HWgzotqBkAvFPkkMFdOZEYjfV57359330 = HWgzotqBkAvFPkkMFdOZEYjfV62301867;     HWgzotqBkAvFPkkMFdOZEYjfV62301867 = HWgzotqBkAvFPkkMFdOZEYjfV72829591;     HWgzotqBkAvFPkkMFdOZEYjfV72829591 = HWgzotqBkAvFPkkMFdOZEYjfV13406526;     HWgzotqBkAvFPkkMFdOZEYjfV13406526 = HWgzotqBkAvFPkkMFdOZEYjfV22862083;     HWgzotqBkAvFPkkMFdOZEYjfV22862083 = HWgzotqBkAvFPkkMFdOZEYjfV61745092;     HWgzotqBkAvFPkkMFdOZEYjfV61745092 = HWgzotqBkAvFPkkMFdOZEYjfV75515674;     HWgzotqBkAvFPkkMFdOZEYjfV75515674 = HWgzotqBkAvFPkkMFdOZEYjfV60233360;     HWgzotqBkAvFPkkMFdOZEYjfV60233360 = HWgzotqBkAvFPkkMFdOZEYjfV56606913;     HWgzotqBkAvFPkkMFdOZEYjfV56606913 = HWgzotqBkAvFPkkMFdOZEYjfV72869797;     HWgzotqBkAvFPkkMFdOZEYjfV72869797 = HWgzotqBkAvFPkkMFdOZEYjfV67289847;     HWgzotqBkAvFPkkMFdOZEYjfV67289847 = HWgzotqBkAvFPkkMFdOZEYjfV49309690;     HWgzotqBkAvFPkkMFdOZEYjfV49309690 = HWgzotqBkAvFPkkMFdOZEYjfV21846642;     HWgzotqBkAvFPkkMFdOZEYjfV21846642 = HWgzotqBkAvFPkkMFdOZEYjfV66777374;     HWgzotqBkAvFPkkMFdOZEYjfV66777374 = HWgzotqBkAvFPkkMFdOZEYjfV83359535;     HWgzotqBkAvFPkkMFdOZEYjfV83359535 = HWgzotqBkAvFPkkMFdOZEYjfV57055488;     HWgzotqBkAvFPkkMFdOZEYjfV57055488 = HWgzotqBkAvFPkkMFdOZEYjfV42096480;     HWgzotqBkAvFPkkMFdOZEYjfV42096480 = HWgzotqBkAvFPkkMFdOZEYjfV45120911;     HWgzotqBkAvFPkkMFdOZEYjfV45120911 = HWgzotqBkAvFPkkMFdOZEYjfV11429434;     HWgzotqBkAvFPkkMFdOZEYjfV11429434 = HWgzotqBkAvFPkkMFdOZEYjfV73708284;     HWgzotqBkAvFPkkMFdOZEYjfV73708284 = HWgzotqBkAvFPkkMFdOZEYjfV11569;     HWgzotqBkAvFPkkMFdOZEYjfV11569 = HWgzotqBkAvFPkkMFdOZEYjfV63073921;     HWgzotqBkAvFPkkMFdOZEYjfV63073921 = HWgzotqBkAvFPkkMFdOZEYjfV84236472;     HWgzotqBkAvFPkkMFdOZEYjfV84236472 = HWgzotqBkAvFPkkMFdOZEYjfV68205495;     HWgzotqBkAvFPkkMFdOZEYjfV68205495 = HWgzotqBkAvFPkkMFdOZEYjfV11878894;     HWgzotqBkAvFPkkMFdOZEYjfV11878894 = HWgzotqBkAvFPkkMFdOZEYjfV15735082;     HWgzotqBkAvFPkkMFdOZEYjfV15735082 = HWgzotqBkAvFPkkMFdOZEYjfV27675880;     HWgzotqBkAvFPkkMFdOZEYjfV27675880 = HWgzotqBkAvFPkkMFdOZEYjfV54162637;     HWgzotqBkAvFPkkMFdOZEYjfV54162637 = HWgzotqBkAvFPkkMFdOZEYjfV42504817;     HWgzotqBkAvFPkkMFdOZEYjfV42504817 = HWgzotqBkAvFPkkMFdOZEYjfV13915057;     HWgzotqBkAvFPkkMFdOZEYjfV13915057 = HWgzotqBkAvFPkkMFdOZEYjfV57012645;     HWgzotqBkAvFPkkMFdOZEYjfV57012645 = HWgzotqBkAvFPkkMFdOZEYjfV17183447;     HWgzotqBkAvFPkkMFdOZEYjfV17183447 = HWgzotqBkAvFPkkMFdOZEYjfV16196994;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void VHhsDCMxowOGwWrlkNIwzmaFlrRMfqaMARsyvBVedrgLZNFUFuccFLhjh88052195() {     long bHLlzSyVBFeesqiseSIGPfYlw22314101 = -387932874;    long bHLlzSyVBFeesqiseSIGPfYlw26026913 = -293357848;    long bHLlzSyVBFeesqiseSIGPfYlw48154009 = -672000175;    long bHLlzSyVBFeesqiseSIGPfYlw95284707 = -371431640;    long bHLlzSyVBFeesqiseSIGPfYlw47777809 = -352498840;    long bHLlzSyVBFeesqiseSIGPfYlw96230525 = -479816912;    long bHLlzSyVBFeesqiseSIGPfYlw69677852 = -768511106;    long bHLlzSyVBFeesqiseSIGPfYlw94559513 = -307530960;    long bHLlzSyVBFeesqiseSIGPfYlw90253652 = -205543040;    long bHLlzSyVBFeesqiseSIGPfYlw32445638 = -214536924;    long bHLlzSyVBFeesqiseSIGPfYlw40482329 = -984198717;    long bHLlzSyVBFeesqiseSIGPfYlw1899791 = -450599835;    long bHLlzSyVBFeesqiseSIGPfYlw72583303 = -755885265;    long bHLlzSyVBFeesqiseSIGPfYlw50478284 = -57602630;    long bHLlzSyVBFeesqiseSIGPfYlw5496596 = -892607963;    long bHLlzSyVBFeesqiseSIGPfYlw12012675 = -198940599;    long bHLlzSyVBFeesqiseSIGPfYlw2488926 = -454014659;    long bHLlzSyVBFeesqiseSIGPfYlw30029160 = -97224073;    long bHLlzSyVBFeesqiseSIGPfYlw88397182 = -782320030;    long bHLlzSyVBFeesqiseSIGPfYlw99272598 = -868123982;    long bHLlzSyVBFeesqiseSIGPfYlw10365 = -781381541;    long bHLlzSyVBFeesqiseSIGPfYlw55816662 = -951829787;    long bHLlzSyVBFeesqiseSIGPfYlw55028594 = -473661477;    long bHLlzSyVBFeesqiseSIGPfYlw86632003 = -185165491;    long bHLlzSyVBFeesqiseSIGPfYlw28542074 = -514476692;    long bHLlzSyVBFeesqiseSIGPfYlw9225154 = -827790271;    long bHLlzSyVBFeesqiseSIGPfYlw66126732 = -883858256;    long bHLlzSyVBFeesqiseSIGPfYlw33251890 = -987531944;    long bHLlzSyVBFeesqiseSIGPfYlw2212884 = -847621367;    long bHLlzSyVBFeesqiseSIGPfYlw95453125 = -582587450;    long bHLlzSyVBFeesqiseSIGPfYlw93903167 = -718306958;    long bHLlzSyVBFeesqiseSIGPfYlw59816325 = -239836401;    long bHLlzSyVBFeesqiseSIGPfYlw10070328 = -718184703;    long bHLlzSyVBFeesqiseSIGPfYlw56388089 = -200371363;    long bHLlzSyVBFeesqiseSIGPfYlw71449929 = -720295527;    long bHLlzSyVBFeesqiseSIGPfYlw16178216 = -289954977;    long bHLlzSyVBFeesqiseSIGPfYlw78939625 = -697917502;    long bHLlzSyVBFeesqiseSIGPfYlw29336609 = -673868113;    long bHLlzSyVBFeesqiseSIGPfYlw83724177 = -434464155;    long bHLlzSyVBFeesqiseSIGPfYlw52324186 = -695057267;    long bHLlzSyVBFeesqiseSIGPfYlw48875983 = -939397742;    long bHLlzSyVBFeesqiseSIGPfYlw83374268 = 76238540;    long bHLlzSyVBFeesqiseSIGPfYlw90755703 = -832503084;    long bHLlzSyVBFeesqiseSIGPfYlw33975746 = 66345762;    long bHLlzSyVBFeesqiseSIGPfYlw47302247 = -961323887;    long bHLlzSyVBFeesqiseSIGPfYlw47471929 = 47578709;    long bHLlzSyVBFeesqiseSIGPfYlw80435410 = 47479084;    long bHLlzSyVBFeesqiseSIGPfYlw8846522 = -153863640;    long bHLlzSyVBFeesqiseSIGPfYlw46460958 = -610505295;    long bHLlzSyVBFeesqiseSIGPfYlw91936791 = -456635080;    long bHLlzSyVBFeesqiseSIGPfYlw20441688 = -309035122;    long bHLlzSyVBFeesqiseSIGPfYlw67349426 = -901471909;    long bHLlzSyVBFeesqiseSIGPfYlw99024726 = -162173028;    long bHLlzSyVBFeesqiseSIGPfYlw22619976 = -82109983;    long bHLlzSyVBFeesqiseSIGPfYlw88041830 = -485619779;    long bHLlzSyVBFeesqiseSIGPfYlw66497438 = -436103087;    long bHLlzSyVBFeesqiseSIGPfYlw70998318 = -819696372;    long bHLlzSyVBFeesqiseSIGPfYlw61522005 = -386834685;    long bHLlzSyVBFeesqiseSIGPfYlw66742633 = -856954949;    long bHLlzSyVBFeesqiseSIGPfYlw38552656 = -524708570;    long bHLlzSyVBFeesqiseSIGPfYlw30103793 = -595958656;    long bHLlzSyVBFeesqiseSIGPfYlw36425963 = -780979162;    long bHLlzSyVBFeesqiseSIGPfYlw92346630 = -459909594;    long bHLlzSyVBFeesqiseSIGPfYlw94800526 = -622955591;    long bHLlzSyVBFeesqiseSIGPfYlw38542470 = -496229967;    long bHLlzSyVBFeesqiseSIGPfYlw80666003 = -644362317;    long bHLlzSyVBFeesqiseSIGPfYlw91829462 = -732415133;    long bHLlzSyVBFeesqiseSIGPfYlw16195215 = -455513902;    long bHLlzSyVBFeesqiseSIGPfYlw79028355 = -337307104;    long bHLlzSyVBFeesqiseSIGPfYlw89318380 = -502652987;    long bHLlzSyVBFeesqiseSIGPfYlw33073050 = -501023098;    long bHLlzSyVBFeesqiseSIGPfYlw73152316 = -780146547;    long bHLlzSyVBFeesqiseSIGPfYlw46304982 = -662759919;    long bHLlzSyVBFeesqiseSIGPfYlw36072996 = 12737237;    long bHLlzSyVBFeesqiseSIGPfYlw50396615 = -928726241;    long bHLlzSyVBFeesqiseSIGPfYlw16636097 = -757620082;    long bHLlzSyVBFeesqiseSIGPfYlw65060958 = -19326704;    long bHLlzSyVBFeesqiseSIGPfYlw21052849 = -440007239;    long bHLlzSyVBFeesqiseSIGPfYlw39329756 = -223841604;    long bHLlzSyVBFeesqiseSIGPfYlw81070145 = -462055402;    long bHLlzSyVBFeesqiseSIGPfYlw28789743 = -775269355;    long bHLlzSyVBFeesqiseSIGPfYlw57280211 = -629994617;    long bHLlzSyVBFeesqiseSIGPfYlw86790931 = -277026649;    long bHLlzSyVBFeesqiseSIGPfYlw10276092 = -290986287;    long bHLlzSyVBFeesqiseSIGPfYlw75011438 = -173552329;    long bHLlzSyVBFeesqiseSIGPfYlw26553741 = -816835049;    long bHLlzSyVBFeesqiseSIGPfYlw60791598 = 22336626;    long bHLlzSyVBFeesqiseSIGPfYlw87450352 = -536074720;    long bHLlzSyVBFeesqiseSIGPfYlw68346258 = -714751584;    long bHLlzSyVBFeesqiseSIGPfYlw4952491 = -184192440;    long bHLlzSyVBFeesqiseSIGPfYlw45179898 = -470258606;    long bHLlzSyVBFeesqiseSIGPfYlw17417620 = -211082818;    long bHLlzSyVBFeesqiseSIGPfYlw62593975 = -816913165;    long bHLlzSyVBFeesqiseSIGPfYlw45171522 = -909755585;    long bHLlzSyVBFeesqiseSIGPfYlw22220393 = 901389;    long bHLlzSyVBFeesqiseSIGPfYlw12450020 = -58418580;    long bHLlzSyVBFeesqiseSIGPfYlw91027638 = -463851867;    long bHLlzSyVBFeesqiseSIGPfYlw95955176 = -109547494;    long bHLlzSyVBFeesqiseSIGPfYlw95433276 = -437424272;    long bHLlzSyVBFeesqiseSIGPfYlw66636244 = -387932874;     bHLlzSyVBFeesqiseSIGPfYlw22314101 = bHLlzSyVBFeesqiseSIGPfYlw26026913;     bHLlzSyVBFeesqiseSIGPfYlw26026913 = bHLlzSyVBFeesqiseSIGPfYlw48154009;     bHLlzSyVBFeesqiseSIGPfYlw48154009 = bHLlzSyVBFeesqiseSIGPfYlw95284707;     bHLlzSyVBFeesqiseSIGPfYlw95284707 = bHLlzSyVBFeesqiseSIGPfYlw47777809;     bHLlzSyVBFeesqiseSIGPfYlw47777809 = bHLlzSyVBFeesqiseSIGPfYlw96230525;     bHLlzSyVBFeesqiseSIGPfYlw96230525 = bHLlzSyVBFeesqiseSIGPfYlw69677852;     bHLlzSyVBFeesqiseSIGPfYlw69677852 = bHLlzSyVBFeesqiseSIGPfYlw94559513;     bHLlzSyVBFeesqiseSIGPfYlw94559513 = bHLlzSyVBFeesqiseSIGPfYlw90253652;     bHLlzSyVBFeesqiseSIGPfYlw90253652 = bHLlzSyVBFeesqiseSIGPfYlw32445638;     bHLlzSyVBFeesqiseSIGPfYlw32445638 = bHLlzSyVBFeesqiseSIGPfYlw40482329;     bHLlzSyVBFeesqiseSIGPfYlw40482329 = bHLlzSyVBFeesqiseSIGPfYlw1899791;     bHLlzSyVBFeesqiseSIGPfYlw1899791 = bHLlzSyVBFeesqiseSIGPfYlw72583303;     bHLlzSyVBFeesqiseSIGPfYlw72583303 = bHLlzSyVBFeesqiseSIGPfYlw50478284;     bHLlzSyVBFeesqiseSIGPfYlw50478284 = bHLlzSyVBFeesqiseSIGPfYlw5496596;     bHLlzSyVBFeesqiseSIGPfYlw5496596 = bHLlzSyVBFeesqiseSIGPfYlw12012675;     bHLlzSyVBFeesqiseSIGPfYlw12012675 = bHLlzSyVBFeesqiseSIGPfYlw2488926;     bHLlzSyVBFeesqiseSIGPfYlw2488926 = bHLlzSyVBFeesqiseSIGPfYlw30029160;     bHLlzSyVBFeesqiseSIGPfYlw30029160 = bHLlzSyVBFeesqiseSIGPfYlw88397182;     bHLlzSyVBFeesqiseSIGPfYlw88397182 = bHLlzSyVBFeesqiseSIGPfYlw99272598;     bHLlzSyVBFeesqiseSIGPfYlw99272598 = bHLlzSyVBFeesqiseSIGPfYlw10365;     bHLlzSyVBFeesqiseSIGPfYlw10365 = bHLlzSyVBFeesqiseSIGPfYlw55816662;     bHLlzSyVBFeesqiseSIGPfYlw55816662 = bHLlzSyVBFeesqiseSIGPfYlw55028594;     bHLlzSyVBFeesqiseSIGPfYlw55028594 = bHLlzSyVBFeesqiseSIGPfYlw86632003;     bHLlzSyVBFeesqiseSIGPfYlw86632003 = bHLlzSyVBFeesqiseSIGPfYlw28542074;     bHLlzSyVBFeesqiseSIGPfYlw28542074 = bHLlzSyVBFeesqiseSIGPfYlw9225154;     bHLlzSyVBFeesqiseSIGPfYlw9225154 = bHLlzSyVBFeesqiseSIGPfYlw66126732;     bHLlzSyVBFeesqiseSIGPfYlw66126732 = bHLlzSyVBFeesqiseSIGPfYlw33251890;     bHLlzSyVBFeesqiseSIGPfYlw33251890 = bHLlzSyVBFeesqiseSIGPfYlw2212884;     bHLlzSyVBFeesqiseSIGPfYlw2212884 = bHLlzSyVBFeesqiseSIGPfYlw95453125;     bHLlzSyVBFeesqiseSIGPfYlw95453125 = bHLlzSyVBFeesqiseSIGPfYlw93903167;     bHLlzSyVBFeesqiseSIGPfYlw93903167 = bHLlzSyVBFeesqiseSIGPfYlw59816325;     bHLlzSyVBFeesqiseSIGPfYlw59816325 = bHLlzSyVBFeesqiseSIGPfYlw10070328;     bHLlzSyVBFeesqiseSIGPfYlw10070328 = bHLlzSyVBFeesqiseSIGPfYlw56388089;     bHLlzSyVBFeesqiseSIGPfYlw56388089 = bHLlzSyVBFeesqiseSIGPfYlw71449929;     bHLlzSyVBFeesqiseSIGPfYlw71449929 = bHLlzSyVBFeesqiseSIGPfYlw16178216;     bHLlzSyVBFeesqiseSIGPfYlw16178216 = bHLlzSyVBFeesqiseSIGPfYlw78939625;     bHLlzSyVBFeesqiseSIGPfYlw78939625 = bHLlzSyVBFeesqiseSIGPfYlw29336609;     bHLlzSyVBFeesqiseSIGPfYlw29336609 = bHLlzSyVBFeesqiseSIGPfYlw83724177;     bHLlzSyVBFeesqiseSIGPfYlw83724177 = bHLlzSyVBFeesqiseSIGPfYlw52324186;     bHLlzSyVBFeesqiseSIGPfYlw52324186 = bHLlzSyVBFeesqiseSIGPfYlw48875983;     bHLlzSyVBFeesqiseSIGPfYlw48875983 = bHLlzSyVBFeesqiseSIGPfYlw83374268;     bHLlzSyVBFeesqiseSIGPfYlw83374268 = bHLlzSyVBFeesqiseSIGPfYlw90755703;     bHLlzSyVBFeesqiseSIGPfYlw90755703 = bHLlzSyVBFeesqiseSIGPfYlw33975746;     bHLlzSyVBFeesqiseSIGPfYlw33975746 = bHLlzSyVBFeesqiseSIGPfYlw47302247;     bHLlzSyVBFeesqiseSIGPfYlw47302247 = bHLlzSyVBFeesqiseSIGPfYlw47471929;     bHLlzSyVBFeesqiseSIGPfYlw47471929 = bHLlzSyVBFeesqiseSIGPfYlw80435410;     bHLlzSyVBFeesqiseSIGPfYlw80435410 = bHLlzSyVBFeesqiseSIGPfYlw8846522;     bHLlzSyVBFeesqiseSIGPfYlw8846522 = bHLlzSyVBFeesqiseSIGPfYlw46460958;     bHLlzSyVBFeesqiseSIGPfYlw46460958 = bHLlzSyVBFeesqiseSIGPfYlw91936791;     bHLlzSyVBFeesqiseSIGPfYlw91936791 = bHLlzSyVBFeesqiseSIGPfYlw20441688;     bHLlzSyVBFeesqiseSIGPfYlw20441688 = bHLlzSyVBFeesqiseSIGPfYlw67349426;     bHLlzSyVBFeesqiseSIGPfYlw67349426 = bHLlzSyVBFeesqiseSIGPfYlw99024726;     bHLlzSyVBFeesqiseSIGPfYlw99024726 = bHLlzSyVBFeesqiseSIGPfYlw22619976;     bHLlzSyVBFeesqiseSIGPfYlw22619976 = bHLlzSyVBFeesqiseSIGPfYlw88041830;     bHLlzSyVBFeesqiseSIGPfYlw88041830 = bHLlzSyVBFeesqiseSIGPfYlw66497438;     bHLlzSyVBFeesqiseSIGPfYlw66497438 = bHLlzSyVBFeesqiseSIGPfYlw70998318;     bHLlzSyVBFeesqiseSIGPfYlw70998318 = bHLlzSyVBFeesqiseSIGPfYlw61522005;     bHLlzSyVBFeesqiseSIGPfYlw61522005 = bHLlzSyVBFeesqiseSIGPfYlw66742633;     bHLlzSyVBFeesqiseSIGPfYlw66742633 = bHLlzSyVBFeesqiseSIGPfYlw38552656;     bHLlzSyVBFeesqiseSIGPfYlw38552656 = bHLlzSyVBFeesqiseSIGPfYlw30103793;     bHLlzSyVBFeesqiseSIGPfYlw30103793 = bHLlzSyVBFeesqiseSIGPfYlw36425963;     bHLlzSyVBFeesqiseSIGPfYlw36425963 = bHLlzSyVBFeesqiseSIGPfYlw92346630;     bHLlzSyVBFeesqiseSIGPfYlw92346630 = bHLlzSyVBFeesqiseSIGPfYlw94800526;     bHLlzSyVBFeesqiseSIGPfYlw94800526 = bHLlzSyVBFeesqiseSIGPfYlw38542470;     bHLlzSyVBFeesqiseSIGPfYlw38542470 = bHLlzSyVBFeesqiseSIGPfYlw80666003;     bHLlzSyVBFeesqiseSIGPfYlw80666003 = bHLlzSyVBFeesqiseSIGPfYlw91829462;     bHLlzSyVBFeesqiseSIGPfYlw91829462 = bHLlzSyVBFeesqiseSIGPfYlw16195215;     bHLlzSyVBFeesqiseSIGPfYlw16195215 = bHLlzSyVBFeesqiseSIGPfYlw79028355;     bHLlzSyVBFeesqiseSIGPfYlw79028355 = bHLlzSyVBFeesqiseSIGPfYlw89318380;     bHLlzSyVBFeesqiseSIGPfYlw89318380 = bHLlzSyVBFeesqiseSIGPfYlw33073050;     bHLlzSyVBFeesqiseSIGPfYlw33073050 = bHLlzSyVBFeesqiseSIGPfYlw73152316;     bHLlzSyVBFeesqiseSIGPfYlw73152316 = bHLlzSyVBFeesqiseSIGPfYlw46304982;     bHLlzSyVBFeesqiseSIGPfYlw46304982 = bHLlzSyVBFeesqiseSIGPfYlw36072996;     bHLlzSyVBFeesqiseSIGPfYlw36072996 = bHLlzSyVBFeesqiseSIGPfYlw50396615;     bHLlzSyVBFeesqiseSIGPfYlw50396615 = bHLlzSyVBFeesqiseSIGPfYlw16636097;     bHLlzSyVBFeesqiseSIGPfYlw16636097 = bHLlzSyVBFeesqiseSIGPfYlw65060958;     bHLlzSyVBFeesqiseSIGPfYlw65060958 = bHLlzSyVBFeesqiseSIGPfYlw21052849;     bHLlzSyVBFeesqiseSIGPfYlw21052849 = bHLlzSyVBFeesqiseSIGPfYlw39329756;     bHLlzSyVBFeesqiseSIGPfYlw39329756 = bHLlzSyVBFeesqiseSIGPfYlw81070145;     bHLlzSyVBFeesqiseSIGPfYlw81070145 = bHLlzSyVBFeesqiseSIGPfYlw28789743;     bHLlzSyVBFeesqiseSIGPfYlw28789743 = bHLlzSyVBFeesqiseSIGPfYlw57280211;     bHLlzSyVBFeesqiseSIGPfYlw57280211 = bHLlzSyVBFeesqiseSIGPfYlw86790931;     bHLlzSyVBFeesqiseSIGPfYlw86790931 = bHLlzSyVBFeesqiseSIGPfYlw10276092;     bHLlzSyVBFeesqiseSIGPfYlw10276092 = bHLlzSyVBFeesqiseSIGPfYlw75011438;     bHLlzSyVBFeesqiseSIGPfYlw75011438 = bHLlzSyVBFeesqiseSIGPfYlw26553741;     bHLlzSyVBFeesqiseSIGPfYlw26553741 = bHLlzSyVBFeesqiseSIGPfYlw60791598;     bHLlzSyVBFeesqiseSIGPfYlw60791598 = bHLlzSyVBFeesqiseSIGPfYlw87450352;     bHLlzSyVBFeesqiseSIGPfYlw87450352 = bHLlzSyVBFeesqiseSIGPfYlw68346258;     bHLlzSyVBFeesqiseSIGPfYlw68346258 = bHLlzSyVBFeesqiseSIGPfYlw4952491;     bHLlzSyVBFeesqiseSIGPfYlw4952491 = bHLlzSyVBFeesqiseSIGPfYlw45179898;     bHLlzSyVBFeesqiseSIGPfYlw45179898 = bHLlzSyVBFeesqiseSIGPfYlw17417620;     bHLlzSyVBFeesqiseSIGPfYlw17417620 = bHLlzSyVBFeesqiseSIGPfYlw62593975;     bHLlzSyVBFeesqiseSIGPfYlw62593975 = bHLlzSyVBFeesqiseSIGPfYlw45171522;     bHLlzSyVBFeesqiseSIGPfYlw45171522 = bHLlzSyVBFeesqiseSIGPfYlw22220393;     bHLlzSyVBFeesqiseSIGPfYlw22220393 = bHLlzSyVBFeesqiseSIGPfYlw12450020;     bHLlzSyVBFeesqiseSIGPfYlw12450020 = bHLlzSyVBFeesqiseSIGPfYlw91027638;     bHLlzSyVBFeesqiseSIGPfYlw91027638 = bHLlzSyVBFeesqiseSIGPfYlw95955176;     bHLlzSyVBFeesqiseSIGPfYlw95955176 = bHLlzSyVBFeesqiseSIGPfYlw95433276;     bHLlzSyVBFeesqiseSIGPfYlw95433276 = bHLlzSyVBFeesqiseSIGPfYlw66636244;     bHLlzSyVBFeesqiseSIGPfYlw66636244 = bHLlzSyVBFeesqiseSIGPfYlw22314101;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fpOriHtuFipCoiddgtkquERSQwffsZJBBSqChqipDDoOmIQplgsqKySaY55343795() {     long wblbNBfYoAVravqLvmrQDfIgq57773069 = -854209774;    long wblbNBfYoAVravqLvmrQDfIgq39298991 = -173909455;    long wblbNBfYoAVravqLvmrQDfIgq85540485 = -337667250;    long wblbNBfYoAVravqLvmrQDfIgq67508062 = -192582712;    long wblbNBfYoAVravqLvmrQDfIgq4063079 = -458097686;    long wblbNBfYoAVravqLvmrQDfIgq32453398 = -742164808;    long wblbNBfYoAVravqLvmrQDfIgq80335259 = -613236840;    long wblbNBfYoAVravqLvmrQDfIgq56691074 = 48234900;    long wblbNBfYoAVravqLvmrQDfIgq91771257 = -693874447;    long wblbNBfYoAVravqLvmrQDfIgq47348350 = -979223922;    long wblbNBfYoAVravqLvmrQDfIgq78664063 = -786206447;    long wblbNBfYoAVravqLvmrQDfIgq2467940 = -314720606;    long wblbNBfYoAVravqLvmrQDfIgq10817949 = -207897770;    long wblbNBfYoAVravqLvmrQDfIgq3619148 = -33966040;    long wblbNBfYoAVravqLvmrQDfIgq63691112 = -296032978;    long wblbNBfYoAVravqLvmrQDfIgq95553975 = -934752206;    long wblbNBfYoAVravqLvmrQDfIgq58324861 = -980989212;    long wblbNBfYoAVravqLvmrQDfIgq29789351 = -170652142;    long wblbNBfYoAVravqLvmrQDfIgq88947512 = 1116549;    long wblbNBfYoAVravqLvmrQDfIgq93109816 = -194685048;    long wblbNBfYoAVravqLvmrQDfIgq13097228 = -438656230;    long wblbNBfYoAVravqLvmrQDfIgq59238186 = 61533919;    long wblbNBfYoAVravqLvmrQDfIgq25553974 = -111293661;    long wblbNBfYoAVravqLvmrQDfIgq80424949 = -695990095;    long wblbNBfYoAVravqLvmrQDfIgq36560025 = -538461891;    long wblbNBfYoAVravqLvmrQDfIgq19923326 = -516367077;    long wblbNBfYoAVravqLvmrQDfIgq26547307 = -690142397;    long wblbNBfYoAVravqLvmrQDfIgq73980315 = -57304119;    long wblbNBfYoAVravqLvmrQDfIgq48881098 = -321716169;    long wblbNBfYoAVravqLvmrQDfIgq986537 = -617094621;    long wblbNBfYoAVravqLvmrQDfIgq12486400 = -170287445;    long wblbNBfYoAVravqLvmrQDfIgq97639343 = -12807816;    long wblbNBfYoAVravqLvmrQDfIgq22288339 = -865780680;    long wblbNBfYoAVravqLvmrQDfIgq86136515 = -265065176;    long wblbNBfYoAVravqLvmrQDfIgq37258383 = -671395778;    long wblbNBfYoAVravqLvmrQDfIgq67739059 = -504520283;    long wblbNBfYoAVravqLvmrQDfIgq28351442 = -562613542;    long wblbNBfYoAVravqLvmrQDfIgq80552012 = -656523694;    long wblbNBfYoAVravqLvmrQDfIgq14114740 = -85340431;    long wblbNBfYoAVravqLvmrQDfIgq16595719 = -160319813;    long wblbNBfYoAVravqLvmrQDfIgq82327590 = -708596657;    long wblbNBfYoAVravqLvmrQDfIgq72739395 = -618306751;    long wblbNBfYoAVravqLvmrQDfIgq80139081 = -385683870;    long wblbNBfYoAVravqLvmrQDfIgq74107084 = -537986648;    long wblbNBfYoAVravqLvmrQDfIgq47318706 = -787835048;    long wblbNBfYoAVravqLvmrQDfIgq93433257 = 8655076;    long wblbNBfYoAVravqLvmrQDfIgq99780574 = -436507277;    long wblbNBfYoAVravqLvmrQDfIgq26572833 = -320390233;    long wblbNBfYoAVravqLvmrQDfIgq69353624 = -274242175;    long wblbNBfYoAVravqLvmrQDfIgq16466381 = -947661896;    long wblbNBfYoAVravqLvmrQDfIgq1212412 = -183311679;    long wblbNBfYoAVravqLvmrQDfIgq50834899 = -15124256;    long wblbNBfYoAVravqLvmrQDfIgq67645875 = 81781418;    long wblbNBfYoAVravqLvmrQDfIgq38611822 = -273618483;    long wblbNBfYoAVravqLvmrQDfIgq42246567 = -832109925;    long wblbNBfYoAVravqLvmrQDfIgq98534882 = -815743693;    long wblbNBfYoAVravqLvmrQDfIgq13745017 = 37384206;    long wblbNBfYoAVravqLvmrQDfIgq5115537 = -641677155;    long wblbNBfYoAVravqLvmrQDfIgq30948037 = -654120822;    long wblbNBfYoAVravqLvmrQDfIgq84139753 = -941730609;    long wblbNBfYoAVravqLvmrQDfIgq5906092 = 47977589;    long wblbNBfYoAVravqLvmrQDfIgq6354944 = -455932722;    long wblbNBfYoAVravqLvmrQDfIgq7809977 = -630048932;    long wblbNBfYoAVravqLvmrQDfIgq90784720 = 23220173;    long wblbNBfYoAVravqLvmrQDfIgq34861951 = -708936478;    long wblbNBfYoAVravqLvmrQDfIgq81024720 = -673398632;    long wblbNBfYoAVravqLvmrQDfIgq80179600 = -448939927;    long wblbNBfYoAVravqLvmrQDfIgq24681434 = -942832594;    long wblbNBfYoAVravqLvmrQDfIgq66360765 = -362570262;    long wblbNBfYoAVravqLvmrQDfIgq95952052 = -791512696;    long wblbNBfYoAVravqLvmrQDfIgq67202534 = -272138664;    long wblbNBfYoAVravqLvmrQDfIgq77772848 = -224465518;    long wblbNBfYoAVravqLvmrQDfIgq15674612 = 14688289;    long wblbNBfYoAVravqLvmrQDfIgq72351793 = -838563638;    long wblbNBfYoAVravqLvmrQDfIgq10782227 = -486088392;    long wblbNBfYoAVravqLvmrQDfIgq40357833 = -820349479;    long wblbNBfYoAVravqLvmrQDfIgq79099104 = -552782212;    long wblbNBfYoAVravqLvmrQDfIgq51446890 = -573307014;    long wblbNBfYoAVravqLvmrQDfIgq33106243 = -908155047;    long wblbNBfYoAVravqLvmrQDfIgq43126768 = -447116968;    long wblbNBfYoAVravqLvmrQDfIgq20142752 = 20140199;    long wblbNBfYoAVravqLvmrQDfIgq99974473 = -269752164;    long wblbNBfYoAVravqLvmrQDfIgq4626691 = -783061944;    long wblbNBfYoAVravqLvmrQDfIgq32414717 = -374054274;    long wblbNBfYoAVravqLvmrQDfIgq99774125 = -333782942;    long wblbNBfYoAVravqLvmrQDfIgq61651500 = -55163190;    long wblbNBfYoAVravqLvmrQDfIgq29993468 = 5410766;    long wblbNBfYoAVravqLvmrQDfIgq83676516 = -492162198;    long wblbNBfYoAVravqLvmrQDfIgq43889948 = -432955252;    long wblbNBfYoAVravqLvmrQDfIgq38723501 = -855652085;    long wblbNBfYoAVravqLvmrQDfIgq53994043 = -441904489;    long wblbNBfYoAVravqLvmrQDfIgq23235905 = -920936387;    long wblbNBfYoAVravqLvmrQDfIgq49603975 = 97597127;    long wblbNBfYoAVravqLvmrQDfIgq29974986 = -143609823;    long wblbNBfYoAVravqLvmrQDfIgq10689628 = -108297403;    long wblbNBfYoAVravqLvmrQDfIgq75972646 = -152663935;    long wblbNBfYoAVravqLvmrQDfIgq64929418 = -988257820;    long wblbNBfYoAVravqLvmrQDfIgq89354360 = -308904043;    long wblbNBfYoAVravqLvmrQDfIgq39245134 = -829050171;    long wblbNBfYoAVravqLvmrQDfIgq66293986 = -854209774;     wblbNBfYoAVravqLvmrQDfIgq57773069 = wblbNBfYoAVravqLvmrQDfIgq39298991;     wblbNBfYoAVravqLvmrQDfIgq39298991 = wblbNBfYoAVravqLvmrQDfIgq85540485;     wblbNBfYoAVravqLvmrQDfIgq85540485 = wblbNBfYoAVravqLvmrQDfIgq67508062;     wblbNBfYoAVravqLvmrQDfIgq67508062 = wblbNBfYoAVravqLvmrQDfIgq4063079;     wblbNBfYoAVravqLvmrQDfIgq4063079 = wblbNBfYoAVravqLvmrQDfIgq32453398;     wblbNBfYoAVravqLvmrQDfIgq32453398 = wblbNBfYoAVravqLvmrQDfIgq80335259;     wblbNBfYoAVravqLvmrQDfIgq80335259 = wblbNBfYoAVravqLvmrQDfIgq56691074;     wblbNBfYoAVravqLvmrQDfIgq56691074 = wblbNBfYoAVravqLvmrQDfIgq91771257;     wblbNBfYoAVravqLvmrQDfIgq91771257 = wblbNBfYoAVravqLvmrQDfIgq47348350;     wblbNBfYoAVravqLvmrQDfIgq47348350 = wblbNBfYoAVravqLvmrQDfIgq78664063;     wblbNBfYoAVravqLvmrQDfIgq78664063 = wblbNBfYoAVravqLvmrQDfIgq2467940;     wblbNBfYoAVravqLvmrQDfIgq2467940 = wblbNBfYoAVravqLvmrQDfIgq10817949;     wblbNBfYoAVravqLvmrQDfIgq10817949 = wblbNBfYoAVravqLvmrQDfIgq3619148;     wblbNBfYoAVravqLvmrQDfIgq3619148 = wblbNBfYoAVravqLvmrQDfIgq63691112;     wblbNBfYoAVravqLvmrQDfIgq63691112 = wblbNBfYoAVravqLvmrQDfIgq95553975;     wblbNBfYoAVravqLvmrQDfIgq95553975 = wblbNBfYoAVravqLvmrQDfIgq58324861;     wblbNBfYoAVravqLvmrQDfIgq58324861 = wblbNBfYoAVravqLvmrQDfIgq29789351;     wblbNBfYoAVravqLvmrQDfIgq29789351 = wblbNBfYoAVravqLvmrQDfIgq88947512;     wblbNBfYoAVravqLvmrQDfIgq88947512 = wblbNBfYoAVravqLvmrQDfIgq93109816;     wblbNBfYoAVravqLvmrQDfIgq93109816 = wblbNBfYoAVravqLvmrQDfIgq13097228;     wblbNBfYoAVravqLvmrQDfIgq13097228 = wblbNBfYoAVravqLvmrQDfIgq59238186;     wblbNBfYoAVravqLvmrQDfIgq59238186 = wblbNBfYoAVravqLvmrQDfIgq25553974;     wblbNBfYoAVravqLvmrQDfIgq25553974 = wblbNBfYoAVravqLvmrQDfIgq80424949;     wblbNBfYoAVravqLvmrQDfIgq80424949 = wblbNBfYoAVravqLvmrQDfIgq36560025;     wblbNBfYoAVravqLvmrQDfIgq36560025 = wblbNBfYoAVravqLvmrQDfIgq19923326;     wblbNBfYoAVravqLvmrQDfIgq19923326 = wblbNBfYoAVravqLvmrQDfIgq26547307;     wblbNBfYoAVravqLvmrQDfIgq26547307 = wblbNBfYoAVravqLvmrQDfIgq73980315;     wblbNBfYoAVravqLvmrQDfIgq73980315 = wblbNBfYoAVravqLvmrQDfIgq48881098;     wblbNBfYoAVravqLvmrQDfIgq48881098 = wblbNBfYoAVravqLvmrQDfIgq986537;     wblbNBfYoAVravqLvmrQDfIgq986537 = wblbNBfYoAVravqLvmrQDfIgq12486400;     wblbNBfYoAVravqLvmrQDfIgq12486400 = wblbNBfYoAVravqLvmrQDfIgq97639343;     wblbNBfYoAVravqLvmrQDfIgq97639343 = wblbNBfYoAVravqLvmrQDfIgq22288339;     wblbNBfYoAVravqLvmrQDfIgq22288339 = wblbNBfYoAVravqLvmrQDfIgq86136515;     wblbNBfYoAVravqLvmrQDfIgq86136515 = wblbNBfYoAVravqLvmrQDfIgq37258383;     wblbNBfYoAVravqLvmrQDfIgq37258383 = wblbNBfYoAVravqLvmrQDfIgq67739059;     wblbNBfYoAVravqLvmrQDfIgq67739059 = wblbNBfYoAVravqLvmrQDfIgq28351442;     wblbNBfYoAVravqLvmrQDfIgq28351442 = wblbNBfYoAVravqLvmrQDfIgq80552012;     wblbNBfYoAVravqLvmrQDfIgq80552012 = wblbNBfYoAVravqLvmrQDfIgq14114740;     wblbNBfYoAVravqLvmrQDfIgq14114740 = wblbNBfYoAVravqLvmrQDfIgq16595719;     wblbNBfYoAVravqLvmrQDfIgq16595719 = wblbNBfYoAVravqLvmrQDfIgq82327590;     wblbNBfYoAVravqLvmrQDfIgq82327590 = wblbNBfYoAVravqLvmrQDfIgq72739395;     wblbNBfYoAVravqLvmrQDfIgq72739395 = wblbNBfYoAVravqLvmrQDfIgq80139081;     wblbNBfYoAVravqLvmrQDfIgq80139081 = wblbNBfYoAVravqLvmrQDfIgq74107084;     wblbNBfYoAVravqLvmrQDfIgq74107084 = wblbNBfYoAVravqLvmrQDfIgq47318706;     wblbNBfYoAVravqLvmrQDfIgq47318706 = wblbNBfYoAVravqLvmrQDfIgq93433257;     wblbNBfYoAVravqLvmrQDfIgq93433257 = wblbNBfYoAVravqLvmrQDfIgq99780574;     wblbNBfYoAVravqLvmrQDfIgq99780574 = wblbNBfYoAVravqLvmrQDfIgq26572833;     wblbNBfYoAVravqLvmrQDfIgq26572833 = wblbNBfYoAVravqLvmrQDfIgq69353624;     wblbNBfYoAVravqLvmrQDfIgq69353624 = wblbNBfYoAVravqLvmrQDfIgq16466381;     wblbNBfYoAVravqLvmrQDfIgq16466381 = wblbNBfYoAVravqLvmrQDfIgq1212412;     wblbNBfYoAVravqLvmrQDfIgq1212412 = wblbNBfYoAVravqLvmrQDfIgq50834899;     wblbNBfYoAVravqLvmrQDfIgq50834899 = wblbNBfYoAVravqLvmrQDfIgq67645875;     wblbNBfYoAVravqLvmrQDfIgq67645875 = wblbNBfYoAVravqLvmrQDfIgq38611822;     wblbNBfYoAVravqLvmrQDfIgq38611822 = wblbNBfYoAVravqLvmrQDfIgq42246567;     wblbNBfYoAVravqLvmrQDfIgq42246567 = wblbNBfYoAVravqLvmrQDfIgq98534882;     wblbNBfYoAVravqLvmrQDfIgq98534882 = wblbNBfYoAVravqLvmrQDfIgq13745017;     wblbNBfYoAVravqLvmrQDfIgq13745017 = wblbNBfYoAVravqLvmrQDfIgq5115537;     wblbNBfYoAVravqLvmrQDfIgq5115537 = wblbNBfYoAVravqLvmrQDfIgq30948037;     wblbNBfYoAVravqLvmrQDfIgq30948037 = wblbNBfYoAVravqLvmrQDfIgq84139753;     wblbNBfYoAVravqLvmrQDfIgq84139753 = wblbNBfYoAVravqLvmrQDfIgq5906092;     wblbNBfYoAVravqLvmrQDfIgq5906092 = wblbNBfYoAVravqLvmrQDfIgq6354944;     wblbNBfYoAVravqLvmrQDfIgq6354944 = wblbNBfYoAVravqLvmrQDfIgq7809977;     wblbNBfYoAVravqLvmrQDfIgq7809977 = wblbNBfYoAVravqLvmrQDfIgq90784720;     wblbNBfYoAVravqLvmrQDfIgq90784720 = wblbNBfYoAVravqLvmrQDfIgq34861951;     wblbNBfYoAVravqLvmrQDfIgq34861951 = wblbNBfYoAVravqLvmrQDfIgq81024720;     wblbNBfYoAVravqLvmrQDfIgq81024720 = wblbNBfYoAVravqLvmrQDfIgq80179600;     wblbNBfYoAVravqLvmrQDfIgq80179600 = wblbNBfYoAVravqLvmrQDfIgq24681434;     wblbNBfYoAVravqLvmrQDfIgq24681434 = wblbNBfYoAVravqLvmrQDfIgq66360765;     wblbNBfYoAVravqLvmrQDfIgq66360765 = wblbNBfYoAVravqLvmrQDfIgq95952052;     wblbNBfYoAVravqLvmrQDfIgq95952052 = wblbNBfYoAVravqLvmrQDfIgq67202534;     wblbNBfYoAVravqLvmrQDfIgq67202534 = wblbNBfYoAVravqLvmrQDfIgq77772848;     wblbNBfYoAVravqLvmrQDfIgq77772848 = wblbNBfYoAVravqLvmrQDfIgq15674612;     wblbNBfYoAVravqLvmrQDfIgq15674612 = wblbNBfYoAVravqLvmrQDfIgq72351793;     wblbNBfYoAVravqLvmrQDfIgq72351793 = wblbNBfYoAVravqLvmrQDfIgq10782227;     wblbNBfYoAVravqLvmrQDfIgq10782227 = wblbNBfYoAVravqLvmrQDfIgq40357833;     wblbNBfYoAVravqLvmrQDfIgq40357833 = wblbNBfYoAVravqLvmrQDfIgq79099104;     wblbNBfYoAVravqLvmrQDfIgq79099104 = wblbNBfYoAVravqLvmrQDfIgq51446890;     wblbNBfYoAVravqLvmrQDfIgq51446890 = wblbNBfYoAVravqLvmrQDfIgq33106243;     wblbNBfYoAVravqLvmrQDfIgq33106243 = wblbNBfYoAVravqLvmrQDfIgq43126768;     wblbNBfYoAVravqLvmrQDfIgq43126768 = wblbNBfYoAVravqLvmrQDfIgq20142752;     wblbNBfYoAVravqLvmrQDfIgq20142752 = wblbNBfYoAVravqLvmrQDfIgq99974473;     wblbNBfYoAVravqLvmrQDfIgq99974473 = wblbNBfYoAVravqLvmrQDfIgq4626691;     wblbNBfYoAVravqLvmrQDfIgq4626691 = wblbNBfYoAVravqLvmrQDfIgq32414717;     wblbNBfYoAVravqLvmrQDfIgq32414717 = wblbNBfYoAVravqLvmrQDfIgq99774125;     wblbNBfYoAVravqLvmrQDfIgq99774125 = wblbNBfYoAVravqLvmrQDfIgq61651500;     wblbNBfYoAVravqLvmrQDfIgq61651500 = wblbNBfYoAVravqLvmrQDfIgq29993468;     wblbNBfYoAVravqLvmrQDfIgq29993468 = wblbNBfYoAVravqLvmrQDfIgq83676516;     wblbNBfYoAVravqLvmrQDfIgq83676516 = wblbNBfYoAVravqLvmrQDfIgq43889948;     wblbNBfYoAVravqLvmrQDfIgq43889948 = wblbNBfYoAVravqLvmrQDfIgq38723501;     wblbNBfYoAVravqLvmrQDfIgq38723501 = wblbNBfYoAVravqLvmrQDfIgq53994043;     wblbNBfYoAVravqLvmrQDfIgq53994043 = wblbNBfYoAVravqLvmrQDfIgq23235905;     wblbNBfYoAVravqLvmrQDfIgq23235905 = wblbNBfYoAVravqLvmrQDfIgq49603975;     wblbNBfYoAVravqLvmrQDfIgq49603975 = wblbNBfYoAVravqLvmrQDfIgq29974986;     wblbNBfYoAVravqLvmrQDfIgq29974986 = wblbNBfYoAVravqLvmrQDfIgq10689628;     wblbNBfYoAVravqLvmrQDfIgq10689628 = wblbNBfYoAVravqLvmrQDfIgq75972646;     wblbNBfYoAVravqLvmrQDfIgq75972646 = wblbNBfYoAVravqLvmrQDfIgq64929418;     wblbNBfYoAVravqLvmrQDfIgq64929418 = wblbNBfYoAVravqLvmrQDfIgq89354360;     wblbNBfYoAVravqLvmrQDfIgq89354360 = wblbNBfYoAVravqLvmrQDfIgq39245134;     wblbNBfYoAVravqLvmrQDfIgq39245134 = wblbNBfYoAVravqLvmrQDfIgq66293986;     wblbNBfYoAVravqLvmrQDfIgq66293986 = wblbNBfYoAVravqLvmrQDfIgq57773069;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qMfkpsAWkrMmhYQIIZBEWMkJJNrvOsAepPGdKYxNguaKkEwxmtmtDwndb70392863() {     long VabBFHsqixSRmykbnXcmaZFRt63890175 = -966111663;    long VabBFHsqixSRmykbnXcmaZFRt82672270 = -983509235;    long VabBFHsqixSRmykbnXcmaZFRt1582670 = -488500171;    long VabBFHsqixSRmykbnXcmaZFRt94582843 = -383331342;    long VabBFHsqixSRmykbnXcmaZFRt72958567 = -978747557;    long VabBFHsqixSRmykbnXcmaZFRt23870600 = 93338957;    long VabBFHsqixSRmykbnXcmaZFRt40824225 = -752201817;    long VabBFHsqixSRmykbnXcmaZFRt6450966 = -238639013;    long VabBFHsqixSRmykbnXcmaZFRt56413753 = -461907113;    long VabBFHsqixSRmykbnXcmaZFRt88578009 = -208199400;    long VabBFHsqixSRmykbnXcmaZFRt38774354 = -663644033;    long VabBFHsqixSRmykbnXcmaZFRt34290982 = -759126808;    long VabBFHsqixSRmykbnXcmaZFRt97027067 = -647788858;    long VabBFHsqixSRmykbnXcmaZFRt86762824 = -566204608;    long VabBFHsqixSRmykbnXcmaZFRt59433539 = -986495145;    long VabBFHsqixSRmykbnXcmaZFRt37059370 = -907751749;    long VabBFHsqixSRmykbnXcmaZFRt52160864 = -497534325;    long VabBFHsqixSRmykbnXcmaZFRt26842504 = -936174784;    long VabBFHsqixSRmykbnXcmaZFRt50777354 = -404652548;    long VabBFHsqixSRmykbnXcmaZFRt73659981 = -551587968;    long VabBFHsqixSRmykbnXcmaZFRt1650422 = -294143685;    long VabBFHsqixSRmykbnXcmaZFRt45759210 = -946395798;    long VabBFHsqixSRmykbnXcmaZFRt61144766 = -957811148;    long VabBFHsqixSRmykbnXcmaZFRt64417323 = -918295083;    long VabBFHsqixSRmykbnXcmaZFRt80259675 = -911657924;    long VabBFHsqixSRmykbnXcmaZFRt44645001 = -395022401;    long VabBFHsqixSRmykbnXcmaZFRt25007085 = -590804600;    long VabBFHsqixSRmykbnXcmaZFRt87087440 = -123233072;    long VabBFHsqixSRmykbnXcmaZFRt15013354 = -544098873;    long VabBFHsqixSRmykbnXcmaZFRt69602173 = -434565488;    long VabBFHsqixSRmykbnXcmaZFRt4728949 = -83608383;    long VabBFHsqixSRmykbnXcmaZFRt95249965 = -822254631;    long VabBFHsqixSRmykbnXcmaZFRt31999287 = -758394051;    long VabBFHsqixSRmykbnXcmaZFRt80967079 = -16606941;    long VabBFHsqixSRmykbnXcmaZFRt98733034 = -210128883;    long VabBFHsqixSRmykbnXcmaZFRt36464973 = -718546390;    long VabBFHsqixSRmykbnXcmaZFRt9613377 = -516249412;    long VabBFHsqixSRmykbnXcmaZFRt14642225 = -428029704;    long VabBFHsqixSRmykbnXcmaZFRt87724993 = -79263928;    long VabBFHsqixSRmykbnXcmaZFRt4097657 = -633759036;    long VabBFHsqixSRmykbnXcmaZFRt87996814 = -773870551;    long VabBFHsqixSRmykbnXcmaZFRt4889853 = -888449029;    long VabBFHsqixSRmykbnXcmaZFRt58206060 = -466488454;    long VabBFHsqixSRmykbnXcmaZFRt61514825 = -557329586;    long VabBFHsqixSRmykbnXcmaZFRt59271171 = -449733202;    long VabBFHsqixSRmykbnXcmaZFRt5372453 = 23438960;    long VabBFHsqixSRmykbnXcmaZFRt17559149 = -555282815;    long VabBFHsqixSRmykbnXcmaZFRt34529774 = -330285766;    long VabBFHsqixSRmykbnXcmaZFRt79029353 = -359979164;    long VabBFHsqixSRmykbnXcmaZFRt29378034 = 65327296;    long VabBFHsqixSRmykbnXcmaZFRt36913090 = -25605351;    long VabBFHsqixSRmykbnXcmaZFRt61644618 = -915850576;    long VabBFHsqixSRmykbnXcmaZFRt15894333 = -810008170;    long VabBFHsqixSRmykbnXcmaZFRt34580703 = -594088628;    long VabBFHsqixSRmykbnXcmaZFRt68742442 = -432641707;    long VabBFHsqixSRmykbnXcmaZFRt18130966 = 80284135;    long VabBFHsqixSRmykbnXcmaZFRt21527505 = 74301912;    long VabBFHsqixSRmykbnXcmaZFRt37165346 = -570205089;    long VabBFHsqixSRmykbnXcmaZFRt14323168 = -471673419;    long VabBFHsqixSRmykbnXcmaZFRt28313567 = -483725157;    long VabBFHsqixSRmykbnXcmaZFRt98863515 = -315856443;    long VabBFHsqixSRmykbnXcmaZFRt53736785 = -528968746;    long VabBFHsqixSRmykbnXcmaZFRt91437612 = -694540140;    long VabBFHsqixSRmykbnXcmaZFRt86811579 = 72658375;    long VabBFHsqixSRmykbnXcmaZFRt83849060 = -24591017;    long VabBFHsqixSRmykbnXcmaZFRt43524389 = -841389402;    long VabBFHsqixSRmykbnXcmaZFRt2291695 = 99267242;    long VabBFHsqixSRmykbnXcmaZFRt16059988 = -531181917;    long VabBFHsqixSRmykbnXcmaZFRt88029789 = -256075725;    long VabBFHsqixSRmykbnXcmaZFRt22968567 = -167948755;    long VabBFHsqixSRmykbnXcmaZFRt27445994 = -291502338;    long VabBFHsqixSRmykbnXcmaZFRt37518639 = 30495378;    long VabBFHsqixSRmykbnXcmaZFRt39117511 = -756910857;    long VabBFHsqixSRmykbnXcmaZFRt46679698 = -770893513;    long VabBFHsqixSRmykbnXcmaZFRt85663167 = -777717418;    long VabBFHsqixSRmykbnXcmaZFRt96760568 = -405694657;    long VabBFHsqixSRmykbnXcmaZFRt87553150 = -379907345;    long VabBFHsqixSRmykbnXcmaZFRt99629941 = -300481562;    long VabBFHsqixSRmykbnXcmaZFRt5146152 = -368561881;    long VabBFHsqixSRmykbnXcmaZFRt74887223 = -835096884;    long VabBFHsqixSRmykbnXcmaZFRt27085853 = -839739587;    long VabBFHsqixSRmykbnXcmaZFRt90477310 = -160518835;    long VabBFHsqixSRmykbnXcmaZFRt8058087 = -763253909;    long VabBFHsqixSRmykbnXcmaZFRt85635319 = -509426170;    long VabBFHsqixSRmykbnXcmaZFRt32689084 = -308960138;    long VabBFHsqixSRmykbnXcmaZFRt43084330 = -167757808;    long VabBFHsqixSRmykbnXcmaZFRt79355632 = 87753538;    long VabBFHsqixSRmykbnXcmaZFRt97418584 = -64305423;    long VabBFHsqixSRmykbnXcmaZFRt12224638 = -583965235;    long VabBFHsqixSRmykbnXcmaZFRt80602069 = -190413018;    long VabBFHsqixSRmykbnXcmaZFRt14937469 = -692848303;    long VabBFHsqixSRmykbnXcmaZFRt72448030 = -946044323;    long VabBFHsqixSRmykbnXcmaZFRt319058 = -956356285;    long VabBFHsqixSRmykbnXcmaZFRt59411427 = -595538772;    long VabBFHsqixSRmykbnXcmaZFRt5234141 = -217902593;    long VabBFHsqixSRmykbnXcmaZFRt34260030 = -144901806;    long VabBFHsqixSRmykbnXcmaZFRt13452240 = -93908889;    long VabBFHsqixSRmykbnXcmaZFRt71394480 = -439146829;    long VabBFHsqixSRmykbnXcmaZFRt77665764 = -432738569;    long VabBFHsqixSRmykbnXcmaZFRt15746783 = -966111663;     VabBFHsqixSRmykbnXcmaZFRt63890175 = VabBFHsqixSRmykbnXcmaZFRt82672270;     VabBFHsqixSRmykbnXcmaZFRt82672270 = VabBFHsqixSRmykbnXcmaZFRt1582670;     VabBFHsqixSRmykbnXcmaZFRt1582670 = VabBFHsqixSRmykbnXcmaZFRt94582843;     VabBFHsqixSRmykbnXcmaZFRt94582843 = VabBFHsqixSRmykbnXcmaZFRt72958567;     VabBFHsqixSRmykbnXcmaZFRt72958567 = VabBFHsqixSRmykbnXcmaZFRt23870600;     VabBFHsqixSRmykbnXcmaZFRt23870600 = VabBFHsqixSRmykbnXcmaZFRt40824225;     VabBFHsqixSRmykbnXcmaZFRt40824225 = VabBFHsqixSRmykbnXcmaZFRt6450966;     VabBFHsqixSRmykbnXcmaZFRt6450966 = VabBFHsqixSRmykbnXcmaZFRt56413753;     VabBFHsqixSRmykbnXcmaZFRt56413753 = VabBFHsqixSRmykbnXcmaZFRt88578009;     VabBFHsqixSRmykbnXcmaZFRt88578009 = VabBFHsqixSRmykbnXcmaZFRt38774354;     VabBFHsqixSRmykbnXcmaZFRt38774354 = VabBFHsqixSRmykbnXcmaZFRt34290982;     VabBFHsqixSRmykbnXcmaZFRt34290982 = VabBFHsqixSRmykbnXcmaZFRt97027067;     VabBFHsqixSRmykbnXcmaZFRt97027067 = VabBFHsqixSRmykbnXcmaZFRt86762824;     VabBFHsqixSRmykbnXcmaZFRt86762824 = VabBFHsqixSRmykbnXcmaZFRt59433539;     VabBFHsqixSRmykbnXcmaZFRt59433539 = VabBFHsqixSRmykbnXcmaZFRt37059370;     VabBFHsqixSRmykbnXcmaZFRt37059370 = VabBFHsqixSRmykbnXcmaZFRt52160864;     VabBFHsqixSRmykbnXcmaZFRt52160864 = VabBFHsqixSRmykbnXcmaZFRt26842504;     VabBFHsqixSRmykbnXcmaZFRt26842504 = VabBFHsqixSRmykbnXcmaZFRt50777354;     VabBFHsqixSRmykbnXcmaZFRt50777354 = VabBFHsqixSRmykbnXcmaZFRt73659981;     VabBFHsqixSRmykbnXcmaZFRt73659981 = VabBFHsqixSRmykbnXcmaZFRt1650422;     VabBFHsqixSRmykbnXcmaZFRt1650422 = VabBFHsqixSRmykbnXcmaZFRt45759210;     VabBFHsqixSRmykbnXcmaZFRt45759210 = VabBFHsqixSRmykbnXcmaZFRt61144766;     VabBFHsqixSRmykbnXcmaZFRt61144766 = VabBFHsqixSRmykbnXcmaZFRt64417323;     VabBFHsqixSRmykbnXcmaZFRt64417323 = VabBFHsqixSRmykbnXcmaZFRt80259675;     VabBFHsqixSRmykbnXcmaZFRt80259675 = VabBFHsqixSRmykbnXcmaZFRt44645001;     VabBFHsqixSRmykbnXcmaZFRt44645001 = VabBFHsqixSRmykbnXcmaZFRt25007085;     VabBFHsqixSRmykbnXcmaZFRt25007085 = VabBFHsqixSRmykbnXcmaZFRt87087440;     VabBFHsqixSRmykbnXcmaZFRt87087440 = VabBFHsqixSRmykbnXcmaZFRt15013354;     VabBFHsqixSRmykbnXcmaZFRt15013354 = VabBFHsqixSRmykbnXcmaZFRt69602173;     VabBFHsqixSRmykbnXcmaZFRt69602173 = VabBFHsqixSRmykbnXcmaZFRt4728949;     VabBFHsqixSRmykbnXcmaZFRt4728949 = VabBFHsqixSRmykbnXcmaZFRt95249965;     VabBFHsqixSRmykbnXcmaZFRt95249965 = VabBFHsqixSRmykbnXcmaZFRt31999287;     VabBFHsqixSRmykbnXcmaZFRt31999287 = VabBFHsqixSRmykbnXcmaZFRt80967079;     VabBFHsqixSRmykbnXcmaZFRt80967079 = VabBFHsqixSRmykbnXcmaZFRt98733034;     VabBFHsqixSRmykbnXcmaZFRt98733034 = VabBFHsqixSRmykbnXcmaZFRt36464973;     VabBFHsqixSRmykbnXcmaZFRt36464973 = VabBFHsqixSRmykbnXcmaZFRt9613377;     VabBFHsqixSRmykbnXcmaZFRt9613377 = VabBFHsqixSRmykbnXcmaZFRt14642225;     VabBFHsqixSRmykbnXcmaZFRt14642225 = VabBFHsqixSRmykbnXcmaZFRt87724993;     VabBFHsqixSRmykbnXcmaZFRt87724993 = VabBFHsqixSRmykbnXcmaZFRt4097657;     VabBFHsqixSRmykbnXcmaZFRt4097657 = VabBFHsqixSRmykbnXcmaZFRt87996814;     VabBFHsqixSRmykbnXcmaZFRt87996814 = VabBFHsqixSRmykbnXcmaZFRt4889853;     VabBFHsqixSRmykbnXcmaZFRt4889853 = VabBFHsqixSRmykbnXcmaZFRt58206060;     VabBFHsqixSRmykbnXcmaZFRt58206060 = VabBFHsqixSRmykbnXcmaZFRt61514825;     VabBFHsqixSRmykbnXcmaZFRt61514825 = VabBFHsqixSRmykbnXcmaZFRt59271171;     VabBFHsqixSRmykbnXcmaZFRt59271171 = VabBFHsqixSRmykbnXcmaZFRt5372453;     VabBFHsqixSRmykbnXcmaZFRt5372453 = VabBFHsqixSRmykbnXcmaZFRt17559149;     VabBFHsqixSRmykbnXcmaZFRt17559149 = VabBFHsqixSRmykbnXcmaZFRt34529774;     VabBFHsqixSRmykbnXcmaZFRt34529774 = VabBFHsqixSRmykbnXcmaZFRt79029353;     VabBFHsqixSRmykbnXcmaZFRt79029353 = VabBFHsqixSRmykbnXcmaZFRt29378034;     VabBFHsqixSRmykbnXcmaZFRt29378034 = VabBFHsqixSRmykbnXcmaZFRt36913090;     VabBFHsqixSRmykbnXcmaZFRt36913090 = VabBFHsqixSRmykbnXcmaZFRt61644618;     VabBFHsqixSRmykbnXcmaZFRt61644618 = VabBFHsqixSRmykbnXcmaZFRt15894333;     VabBFHsqixSRmykbnXcmaZFRt15894333 = VabBFHsqixSRmykbnXcmaZFRt34580703;     VabBFHsqixSRmykbnXcmaZFRt34580703 = VabBFHsqixSRmykbnXcmaZFRt68742442;     VabBFHsqixSRmykbnXcmaZFRt68742442 = VabBFHsqixSRmykbnXcmaZFRt18130966;     VabBFHsqixSRmykbnXcmaZFRt18130966 = VabBFHsqixSRmykbnXcmaZFRt21527505;     VabBFHsqixSRmykbnXcmaZFRt21527505 = VabBFHsqixSRmykbnXcmaZFRt37165346;     VabBFHsqixSRmykbnXcmaZFRt37165346 = VabBFHsqixSRmykbnXcmaZFRt14323168;     VabBFHsqixSRmykbnXcmaZFRt14323168 = VabBFHsqixSRmykbnXcmaZFRt28313567;     VabBFHsqixSRmykbnXcmaZFRt28313567 = VabBFHsqixSRmykbnXcmaZFRt98863515;     VabBFHsqixSRmykbnXcmaZFRt98863515 = VabBFHsqixSRmykbnXcmaZFRt53736785;     VabBFHsqixSRmykbnXcmaZFRt53736785 = VabBFHsqixSRmykbnXcmaZFRt91437612;     VabBFHsqixSRmykbnXcmaZFRt91437612 = VabBFHsqixSRmykbnXcmaZFRt86811579;     VabBFHsqixSRmykbnXcmaZFRt86811579 = VabBFHsqixSRmykbnXcmaZFRt83849060;     VabBFHsqixSRmykbnXcmaZFRt83849060 = VabBFHsqixSRmykbnXcmaZFRt43524389;     VabBFHsqixSRmykbnXcmaZFRt43524389 = VabBFHsqixSRmykbnXcmaZFRt2291695;     VabBFHsqixSRmykbnXcmaZFRt2291695 = VabBFHsqixSRmykbnXcmaZFRt16059988;     VabBFHsqixSRmykbnXcmaZFRt16059988 = VabBFHsqixSRmykbnXcmaZFRt88029789;     VabBFHsqixSRmykbnXcmaZFRt88029789 = VabBFHsqixSRmykbnXcmaZFRt22968567;     VabBFHsqixSRmykbnXcmaZFRt22968567 = VabBFHsqixSRmykbnXcmaZFRt27445994;     VabBFHsqixSRmykbnXcmaZFRt27445994 = VabBFHsqixSRmykbnXcmaZFRt37518639;     VabBFHsqixSRmykbnXcmaZFRt37518639 = VabBFHsqixSRmykbnXcmaZFRt39117511;     VabBFHsqixSRmykbnXcmaZFRt39117511 = VabBFHsqixSRmykbnXcmaZFRt46679698;     VabBFHsqixSRmykbnXcmaZFRt46679698 = VabBFHsqixSRmykbnXcmaZFRt85663167;     VabBFHsqixSRmykbnXcmaZFRt85663167 = VabBFHsqixSRmykbnXcmaZFRt96760568;     VabBFHsqixSRmykbnXcmaZFRt96760568 = VabBFHsqixSRmykbnXcmaZFRt87553150;     VabBFHsqixSRmykbnXcmaZFRt87553150 = VabBFHsqixSRmykbnXcmaZFRt99629941;     VabBFHsqixSRmykbnXcmaZFRt99629941 = VabBFHsqixSRmykbnXcmaZFRt5146152;     VabBFHsqixSRmykbnXcmaZFRt5146152 = VabBFHsqixSRmykbnXcmaZFRt74887223;     VabBFHsqixSRmykbnXcmaZFRt74887223 = VabBFHsqixSRmykbnXcmaZFRt27085853;     VabBFHsqixSRmykbnXcmaZFRt27085853 = VabBFHsqixSRmykbnXcmaZFRt90477310;     VabBFHsqixSRmykbnXcmaZFRt90477310 = VabBFHsqixSRmykbnXcmaZFRt8058087;     VabBFHsqixSRmykbnXcmaZFRt8058087 = VabBFHsqixSRmykbnXcmaZFRt85635319;     VabBFHsqixSRmykbnXcmaZFRt85635319 = VabBFHsqixSRmykbnXcmaZFRt32689084;     VabBFHsqixSRmykbnXcmaZFRt32689084 = VabBFHsqixSRmykbnXcmaZFRt43084330;     VabBFHsqixSRmykbnXcmaZFRt43084330 = VabBFHsqixSRmykbnXcmaZFRt79355632;     VabBFHsqixSRmykbnXcmaZFRt79355632 = VabBFHsqixSRmykbnXcmaZFRt97418584;     VabBFHsqixSRmykbnXcmaZFRt97418584 = VabBFHsqixSRmykbnXcmaZFRt12224638;     VabBFHsqixSRmykbnXcmaZFRt12224638 = VabBFHsqixSRmykbnXcmaZFRt80602069;     VabBFHsqixSRmykbnXcmaZFRt80602069 = VabBFHsqixSRmykbnXcmaZFRt14937469;     VabBFHsqixSRmykbnXcmaZFRt14937469 = VabBFHsqixSRmykbnXcmaZFRt72448030;     VabBFHsqixSRmykbnXcmaZFRt72448030 = VabBFHsqixSRmykbnXcmaZFRt319058;     VabBFHsqixSRmykbnXcmaZFRt319058 = VabBFHsqixSRmykbnXcmaZFRt59411427;     VabBFHsqixSRmykbnXcmaZFRt59411427 = VabBFHsqixSRmykbnXcmaZFRt5234141;     VabBFHsqixSRmykbnXcmaZFRt5234141 = VabBFHsqixSRmykbnXcmaZFRt34260030;     VabBFHsqixSRmykbnXcmaZFRt34260030 = VabBFHsqixSRmykbnXcmaZFRt13452240;     VabBFHsqixSRmykbnXcmaZFRt13452240 = VabBFHsqixSRmykbnXcmaZFRt71394480;     VabBFHsqixSRmykbnXcmaZFRt71394480 = VabBFHsqixSRmykbnXcmaZFRt77665764;     VabBFHsqixSRmykbnXcmaZFRt77665764 = VabBFHsqixSRmykbnXcmaZFRt15746783;     VabBFHsqixSRmykbnXcmaZFRt15746783 = VabBFHsqixSRmykbnXcmaZFRt63890175;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IbMAIivSQTlLRwddMFQJReGbKGcKmbTQnYAoKqlElvtlOYqYCpILhrcdU37684462() {     long lqBGkgpzVYtvoSVULXVkVMlQE99349143 = -332388562;    long lqBGkgpzVYtvoSVULXVkVMlQE95944348 = -864060842;    long lqBGkgpzVYtvoSVULXVkVMlQE38969146 = -154167246;    long lqBGkgpzVYtvoSVULXVkVMlQE66806198 = -204482413;    long lqBGkgpzVYtvoSVULXVkVMlQE29243837 = 15653598;    long lqBGkgpzVYtvoSVULXVkVMlQE60093472 = -169008938;    long lqBGkgpzVYtvoSVULXVkVMlQE51481631 = -596927552;    long lqBGkgpzVYtvoSVULXVkVMlQE68582526 = -982873154;    long lqBGkgpzVYtvoSVULXVkVMlQE57931358 = -950238520;    long lqBGkgpzVYtvoSVULXVkVMlQE3480722 = -972886398;    long lqBGkgpzVYtvoSVULXVkVMlQE76956089 = -465651763;    long lqBGkgpzVYtvoSVULXVkVMlQE34859130 = -623247580;    long lqBGkgpzVYtvoSVULXVkVMlQE35261713 = -99801363;    long lqBGkgpzVYtvoSVULXVkVMlQE39903688 = -542568017;    long lqBGkgpzVYtvoSVULXVkVMlQE17628056 = -389920160;    long lqBGkgpzVYtvoSVULXVkVMlQE20600671 = -543563356;    long lqBGkgpzVYtvoSVULXVkVMlQE7996800 = 75491122;    long lqBGkgpzVYtvoSVULXVkVMlQE26602696 = 90397147;    long lqBGkgpzVYtvoSVULXVkVMlQE51327684 = -721215970;    long lqBGkgpzVYtvoSVULXVkVMlQE67497200 = -978149034;    long lqBGkgpzVYtvoSVULXVkVMlQE14737284 = 48581626;    long lqBGkgpzVYtvoSVULXVkVMlQE49180735 = 66967908;    long lqBGkgpzVYtvoSVULXVkVMlQE31670146 = -595443332;    long lqBGkgpzVYtvoSVULXVkVMlQE58210268 = -329119687;    long lqBGkgpzVYtvoSVULXVkVMlQE88277626 = -935643122;    long lqBGkgpzVYtvoSVULXVkVMlQE55343172 = -83599207;    long lqBGkgpzVYtvoSVULXVkVMlQE85427658 = -397088741;    long lqBGkgpzVYtvoSVULXVkVMlQE27815865 = -293005247;    long lqBGkgpzVYtvoSVULXVkVMlQE61681568 = -18193676;    long lqBGkgpzVYtvoSVULXVkVMlQE75135584 = -469072658;    long lqBGkgpzVYtvoSVULXVkVMlQE23312181 = -635588870;    long lqBGkgpzVYtvoSVULXVkVMlQE33072984 = -595226046;    long lqBGkgpzVYtvoSVULXVkVMlQE44217298 = -905990028;    long lqBGkgpzVYtvoSVULXVkVMlQE10715506 = -81300755;    long lqBGkgpzVYtvoSVULXVkVMlQE64541488 = -161229134;    long lqBGkgpzVYtvoSVULXVkVMlQE88025816 = -933111696;    long lqBGkgpzVYtvoSVULXVkVMlQE59025193 = -380945452;    long lqBGkgpzVYtvoSVULXVkVMlQE65857628 = -410685285;    long lqBGkgpzVYtvoSVULXVkVMlQE18115555 = -830140204;    long lqBGkgpzVYtvoSVULXVkVMlQE68369188 = -99021582;    long lqBGkgpzVYtvoSVULXVkVMlQE21448422 = -543069465;    long lqBGkgpzVYtvoSVULXVkVMlQE94254978 = -482994320;    long lqBGkgpzVYtvoSVULXVkVMlQE47589438 = -19669240;    long lqBGkgpzVYtvoSVULXVkVMlQE1646163 = -61661996;    long lqBGkgpzVYtvoSVULXVkVMlQE59287630 = -276244364;    long lqBGkgpzVYtvoSVULXVkVMlQE51333781 = -15484672;    long lqBGkgpzVYtvoSVULXVkVMlQE36904312 = 60730825;    long lqBGkgpzVYtvoSVULXVkVMlQE52256086 = -496812359;    long lqBGkgpzVYtvoSVULXVkVMlQE1922020 = -23716044;    long lqBGkgpzVYtvoSVULXVkVMlQE53907623 = -425699520;    long lqBGkgpzVYtvoSVULXVkVMlQE17683814 = -999881908;    long lqBGkgpzVYtvoSVULXVkVMlQE45130091 = -29502922;    long lqBGkgpzVYtvoSVULXVkVMlQE84515481 = -566053724;    long lqBGkgpzVYtvoSVULXVkVMlQE50572549 = -785597128;    long lqBGkgpzVYtvoSVULXVkVMlQE22947178 = -779131853;    long lqBGkgpzVYtvoSVULXVkVMlQE50168409 = -299356471;    long lqBGkgpzVYtvoSVULXVkVMlQE64274203 = -168617510;    long lqBGkgpzVYtvoSVULXVkVMlQE80758878 = -825047560;    long lqBGkgpzVYtvoSVULXVkVMlQE78528571 = -268839292;    long lqBGkgpzVYtvoSVULXVkVMlQE73900664 = -900747195;    long lqBGkgpzVYtvoSVULXVkVMlQE74665813 = -771920198;    long lqBGkgpzVYtvoSVULXVkVMlQE23665766 = -203922305;    long lqBGkgpzVYtvoSVULXVkVMlQE6900959 = -864679478;    long lqBGkgpzVYtvoSVULXVkVMlQE82795773 = -381165862;    long lqBGkgpzVYtvoSVULXVkVMlQE80168541 = -237297528;    long lqBGkgpzVYtvoSVULXVkVMlQE43883105 = -870425717;    long lqBGkgpzVYtvoSVULXVkVMlQE90641831 = -717257552;    long lqBGkgpzVYtvoSVULXVkVMlQE24546207 = 81499391;    long lqBGkgpzVYtvoSVULXVkVMlQE75362199 = -281338883;    long lqBGkgpzVYtvoSVULXVkVMlQE29602239 = -456808464;    long lqBGkgpzVYtvoSVULXVkVMlQE61575478 = -62617905;    long lqBGkgpzVYtvoSVULXVkVMlQE42139171 = -513823593;    long lqBGkgpzVYtvoSVULXVkVMlQE8487141 = -79462649;    long lqBGkgpzVYtvoSVULXVkVMlQE82958495 = -522194388;    long lqBGkgpzVYtvoSVULXVkVMlQE46048778 = -335079569;    long lqBGkgpzVYtvoSVULXVkVMlQE20482305 = -468424055;    long lqBGkgpzVYtvoSVULXVkVMlQE1591297 = -913362853;    long lqBGkgpzVYtvoSVULXVkVMlQE30023983 = -433781336;    long lqBGkgpzVYtvoSVULXVkVMlQE98922638 = 47124676;    long lqBGkgpzVYtvoSVULXVkVMlQE36943846 = -820158450;    long lqBGkgpzVYtvoSVULXVkVMlQE18438861 = -44330033;    long lqBGkgpzVYtvoSVULXVkVMlQE33171573 = -900276382;    long lqBGkgpzVYtvoSVULXVkVMlQE25893846 = -169289203;    long lqBGkgpzVYtvoSVULXVkVMlQE7773945 = -592494157;    long lqBGkgpzVYtvoSVULXVkVMlQE57451771 = -469190751;    long lqBGkgpzVYtvoSVULXVkVMlQE78182089 = -506085948;    long lqBGkgpzVYtvoSVULXVkVMlQE48557502 = 70827677;    long lqBGkgpzVYtvoSVULXVkVMlQE93644749 = -20392901;    long lqBGkgpzVYtvoSVULXVkVMlQE87768328 = -302168902;    long lqBGkgpzVYtvoSVULXVkVMlQE14373080 = -861872663;    long lqBGkgpzVYtvoSVULXVkVMlQE23751614 = -664494186;    long lqBGkgpzVYtvoSVULXVkVMlQE78266314 = -555897893;    long lqBGkgpzVYtvoSVULXVkVMlQE87329056 = -41845994;    long lqBGkgpzVYtvoSVULXVkVMlQE44214891 = -929393010;    long lqBGkgpzVYtvoSVULXVkVMlQE93703375 = -327101385;    long lqBGkgpzVYtvoSVULXVkVMlQE97782655 = -239147160;    long lqBGkgpzVYtvoSVULXVkVMlQE87354020 = -618314842;    long lqBGkgpzVYtvoSVULXVkVMlQE64793664 = -638503378;    long lqBGkgpzVYtvoSVULXVkVMlQE21477622 = -824364469;    long lqBGkgpzVYtvoSVULXVkVMlQE15404525 = -332388562;     lqBGkgpzVYtvoSVULXVkVMlQE99349143 = lqBGkgpzVYtvoSVULXVkVMlQE95944348;     lqBGkgpzVYtvoSVULXVkVMlQE95944348 = lqBGkgpzVYtvoSVULXVkVMlQE38969146;     lqBGkgpzVYtvoSVULXVkVMlQE38969146 = lqBGkgpzVYtvoSVULXVkVMlQE66806198;     lqBGkgpzVYtvoSVULXVkVMlQE66806198 = lqBGkgpzVYtvoSVULXVkVMlQE29243837;     lqBGkgpzVYtvoSVULXVkVMlQE29243837 = lqBGkgpzVYtvoSVULXVkVMlQE60093472;     lqBGkgpzVYtvoSVULXVkVMlQE60093472 = lqBGkgpzVYtvoSVULXVkVMlQE51481631;     lqBGkgpzVYtvoSVULXVkVMlQE51481631 = lqBGkgpzVYtvoSVULXVkVMlQE68582526;     lqBGkgpzVYtvoSVULXVkVMlQE68582526 = lqBGkgpzVYtvoSVULXVkVMlQE57931358;     lqBGkgpzVYtvoSVULXVkVMlQE57931358 = lqBGkgpzVYtvoSVULXVkVMlQE3480722;     lqBGkgpzVYtvoSVULXVkVMlQE3480722 = lqBGkgpzVYtvoSVULXVkVMlQE76956089;     lqBGkgpzVYtvoSVULXVkVMlQE76956089 = lqBGkgpzVYtvoSVULXVkVMlQE34859130;     lqBGkgpzVYtvoSVULXVkVMlQE34859130 = lqBGkgpzVYtvoSVULXVkVMlQE35261713;     lqBGkgpzVYtvoSVULXVkVMlQE35261713 = lqBGkgpzVYtvoSVULXVkVMlQE39903688;     lqBGkgpzVYtvoSVULXVkVMlQE39903688 = lqBGkgpzVYtvoSVULXVkVMlQE17628056;     lqBGkgpzVYtvoSVULXVkVMlQE17628056 = lqBGkgpzVYtvoSVULXVkVMlQE20600671;     lqBGkgpzVYtvoSVULXVkVMlQE20600671 = lqBGkgpzVYtvoSVULXVkVMlQE7996800;     lqBGkgpzVYtvoSVULXVkVMlQE7996800 = lqBGkgpzVYtvoSVULXVkVMlQE26602696;     lqBGkgpzVYtvoSVULXVkVMlQE26602696 = lqBGkgpzVYtvoSVULXVkVMlQE51327684;     lqBGkgpzVYtvoSVULXVkVMlQE51327684 = lqBGkgpzVYtvoSVULXVkVMlQE67497200;     lqBGkgpzVYtvoSVULXVkVMlQE67497200 = lqBGkgpzVYtvoSVULXVkVMlQE14737284;     lqBGkgpzVYtvoSVULXVkVMlQE14737284 = lqBGkgpzVYtvoSVULXVkVMlQE49180735;     lqBGkgpzVYtvoSVULXVkVMlQE49180735 = lqBGkgpzVYtvoSVULXVkVMlQE31670146;     lqBGkgpzVYtvoSVULXVkVMlQE31670146 = lqBGkgpzVYtvoSVULXVkVMlQE58210268;     lqBGkgpzVYtvoSVULXVkVMlQE58210268 = lqBGkgpzVYtvoSVULXVkVMlQE88277626;     lqBGkgpzVYtvoSVULXVkVMlQE88277626 = lqBGkgpzVYtvoSVULXVkVMlQE55343172;     lqBGkgpzVYtvoSVULXVkVMlQE55343172 = lqBGkgpzVYtvoSVULXVkVMlQE85427658;     lqBGkgpzVYtvoSVULXVkVMlQE85427658 = lqBGkgpzVYtvoSVULXVkVMlQE27815865;     lqBGkgpzVYtvoSVULXVkVMlQE27815865 = lqBGkgpzVYtvoSVULXVkVMlQE61681568;     lqBGkgpzVYtvoSVULXVkVMlQE61681568 = lqBGkgpzVYtvoSVULXVkVMlQE75135584;     lqBGkgpzVYtvoSVULXVkVMlQE75135584 = lqBGkgpzVYtvoSVULXVkVMlQE23312181;     lqBGkgpzVYtvoSVULXVkVMlQE23312181 = lqBGkgpzVYtvoSVULXVkVMlQE33072984;     lqBGkgpzVYtvoSVULXVkVMlQE33072984 = lqBGkgpzVYtvoSVULXVkVMlQE44217298;     lqBGkgpzVYtvoSVULXVkVMlQE44217298 = lqBGkgpzVYtvoSVULXVkVMlQE10715506;     lqBGkgpzVYtvoSVULXVkVMlQE10715506 = lqBGkgpzVYtvoSVULXVkVMlQE64541488;     lqBGkgpzVYtvoSVULXVkVMlQE64541488 = lqBGkgpzVYtvoSVULXVkVMlQE88025816;     lqBGkgpzVYtvoSVULXVkVMlQE88025816 = lqBGkgpzVYtvoSVULXVkVMlQE59025193;     lqBGkgpzVYtvoSVULXVkVMlQE59025193 = lqBGkgpzVYtvoSVULXVkVMlQE65857628;     lqBGkgpzVYtvoSVULXVkVMlQE65857628 = lqBGkgpzVYtvoSVULXVkVMlQE18115555;     lqBGkgpzVYtvoSVULXVkVMlQE18115555 = lqBGkgpzVYtvoSVULXVkVMlQE68369188;     lqBGkgpzVYtvoSVULXVkVMlQE68369188 = lqBGkgpzVYtvoSVULXVkVMlQE21448422;     lqBGkgpzVYtvoSVULXVkVMlQE21448422 = lqBGkgpzVYtvoSVULXVkVMlQE94254978;     lqBGkgpzVYtvoSVULXVkVMlQE94254978 = lqBGkgpzVYtvoSVULXVkVMlQE47589438;     lqBGkgpzVYtvoSVULXVkVMlQE47589438 = lqBGkgpzVYtvoSVULXVkVMlQE1646163;     lqBGkgpzVYtvoSVULXVkVMlQE1646163 = lqBGkgpzVYtvoSVULXVkVMlQE59287630;     lqBGkgpzVYtvoSVULXVkVMlQE59287630 = lqBGkgpzVYtvoSVULXVkVMlQE51333781;     lqBGkgpzVYtvoSVULXVkVMlQE51333781 = lqBGkgpzVYtvoSVULXVkVMlQE36904312;     lqBGkgpzVYtvoSVULXVkVMlQE36904312 = lqBGkgpzVYtvoSVULXVkVMlQE52256086;     lqBGkgpzVYtvoSVULXVkVMlQE52256086 = lqBGkgpzVYtvoSVULXVkVMlQE1922020;     lqBGkgpzVYtvoSVULXVkVMlQE1922020 = lqBGkgpzVYtvoSVULXVkVMlQE53907623;     lqBGkgpzVYtvoSVULXVkVMlQE53907623 = lqBGkgpzVYtvoSVULXVkVMlQE17683814;     lqBGkgpzVYtvoSVULXVkVMlQE17683814 = lqBGkgpzVYtvoSVULXVkVMlQE45130091;     lqBGkgpzVYtvoSVULXVkVMlQE45130091 = lqBGkgpzVYtvoSVULXVkVMlQE84515481;     lqBGkgpzVYtvoSVULXVkVMlQE84515481 = lqBGkgpzVYtvoSVULXVkVMlQE50572549;     lqBGkgpzVYtvoSVULXVkVMlQE50572549 = lqBGkgpzVYtvoSVULXVkVMlQE22947178;     lqBGkgpzVYtvoSVULXVkVMlQE22947178 = lqBGkgpzVYtvoSVULXVkVMlQE50168409;     lqBGkgpzVYtvoSVULXVkVMlQE50168409 = lqBGkgpzVYtvoSVULXVkVMlQE64274203;     lqBGkgpzVYtvoSVULXVkVMlQE64274203 = lqBGkgpzVYtvoSVULXVkVMlQE80758878;     lqBGkgpzVYtvoSVULXVkVMlQE80758878 = lqBGkgpzVYtvoSVULXVkVMlQE78528571;     lqBGkgpzVYtvoSVULXVkVMlQE78528571 = lqBGkgpzVYtvoSVULXVkVMlQE73900664;     lqBGkgpzVYtvoSVULXVkVMlQE73900664 = lqBGkgpzVYtvoSVULXVkVMlQE74665813;     lqBGkgpzVYtvoSVULXVkVMlQE74665813 = lqBGkgpzVYtvoSVULXVkVMlQE23665766;     lqBGkgpzVYtvoSVULXVkVMlQE23665766 = lqBGkgpzVYtvoSVULXVkVMlQE6900959;     lqBGkgpzVYtvoSVULXVkVMlQE6900959 = lqBGkgpzVYtvoSVULXVkVMlQE82795773;     lqBGkgpzVYtvoSVULXVkVMlQE82795773 = lqBGkgpzVYtvoSVULXVkVMlQE80168541;     lqBGkgpzVYtvoSVULXVkVMlQE80168541 = lqBGkgpzVYtvoSVULXVkVMlQE43883105;     lqBGkgpzVYtvoSVULXVkVMlQE43883105 = lqBGkgpzVYtvoSVULXVkVMlQE90641831;     lqBGkgpzVYtvoSVULXVkVMlQE90641831 = lqBGkgpzVYtvoSVULXVkVMlQE24546207;     lqBGkgpzVYtvoSVULXVkVMlQE24546207 = lqBGkgpzVYtvoSVULXVkVMlQE75362199;     lqBGkgpzVYtvoSVULXVkVMlQE75362199 = lqBGkgpzVYtvoSVULXVkVMlQE29602239;     lqBGkgpzVYtvoSVULXVkVMlQE29602239 = lqBGkgpzVYtvoSVULXVkVMlQE61575478;     lqBGkgpzVYtvoSVULXVkVMlQE61575478 = lqBGkgpzVYtvoSVULXVkVMlQE42139171;     lqBGkgpzVYtvoSVULXVkVMlQE42139171 = lqBGkgpzVYtvoSVULXVkVMlQE8487141;     lqBGkgpzVYtvoSVULXVkVMlQE8487141 = lqBGkgpzVYtvoSVULXVkVMlQE82958495;     lqBGkgpzVYtvoSVULXVkVMlQE82958495 = lqBGkgpzVYtvoSVULXVkVMlQE46048778;     lqBGkgpzVYtvoSVULXVkVMlQE46048778 = lqBGkgpzVYtvoSVULXVkVMlQE20482305;     lqBGkgpzVYtvoSVULXVkVMlQE20482305 = lqBGkgpzVYtvoSVULXVkVMlQE1591297;     lqBGkgpzVYtvoSVULXVkVMlQE1591297 = lqBGkgpzVYtvoSVULXVkVMlQE30023983;     lqBGkgpzVYtvoSVULXVkVMlQE30023983 = lqBGkgpzVYtvoSVULXVkVMlQE98922638;     lqBGkgpzVYtvoSVULXVkVMlQE98922638 = lqBGkgpzVYtvoSVULXVkVMlQE36943846;     lqBGkgpzVYtvoSVULXVkVMlQE36943846 = lqBGkgpzVYtvoSVULXVkVMlQE18438861;     lqBGkgpzVYtvoSVULXVkVMlQE18438861 = lqBGkgpzVYtvoSVULXVkVMlQE33171573;     lqBGkgpzVYtvoSVULXVkVMlQE33171573 = lqBGkgpzVYtvoSVULXVkVMlQE25893846;     lqBGkgpzVYtvoSVULXVkVMlQE25893846 = lqBGkgpzVYtvoSVULXVkVMlQE7773945;     lqBGkgpzVYtvoSVULXVkVMlQE7773945 = lqBGkgpzVYtvoSVULXVkVMlQE57451771;     lqBGkgpzVYtvoSVULXVkVMlQE57451771 = lqBGkgpzVYtvoSVULXVkVMlQE78182089;     lqBGkgpzVYtvoSVULXVkVMlQE78182089 = lqBGkgpzVYtvoSVULXVkVMlQE48557502;     lqBGkgpzVYtvoSVULXVkVMlQE48557502 = lqBGkgpzVYtvoSVULXVkVMlQE93644749;     lqBGkgpzVYtvoSVULXVkVMlQE93644749 = lqBGkgpzVYtvoSVULXVkVMlQE87768328;     lqBGkgpzVYtvoSVULXVkVMlQE87768328 = lqBGkgpzVYtvoSVULXVkVMlQE14373080;     lqBGkgpzVYtvoSVULXVkVMlQE14373080 = lqBGkgpzVYtvoSVULXVkVMlQE23751614;     lqBGkgpzVYtvoSVULXVkVMlQE23751614 = lqBGkgpzVYtvoSVULXVkVMlQE78266314;     lqBGkgpzVYtvoSVULXVkVMlQE78266314 = lqBGkgpzVYtvoSVULXVkVMlQE87329056;     lqBGkgpzVYtvoSVULXVkVMlQE87329056 = lqBGkgpzVYtvoSVULXVkVMlQE44214891;     lqBGkgpzVYtvoSVULXVkVMlQE44214891 = lqBGkgpzVYtvoSVULXVkVMlQE93703375;     lqBGkgpzVYtvoSVULXVkVMlQE93703375 = lqBGkgpzVYtvoSVULXVkVMlQE97782655;     lqBGkgpzVYtvoSVULXVkVMlQE97782655 = lqBGkgpzVYtvoSVULXVkVMlQE87354020;     lqBGkgpzVYtvoSVULXVkVMlQE87354020 = lqBGkgpzVYtvoSVULXVkVMlQE64793664;     lqBGkgpzVYtvoSVULXVkVMlQE64793664 = lqBGkgpzVYtvoSVULXVkVMlQE21477622;     lqBGkgpzVYtvoSVULXVkVMlQE21477622 = lqBGkgpzVYtvoSVULXVkVMlQE15404525;     lqBGkgpzVYtvoSVULXVkVMlQE15404525 = lqBGkgpzVYtvoSVULXVkVMlQE99349143;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rSXfjBibAGNFbWVDuDjWmlmigoBdSwrqvJCBjiqGPOTOHigrPdOnTXwFf52733530() {     long ozuzEIEPWJSUTTLNdGYRXaxHJ5466251 = -444290451;    long ozuzEIEPWJSUTTLNdGYRXaxHJ39317628 = -573660623;    long ozuzEIEPWJSUTTLNdGYRXaxHJ55011329 = -305000167;    long ozuzEIEPWJSUTTLNdGYRXaxHJ93880979 = -395231044;    long ozuzEIEPWJSUTTLNdGYRXaxHJ98139324 = -504996274;    long ozuzEIEPWJSUTTLNdGYRXaxHJ51510674 = -433505173;    long ozuzEIEPWJSUTTLNdGYRXaxHJ11970598 = -735892529;    long ozuzEIEPWJSUTTLNdGYRXaxHJ18342418 = -169747067;    long ozuzEIEPWJSUTTLNdGYRXaxHJ22573854 = -718271185;    long ozuzEIEPWJSUTTLNdGYRXaxHJ44710381 = -201861875;    long ozuzEIEPWJSUTTLNdGYRXaxHJ37066379 = -343089349;    long ozuzEIEPWJSUTTLNdGYRXaxHJ66682172 = 32346218;    long ozuzEIEPWJSUTTLNdGYRXaxHJ21470832 = -539692452;    long ozuzEIEPWJSUTTLNdGYRXaxHJ23047365 = 25193415;    long ozuzEIEPWJSUTTLNdGYRXaxHJ13370483 = 19617674;    long ozuzEIEPWJSUTTLNdGYRXaxHJ62106064 = -516562899;    long ozuzEIEPWJSUTTLNdGYRXaxHJ1832803 = -541053990;    long ozuzEIEPWJSUTTLNdGYRXaxHJ23655849 = -675125496;    long ozuzEIEPWJSUTTLNdGYRXaxHJ13157526 = -26985066;    long ozuzEIEPWJSUTTLNdGYRXaxHJ48047365 = -235051953;    long ozuzEIEPWJSUTTLNdGYRXaxHJ3290478 = -906905830;    long ozuzEIEPWJSUTTLNdGYRXaxHJ35701759 = -940961808;    long ozuzEIEPWJSUTTLNdGYRXaxHJ67260937 = -341960819;    long ozuzEIEPWJSUTTLNdGYRXaxHJ42202642 = -551424675;    long ozuzEIEPWJSUTTLNdGYRXaxHJ31977277 = -208839155;    long ozuzEIEPWJSUTTLNdGYRXaxHJ80064847 = 37745469;    long ozuzEIEPWJSUTTLNdGYRXaxHJ83887436 = -297750944;    long ozuzEIEPWJSUTTLNdGYRXaxHJ40922991 = -358934200;    long ozuzEIEPWJSUTTLNdGYRXaxHJ27813824 = -240576380;    long ozuzEIEPWJSUTTLNdGYRXaxHJ43751221 = -286543526;    long ozuzEIEPWJSUTTLNdGYRXaxHJ15554730 = -548909808;    long ozuzEIEPWJSUTTLNdGYRXaxHJ30683606 = -304672862;    long ozuzEIEPWJSUTTLNdGYRXaxHJ53928247 = -798603398;    long ozuzEIEPWJSUTTLNdGYRXaxHJ5546071 = -932842520;    long ozuzEIEPWJSUTTLNdGYRXaxHJ26016141 = -799962239;    long ozuzEIEPWJSUTTLNdGYRXaxHJ56751730 = -47137804;    long ozuzEIEPWJSUTTLNdGYRXaxHJ40287127 = -334581321;    long ozuzEIEPWJSUTTLNdGYRXaxHJ99947841 = -182191295;    long ozuzEIEPWJSUTTLNdGYRXaxHJ91725808 = -824063701;    long ozuzEIEPWJSUTTLNdGYRXaxHJ55871126 = -572460805;    long ozuzEIEPWJSUTTLNdGYRXaxHJ27117646 = -608343359;    long ozuzEIEPWJSUTTLNdGYRXaxHJ26405436 = -753136598;    long ozuzEIEPWJSUTTLNdGYRXaxHJ25656417 = -100473824;    long ozuzEIEPWJSUTTLNdGYRXaxHJ89053903 = -81004934;    long ozuzEIEPWJSUTTLNdGYRXaxHJ71240095 = 61857482;    long ozuzEIEPWJSUTTLNdGYRXaxHJ63272976 = -700789;    long ozuzEIEPWJSUTTLNdGYRXaxHJ54682886 = -58044713;    long ozuzEIEPWJSUTTLNdGYRXaxHJ60213027 = -506707892;    long ozuzEIEPWJSUTTLNdGYRXaxHJ11597749 = -109453032;    long ozuzEIEPWJSUTTLNdGYRXaxHJ66819276 = -512710328;    long ozuzEIEPWJSUTTLNdGYRXaxHJ53384492 = -842175579;    long ozuzEIEPWJSUTTLNdGYRXaxHJ55939810 = -930229242;    long ozuzEIEPWJSUTTLNdGYRXaxHJ32763939 = -357843312;    long ozuzEIEPWJSUTTLNdGYRXaxHJ46541429 = -6067273;    long ozuzEIEPWJSUTTLNdGYRXaxHJ49443053 = -379663635;    long ozuzEIEPWJSUTTLNdGYRXaxHJ69764492 = -503328643;    long ozuzEIEPWJSUTTLNdGYRXaxHJ72056690 = -131699804;    long ozuzEIEPWJSUTTLNdGYRXaxHJ12808688 = -753575493;    long ozuzEIEPWJSUTTLNdGYRXaxHJ61903702 = -86391889;    long ozuzEIEPWJSUTTLNdGYRXaxHJ18074478 = -442741743;    long ozuzEIEPWJSUTTLNdGYRXaxHJ67623237 = -35754230;    long ozuzEIEPWJSUTTLNdGYRXaxHJ71047606 = -276958329;    long ozuzEIEPWJSUTTLNdGYRXaxHJ90528593 = -929170687;    long ozuzEIEPWJSUTTLNdGYRXaxHJ78822632 = -331727660;    long ozuzEIEPWJSUTTLNdGYRXaxHJ29155651 = -652952068;    long ozuzEIEPWJSUTTLNdGYRXaxHJ6382774 = 61583512;    long ozuzEIEPWJSUTTLNdGYRXaxHJ12753926 = -169050384;    long ozuzEIEPWJSUTTLNdGYRXaxHJ15924762 = -606849932;    long ozuzEIEPWJSUTTLNdGYRXaxHJ97031223 = -174844346;    long ozuzEIEPWJSUTTLNdGYRXaxHJ56618752 = -933244523;    long ozuzEIEPWJSUTTLNdGYRXaxHJ21818937 = -81981578;    long ozuzEIEPWJSUTTLNdGYRXaxHJ1884962 = -258862696;    long ozuzEIEPWJSUTTLNdGYRXaxHJ31930040 = -851061795;    long ozuzEIEPWJSUTTLNdGYRXaxHJ57286399 = -454524262;    long ozuzEIEPWJSUTTLNdGYRXaxHJ20929719 = -626708594;    long ozuzEIEPWJSUTTLNdGYRXaxHJ76885041 = -53769232;    long ozuzEIEPWJSUTTLNdGYRXaxHJ10045342 = -740487985;    long ozuzEIEPWJSUTTLNdGYRXaxHJ78207034 = -160955885;    long ozuzEIEPWJSUTTLNdGYRXaxHJ70962547 = -513282157;    long ozuzEIEPWJSUTTLNdGYRXaxHJ68704301 = -108138367;    long ozuzEIEPWJSUTTLNdGYRXaxHJ25381962 = -904209818;    long ozuzEIEPWJSUTTLNdGYRXaxHJ23674410 = -791043053;    long ozuzEIEPWJSUTTLNdGYRXaxHJ29325242 = -149481169;    long ozuzEIEPWJSUTTLNdGYRXaxHJ60994548 = -727866053;    long ozuzEIEPWJSUTTLNdGYRXaxHJ90366729 = -444367947;    long ozuzEIEPWJSUTTLNdGYRXaxHJ59614919 = -618680566;    long ozuzEIEPWJSUTTLNdGYRXaxHJ97919666 = -946829550;    long ozuzEIEPWJSUTTLNdGYRXaxHJ7386818 = -692536126;    long ozuzEIEPWJSUTTLNdGYRXaxHJ56103017 = -453178885;    long ozuzEIEPWJSUTTLNdGYRXaxHJ56251648 = -196633596;    long ozuzEIEPWJSUTTLNdGYRXaxHJ84695039 = -915438000;    long ozuzEIEPWJSUTTLNdGYRXaxHJ27478440 = -581005829;    long ozuzEIEPWJSUTTLNdGYRXaxHJ38044139 = 4200594;    long ozuzEIEPWJSUTTLNdGYRXaxHJ73651331 = -281321958;    long ozuzEIEPWJSUTTLNdGYRXaxHJ88247888 = -436706575;    long ozuzEIEPWJSUTTLNdGYRXaxHJ56070039 = -231385031;    long ozuzEIEPWJSUTTLNdGYRXaxHJ35876842 = -823965912;    long ozuzEIEPWJSUTTLNdGYRXaxHJ46833784 = -768746164;    long ozuzEIEPWJSUTTLNdGYRXaxHJ59898252 = -428052867;    long ozuzEIEPWJSUTTLNdGYRXaxHJ64857321 = -444290451;     ozuzEIEPWJSUTTLNdGYRXaxHJ5466251 = ozuzEIEPWJSUTTLNdGYRXaxHJ39317628;     ozuzEIEPWJSUTTLNdGYRXaxHJ39317628 = ozuzEIEPWJSUTTLNdGYRXaxHJ55011329;     ozuzEIEPWJSUTTLNdGYRXaxHJ55011329 = ozuzEIEPWJSUTTLNdGYRXaxHJ93880979;     ozuzEIEPWJSUTTLNdGYRXaxHJ93880979 = ozuzEIEPWJSUTTLNdGYRXaxHJ98139324;     ozuzEIEPWJSUTTLNdGYRXaxHJ98139324 = ozuzEIEPWJSUTTLNdGYRXaxHJ51510674;     ozuzEIEPWJSUTTLNdGYRXaxHJ51510674 = ozuzEIEPWJSUTTLNdGYRXaxHJ11970598;     ozuzEIEPWJSUTTLNdGYRXaxHJ11970598 = ozuzEIEPWJSUTTLNdGYRXaxHJ18342418;     ozuzEIEPWJSUTTLNdGYRXaxHJ18342418 = ozuzEIEPWJSUTTLNdGYRXaxHJ22573854;     ozuzEIEPWJSUTTLNdGYRXaxHJ22573854 = ozuzEIEPWJSUTTLNdGYRXaxHJ44710381;     ozuzEIEPWJSUTTLNdGYRXaxHJ44710381 = ozuzEIEPWJSUTTLNdGYRXaxHJ37066379;     ozuzEIEPWJSUTTLNdGYRXaxHJ37066379 = ozuzEIEPWJSUTTLNdGYRXaxHJ66682172;     ozuzEIEPWJSUTTLNdGYRXaxHJ66682172 = ozuzEIEPWJSUTTLNdGYRXaxHJ21470832;     ozuzEIEPWJSUTTLNdGYRXaxHJ21470832 = ozuzEIEPWJSUTTLNdGYRXaxHJ23047365;     ozuzEIEPWJSUTTLNdGYRXaxHJ23047365 = ozuzEIEPWJSUTTLNdGYRXaxHJ13370483;     ozuzEIEPWJSUTTLNdGYRXaxHJ13370483 = ozuzEIEPWJSUTTLNdGYRXaxHJ62106064;     ozuzEIEPWJSUTTLNdGYRXaxHJ62106064 = ozuzEIEPWJSUTTLNdGYRXaxHJ1832803;     ozuzEIEPWJSUTTLNdGYRXaxHJ1832803 = ozuzEIEPWJSUTTLNdGYRXaxHJ23655849;     ozuzEIEPWJSUTTLNdGYRXaxHJ23655849 = ozuzEIEPWJSUTTLNdGYRXaxHJ13157526;     ozuzEIEPWJSUTTLNdGYRXaxHJ13157526 = ozuzEIEPWJSUTTLNdGYRXaxHJ48047365;     ozuzEIEPWJSUTTLNdGYRXaxHJ48047365 = ozuzEIEPWJSUTTLNdGYRXaxHJ3290478;     ozuzEIEPWJSUTTLNdGYRXaxHJ3290478 = ozuzEIEPWJSUTTLNdGYRXaxHJ35701759;     ozuzEIEPWJSUTTLNdGYRXaxHJ35701759 = ozuzEIEPWJSUTTLNdGYRXaxHJ67260937;     ozuzEIEPWJSUTTLNdGYRXaxHJ67260937 = ozuzEIEPWJSUTTLNdGYRXaxHJ42202642;     ozuzEIEPWJSUTTLNdGYRXaxHJ42202642 = ozuzEIEPWJSUTTLNdGYRXaxHJ31977277;     ozuzEIEPWJSUTTLNdGYRXaxHJ31977277 = ozuzEIEPWJSUTTLNdGYRXaxHJ80064847;     ozuzEIEPWJSUTTLNdGYRXaxHJ80064847 = ozuzEIEPWJSUTTLNdGYRXaxHJ83887436;     ozuzEIEPWJSUTTLNdGYRXaxHJ83887436 = ozuzEIEPWJSUTTLNdGYRXaxHJ40922991;     ozuzEIEPWJSUTTLNdGYRXaxHJ40922991 = ozuzEIEPWJSUTTLNdGYRXaxHJ27813824;     ozuzEIEPWJSUTTLNdGYRXaxHJ27813824 = ozuzEIEPWJSUTTLNdGYRXaxHJ43751221;     ozuzEIEPWJSUTTLNdGYRXaxHJ43751221 = ozuzEIEPWJSUTTLNdGYRXaxHJ15554730;     ozuzEIEPWJSUTTLNdGYRXaxHJ15554730 = ozuzEIEPWJSUTTLNdGYRXaxHJ30683606;     ozuzEIEPWJSUTTLNdGYRXaxHJ30683606 = ozuzEIEPWJSUTTLNdGYRXaxHJ53928247;     ozuzEIEPWJSUTTLNdGYRXaxHJ53928247 = ozuzEIEPWJSUTTLNdGYRXaxHJ5546071;     ozuzEIEPWJSUTTLNdGYRXaxHJ5546071 = ozuzEIEPWJSUTTLNdGYRXaxHJ26016141;     ozuzEIEPWJSUTTLNdGYRXaxHJ26016141 = ozuzEIEPWJSUTTLNdGYRXaxHJ56751730;     ozuzEIEPWJSUTTLNdGYRXaxHJ56751730 = ozuzEIEPWJSUTTLNdGYRXaxHJ40287127;     ozuzEIEPWJSUTTLNdGYRXaxHJ40287127 = ozuzEIEPWJSUTTLNdGYRXaxHJ99947841;     ozuzEIEPWJSUTTLNdGYRXaxHJ99947841 = ozuzEIEPWJSUTTLNdGYRXaxHJ91725808;     ozuzEIEPWJSUTTLNdGYRXaxHJ91725808 = ozuzEIEPWJSUTTLNdGYRXaxHJ55871126;     ozuzEIEPWJSUTTLNdGYRXaxHJ55871126 = ozuzEIEPWJSUTTLNdGYRXaxHJ27117646;     ozuzEIEPWJSUTTLNdGYRXaxHJ27117646 = ozuzEIEPWJSUTTLNdGYRXaxHJ26405436;     ozuzEIEPWJSUTTLNdGYRXaxHJ26405436 = ozuzEIEPWJSUTTLNdGYRXaxHJ25656417;     ozuzEIEPWJSUTTLNdGYRXaxHJ25656417 = ozuzEIEPWJSUTTLNdGYRXaxHJ89053903;     ozuzEIEPWJSUTTLNdGYRXaxHJ89053903 = ozuzEIEPWJSUTTLNdGYRXaxHJ71240095;     ozuzEIEPWJSUTTLNdGYRXaxHJ71240095 = ozuzEIEPWJSUTTLNdGYRXaxHJ63272976;     ozuzEIEPWJSUTTLNdGYRXaxHJ63272976 = ozuzEIEPWJSUTTLNdGYRXaxHJ54682886;     ozuzEIEPWJSUTTLNdGYRXaxHJ54682886 = ozuzEIEPWJSUTTLNdGYRXaxHJ60213027;     ozuzEIEPWJSUTTLNdGYRXaxHJ60213027 = ozuzEIEPWJSUTTLNdGYRXaxHJ11597749;     ozuzEIEPWJSUTTLNdGYRXaxHJ11597749 = ozuzEIEPWJSUTTLNdGYRXaxHJ66819276;     ozuzEIEPWJSUTTLNdGYRXaxHJ66819276 = ozuzEIEPWJSUTTLNdGYRXaxHJ53384492;     ozuzEIEPWJSUTTLNdGYRXaxHJ53384492 = ozuzEIEPWJSUTTLNdGYRXaxHJ55939810;     ozuzEIEPWJSUTTLNdGYRXaxHJ55939810 = ozuzEIEPWJSUTTLNdGYRXaxHJ32763939;     ozuzEIEPWJSUTTLNdGYRXaxHJ32763939 = ozuzEIEPWJSUTTLNdGYRXaxHJ46541429;     ozuzEIEPWJSUTTLNdGYRXaxHJ46541429 = ozuzEIEPWJSUTTLNdGYRXaxHJ49443053;     ozuzEIEPWJSUTTLNdGYRXaxHJ49443053 = ozuzEIEPWJSUTTLNdGYRXaxHJ69764492;     ozuzEIEPWJSUTTLNdGYRXaxHJ69764492 = ozuzEIEPWJSUTTLNdGYRXaxHJ72056690;     ozuzEIEPWJSUTTLNdGYRXaxHJ72056690 = ozuzEIEPWJSUTTLNdGYRXaxHJ12808688;     ozuzEIEPWJSUTTLNdGYRXaxHJ12808688 = ozuzEIEPWJSUTTLNdGYRXaxHJ61903702;     ozuzEIEPWJSUTTLNdGYRXaxHJ61903702 = ozuzEIEPWJSUTTLNdGYRXaxHJ18074478;     ozuzEIEPWJSUTTLNdGYRXaxHJ18074478 = ozuzEIEPWJSUTTLNdGYRXaxHJ67623237;     ozuzEIEPWJSUTTLNdGYRXaxHJ67623237 = ozuzEIEPWJSUTTLNdGYRXaxHJ71047606;     ozuzEIEPWJSUTTLNdGYRXaxHJ71047606 = ozuzEIEPWJSUTTLNdGYRXaxHJ90528593;     ozuzEIEPWJSUTTLNdGYRXaxHJ90528593 = ozuzEIEPWJSUTTLNdGYRXaxHJ78822632;     ozuzEIEPWJSUTTLNdGYRXaxHJ78822632 = ozuzEIEPWJSUTTLNdGYRXaxHJ29155651;     ozuzEIEPWJSUTTLNdGYRXaxHJ29155651 = ozuzEIEPWJSUTTLNdGYRXaxHJ6382774;     ozuzEIEPWJSUTTLNdGYRXaxHJ6382774 = ozuzEIEPWJSUTTLNdGYRXaxHJ12753926;     ozuzEIEPWJSUTTLNdGYRXaxHJ12753926 = ozuzEIEPWJSUTTLNdGYRXaxHJ15924762;     ozuzEIEPWJSUTTLNdGYRXaxHJ15924762 = ozuzEIEPWJSUTTLNdGYRXaxHJ97031223;     ozuzEIEPWJSUTTLNdGYRXaxHJ97031223 = ozuzEIEPWJSUTTLNdGYRXaxHJ56618752;     ozuzEIEPWJSUTTLNdGYRXaxHJ56618752 = ozuzEIEPWJSUTTLNdGYRXaxHJ21818937;     ozuzEIEPWJSUTTLNdGYRXaxHJ21818937 = ozuzEIEPWJSUTTLNdGYRXaxHJ1884962;     ozuzEIEPWJSUTTLNdGYRXaxHJ1884962 = ozuzEIEPWJSUTTLNdGYRXaxHJ31930040;     ozuzEIEPWJSUTTLNdGYRXaxHJ31930040 = ozuzEIEPWJSUTTLNdGYRXaxHJ57286399;     ozuzEIEPWJSUTTLNdGYRXaxHJ57286399 = ozuzEIEPWJSUTTLNdGYRXaxHJ20929719;     ozuzEIEPWJSUTTLNdGYRXaxHJ20929719 = ozuzEIEPWJSUTTLNdGYRXaxHJ76885041;     ozuzEIEPWJSUTTLNdGYRXaxHJ76885041 = ozuzEIEPWJSUTTLNdGYRXaxHJ10045342;     ozuzEIEPWJSUTTLNdGYRXaxHJ10045342 = ozuzEIEPWJSUTTLNdGYRXaxHJ78207034;     ozuzEIEPWJSUTTLNdGYRXaxHJ78207034 = ozuzEIEPWJSUTTLNdGYRXaxHJ70962547;     ozuzEIEPWJSUTTLNdGYRXaxHJ70962547 = ozuzEIEPWJSUTTLNdGYRXaxHJ68704301;     ozuzEIEPWJSUTTLNdGYRXaxHJ68704301 = ozuzEIEPWJSUTTLNdGYRXaxHJ25381962;     ozuzEIEPWJSUTTLNdGYRXaxHJ25381962 = ozuzEIEPWJSUTTLNdGYRXaxHJ23674410;     ozuzEIEPWJSUTTLNdGYRXaxHJ23674410 = ozuzEIEPWJSUTTLNdGYRXaxHJ29325242;     ozuzEIEPWJSUTTLNdGYRXaxHJ29325242 = ozuzEIEPWJSUTTLNdGYRXaxHJ60994548;     ozuzEIEPWJSUTTLNdGYRXaxHJ60994548 = ozuzEIEPWJSUTTLNdGYRXaxHJ90366729;     ozuzEIEPWJSUTTLNdGYRXaxHJ90366729 = ozuzEIEPWJSUTTLNdGYRXaxHJ59614919;     ozuzEIEPWJSUTTLNdGYRXaxHJ59614919 = ozuzEIEPWJSUTTLNdGYRXaxHJ97919666;     ozuzEIEPWJSUTTLNdGYRXaxHJ97919666 = ozuzEIEPWJSUTTLNdGYRXaxHJ7386818;     ozuzEIEPWJSUTTLNdGYRXaxHJ7386818 = ozuzEIEPWJSUTTLNdGYRXaxHJ56103017;     ozuzEIEPWJSUTTLNdGYRXaxHJ56103017 = ozuzEIEPWJSUTTLNdGYRXaxHJ56251648;     ozuzEIEPWJSUTTLNdGYRXaxHJ56251648 = ozuzEIEPWJSUTTLNdGYRXaxHJ84695039;     ozuzEIEPWJSUTTLNdGYRXaxHJ84695039 = ozuzEIEPWJSUTTLNdGYRXaxHJ27478440;     ozuzEIEPWJSUTTLNdGYRXaxHJ27478440 = ozuzEIEPWJSUTTLNdGYRXaxHJ38044139;     ozuzEIEPWJSUTTLNdGYRXaxHJ38044139 = ozuzEIEPWJSUTTLNdGYRXaxHJ73651331;     ozuzEIEPWJSUTTLNdGYRXaxHJ73651331 = ozuzEIEPWJSUTTLNdGYRXaxHJ88247888;     ozuzEIEPWJSUTTLNdGYRXaxHJ88247888 = ozuzEIEPWJSUTTLNdGYRXaxHJ56070039;     ozuzEIEPWJSUTTLNdGYRXaxHJ56070039 = ozuzEIEPWJSUTTLNdGYRXaxHJ35876842;     ozuzEIEPWJSUTTLNdGYRXaxHJ35876842 = ozuzEIEPWJSUTTLNdGYRXaxHJ46833784;     ozuzEIEPWJSUTTLNdGYRXaxHJ46833784 = ozuzEIEPWJSUTTLNdGYRXaxHJ59898252;     ozuzEIEPWJSUTTLNdGYRXaxHJ59898252 = ozuzEIEPWJSUTTLNdGYRXaxHJ64857321;     ozuzEIEPWJSUTTLNdGYRXaxHJ64857321 = ozuzEIEPWJSUTTLNdGYRXaxHJ5466251;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void vYWNRerUQFhdncIzcdlJldOfINDqZcuoytYNshshrsbQVrDLHhpsrCDRJ20025130() {     long qFEaAuoKtfuEuHukDRtCyKRKs40925219 = -910567351;    long qFEaAuoKtfuEuHukDRtCyKRKs52589707 = -454212229;    long qFEaAuoKtfuEuHukDRtCyKRKs92397806 = 29332758;    long qFEaAuoKtfuEuHukDRtCyKRKs66104334 = -216382115;    long qFEaAuoKtfuEuHukDRtCyKRKs54424594 = -610595119;    long qFEaAuoKtfuEuHukDRtCyKRKs87733546 = -695853068;    long qFEaAuoKtfuEuHukDRtCyKRKs22628004 = -580618263;    long qFEaAuoKtfuEuHukDRtCyKRKs80473978 = -913981207;    long qFEaAuoKtfuEuHukDRtCyKRKs24091459 = -106602592;    long qFEaAuoKtfuEuHukDRtCyKRKs59613093 = -966548873;    long qFEaAuoKtfuEuHukDRtCyKRKs75248114 = -145097078;    long qFEaAuoKtfuEuHukDRtCyKRKs67250321 = -931774553;    long qFEaAuoKtfuEuHukDRtCyKRKs59705477 = 8295043;    long qFEaAuoKtfuEuHukDRtCyKRKs76188227 = 48830006;    long qFEaAuoKtfuEuHukDRtCyKRKs71564998 = -483807341;    long qFEaAuoKtfuEuHukDRtCyKRKs45647365 = -152374506;    long qFEaAuoKtfuEuHukDRtCyKRKs57668739 = 31971457;    long qFEaAuoKtfuEuHukDRtCyKRKs23416041 = -748553564;    long qFEaAuoKtfuEuHukDRtCyKRKs13707856 = -343548488;    long qFEaAuoKtfuEuHukDRtCyKRKs41884583 = -661613019;    long qFEaAuoKtfuEuHukDRtCyKRKs16377341 = -564180518;    long qFEaAuoKtfuEuHukDRtCyKRKs39123283 = 72401898;    long qFEaAuoKtfuEuHukDRtCyKRKs37786317 = 20406997;    long qFEaAuoKtfuEuHukDRtCyKRKs35995587 = 37750721;    long qFEaAuoKtfuEuHukDRtCyKRKs39995228 = -232824353;    long qFEaAuoKtfuEuHukDRtCyKRKs90763019 = -750831338;    long qFEaAuoKtfuEuHukDRtCyKRKs44308011 = -104035085;    long qFEaAuoKtfuEuHukDRtCyKRKs81651415 = -528706375;    long qFEaAuoKtfuEuHukDRtCyKRKs74482038 = -814671183;    long qFEaAuoKtfuEuHukDRtCyKRKs49284632 = -321050696;    long qFEaAuoKtfuEuHukDRtCyKRKs34137962 = -890295;    long qFEaAuoKtfuEuHukDRtCyKRKs68506624 = -77644276;    long qFEaAuoKtfuEuHukDRtCyKRKs66146257 = -946199376;    long qFEaAuoKtfuEuHukDRtCyKRKs35294497 = -997536334;    long qFEaAuoKtfuEuHukDRtCyKRKs91824594 = -751062490;    long qFEaAuoKtfuEuHukDRtCyKRKs8312574 = -261703110;    long qFEaAuoKtfuEuHukDRtCyKRKs89698943 = -199277362;    long qFEaAuoKtfuEuHukDRtCyKRKs51163244 = -164846876;    long qFEaAuoKtfuEuHukDRtCyKRKs22116370 = -474939978;    long qFEaAuoKtfuEuHukDRtCyKRKs20142659 = -37723351;    long qFEaAuoKtfuEuHukDRtCyKRKs60569253 = -377542273;    long qFEaAuoKtfuEuHukDRtCyKRKs15770563 = -347681889;    long qFEaAuoKtfuEuHukDRtCyKRKs15039795 = -753654610;    long qFEaAuoKtfuEuHukDRtCyKRKs29185242 = -685337344;    long qFEaAuoKtfuEuHukDRtCyKRKs71256553 = -864653680;    long qFEaAuoKtfuEuHukDRtCyKRKs9234305 = -39624421;    long qFEaAuoKtfuEuHukDRtCyKRKs74028050 = -542031073;    long qFEaAuoKtfuEuHukDRtCyKRKs77939338 = -673234485;    long qFEaAuoKtfuEuHukDRtCyKRKs34490415 = -873189912;    long qFEaAuoKtfuEuHukDRtCyKRKs91348865 = 96262856;    long qFEaAuoKtfuEuHukDRtCyKRKs34155216 = -716452137;    long qFEaAuoKtfuEuHukDRtCyKRKs39425283 = -43881589;    long qFEaAuoKtfuEuHukDRtCyKRKs1385088 = -113888865;    long qFEaAuoKtfuEuHukDRtCyKRKs62533276 = -197575772;    long qFEaAuoKtfuEuHukDRtCyKRKs3647790 = -726153781;    long qFEaAuoKtfuEuHukDRtCyKRKs1801936 = -882969249;    long qFEaAuoKtfuEuHukDRtCyKRKs14803390 = -374619227;    long qFEaAuoKtfuEuHukDRtCyKRKs56402219 = 91582036;    long qFEaAuoKtfuEuHukDRtCyKRKs26109106 = -983557762;    long qFEaAuoKtfuEuHukDRtCyKRKs63661575 = -859763782;    long qFEaAuoKtfuEuHukDRtCyKRKs43425536 = -491817984;    long qFEaAuoKtfuEuHukDRtCyKRKs40976588 = 48088111;    long qFEaAuoKtfuEuHukDRtCyKRKs5991941 = 689975;    long qFEaAuoKtfuEuHukDRtCyKRKs74806827 = -785551896;    long qFEaAuoKtfuEuHukDRtCyKRKs25475132 = -865658579;    long qFEaAuoKtfuEuHukDRtCyKRKs6741490 = 32547197;    long qFEaAuoKtfuEuHukDRtCyKRKs1104064 = -985575178;    long qFEaAuoKtfuEuHukDRtCyKRKs24410980 = 5831376;    long qFEaAuoKtfuEuHukDRtCyKRKs84363633 = -200107505;    long qFEaAuoKtfuEuHukDRtCyKRKs63252425 = -122104232;    long qFEaAuoKtfuEuHukDRtCyKRKs55948421 = -953097145;    long qFEaAuoKtfuEuHukDRtCyKRKs6505495 = -803181668;    long qFEaAuoKtfuEuHukDRtCyKRKs1299671 = -173613587;    long qFEaAuoKtfuEuHukDRtCyKRKs93565197 = -205825138;    long qFEaAuoKtfuEuHukDRtCyKRKs81315329 = -184070746;    long qFEaAuoKtfuEuHukDRtCyKRKs606778 = -116498630;    long qFEaAuoKtfuEuHukDRtCyKRKs24083489 = -173943493;    long qFEaAuoKtfuEuHukDRtCyKRKs8601076 = -294255659;    long qFEaAuoKtfuEuHukDRtCyKRKs64739033 = -97595600;    long qFEaAuoKtfuEuHukDRtCyKRKs30760924 = -93199933;    long qFEaAuoKtfuEuHukDRtCyKRKs16734970 = -108800265;    long qFEaAuoKtfuEuHukDRtCyKRKs66368672 = -430800600;    long qFEaAuoKtfuEuHukDRtCyKRKs47161001 = -655516463;    long qFEaAuoKtfuEuHukDRtCyKRKs83133173 = -810934040;    long qFEaAuoKtfuEuHukDRtCyKRKs15129417 = -604598560;    long qFEaAuoKtfuEuHukDRtCyKRKs94712678 = -957008707;    long qFEaAuoKtfuEuHukDRtCyKRKs67121537 = -963755411;    long qFEaAuoKtfuEuHukDRtCyKRKs3612982 = -648623604;    long qFEaAuoKtfuEuHukDRtCyKRKs31646708 = -171382553;    long qFEaAuoKtfuEuHukDRtCyKRKs90022658 = -868093241;    long qFEaAuoKtfuEuHukDRtCyKRKs93509184 = -887083884;    long qFEaAuoKtfuEuHukDRtCyKRKs33296725 = -190859398;    long qFEaAuoKtfuEuHukDRtCyKRKs25054139 = -181289114;    long qFEaAuoKtfuEuHukDRtCyKRKs58454795 = -615176196;    long qFEaAuoKtfuEuHukDRtCyKRKs76717123 = -545905367;    long qFEaAuoKtfuEuHukDRtCyKRKs19592666 = -325630385;    long qFEaAuoKtfuEuHukDRtCyKRKs9778623 = -248371864;    long qFEaAuoKtfuEuHukDRtCyKRKs40232968 = -968102714;    long qFEaAuoKtfuEuHukDRtCyKRKs3710110 = -819678766;    long qFEaAuoKtfuEuHukDRtCyKRKs64515064 = -910567351;     qFEaAuoKtfuEuHukDRtCyKRKs40925219 = qFEaAuoKtfuEuHukDRtCyKRKs52589707;     qFEaAuoKtfuEuHukDRtCyKRKs52589707 = qFEaAuoKtfuEuHukDRtCyKRKs92397806;     qFEaAuoKtfuEuHukDRtCyKRKs92397806 = qFEaAuoKtfuEuHukDRtCyKRKs66104334;     qFEaAuoKtfuEuHukDRtCyKRKs66104334 = qFEaAuoKtfuEuHukDRtCyKRKs54424594;     qFEaAuoKtfuEuHukDRtCyKRKs54424594 = qFEaAuoKtfuEuHukDRtCyKRKs87733546;     qFEaAuoKtfuEuHukDRtCyKRKs87733546 = qFEaAuoKtfuEuHukDRtCyKRKs22628004;     qFEaAuoKtfuEuHukDRtCyKRKs22628004 = qFEaAuoKtfuEuHukDRtCyKRKs80473978;     qFEaAuoKtfuEuHukDRtCyKRKs80473978 = qFEaAuoKtfuEuHukDRtCyKRKs24091459;     qFEaAuoKtfuEuHukDRtCyKRKs24091459 = qFEaAuoKtfuEuHukDRtCyKRKs59613093;     qFEaAuoKtfuEuHukDRtCyKRKs59613093 = qFEaAuoKtfuEuHukDRtCyKRKs75248114;     qFEaAuoKtfuEuHukDRtCyKRKs75248114 = qFEaAuoKtfuEuHukDRtCyKRKs67250321;     qFEaAuoKtfuEuHukDRtCyKRKs67250321 = qFEaAuoKtfuEuHukDRtCyKRKs59705477;     qFEaAuoKtfuEuHukDRtCyKRKs59705477 = qFEaAuoKtfuEuHukDRtCyKRKs76188227;     qFEaAuoKtfuEuHukDRtCyKRKs76188227 = qFEaAuoKtfuEuHukDRtCyKRKs71564998;     qFEaAuoKtfuEuHukDRtCyKRKs71564998 = qFEaAuoKtfuEuHukDRtCyKRKs45647365;     qFEaAuoKtfuEuHukDRtCyKRKs45647365 = qFEaAuoKtfuEuHukDRtCyKRKs57668739;     qFEaAuoKtfuEuHukDRtCyKRKs57668739 = qFEaAuoKtfuEuHukDRtCyKRKs23416041;     qFEaAuoKtfuEuHukDRtCyKRKs23416041 = qFEaAuoKtfuEuHukDRtCyKRKs13707856;     qFEaAuoKtfuEuHukDRtCyKRKs13707856 = qFEaAuoKtfuEuHukDRtCyKRKs41884583;     qFEaAuoKtfuEuHukDRtCyKRKs41884583 = qFEaAuoKtfuEuHukDRtCyKRKs16377341;     qFEaAuoKtfuEuHukDRtCyKRKs16377341 = qFEaAuoKtfuEuHukDRtCyKRKs39123283;     qFEaAuoKtfuEuHukDRtCyKRKs39123283 = qFEaAuoKtfuEuHukDRtCyKRKs37786317;     qFEaAuoKtfuEuHukDRtCyKRKs37786317 = qFEaAuoKtfuEuHukDRtCyKRKs35995587;     qFEaAuoKtfuEuHukDRtCyKRKs35995587 = qFEaAuoKtfuEuHukDRtCyKRKs39995228;     qFEaAuoKtfuEuHukDRtCyKRKs39995228 = qFEaAuoKtfuEuHukDRtCyKRKs90763019;     qFEaAuoKtfuEuHukDRtCyKRKs90763019 = qFEaAuoKtfuEuHukDRtCyKRKs44308011;     qFEaAuoKtfuEuHukDRtCyKRKs44308011 = qFEaAuoKtfuEuHukDRtCyKRKs81651415;     qFEaAuoKtfuEuHukDRtCyKRKs81651415 = qFEaAuoKtfuEuHukDRtCyKRKs74482038;     qFEaAuoKtfuEuHukDRtCyKRKs74482038 = qFEaAuoKtfuEuHukDRtCyKRKs49284632;     qFEaAuoKtfuEuHukDRtCyKRKs49284632 = qFEaAuoKtfuEuHukDRtCyKRKs34137962;     qFEaAuoKtfuEuHukDRtCyKRKs34137962 = qFEaAuoKtfuEuHukDRtCyKRKs68506624;     qFEaAuoKtfuEuHukDRtCyKRKs68506624 = qFEaAuoKtfuEuHukDRtCyKRKs66146257;     qFEaAuoKtfuEuHukDRtCyKRKs66146257 = qFEaAuoKtfuEuHukDRtCyKRKs35294497;     qFEaAuoKtfuEuHukDRtCyKRKs35294497 = qFEaAuoKtfuEuHukDRtCyKRKs91824594;     qFEaAuoKtfuEuHukDRtCyKRKs91824594 = qFEaAuoKtfuEuHukDRtCyKRKs8312574;     qFEaAuoKtfuEuHukDRtCyKRKs8312574 = qFEaAuoKtfuEuHukDRtCyKRKs89698943;     qFEaAuoKtfuEuHukDRtCyKRKs89698943 = qFEaAuoKtfuEuHukDRtCyKRKs51163244;     qFEaAuoKtfuEuHukDRtCyKRKs51163244 = qFEaAuoKtfuEuHukDRtCyKRKs22116370;     qFEaAuoKtfuEuHukDRtCyKRKs22116370 = qFEaAuoKtfuEuHukDRtCyKRKs20142659;     qFEaAuoKtfuEuHukDRtCyKRKs20142659 = qFEaAuoKtfuEuHukDRtCyKRKs60569253;     qFEaAuoKtfuEuHukDRtCyKRKs60569253 = qFEaAuoKtfuEuHukDRtCyKRKs15770563;     qFEaAuoKtfuEuHukDRtCyKRKs15770563 = qFEaAuoKtfuEuHukDRtCyKRKs15039795;     qFEaAuoKtfuEuHukDRtCyKRKs15039795 = qFEaAuoKtfuEuHukDRtCyKRKs29185242;     qFEaAuoKtfuEuHukDRtCyKRKs29185242 = qFEaAuoKtfuEuHukDRtCyKRKs71256553;     qFEaAuoKtfuEuHukDRtCyKRKs71256553 = qFEaAuoKtfuEuHukDRtCyKRKs9234305;     qFEaAuoKtfuEuHukDRtCyKRKs9234305 = qFEaAuoKtfuEuHukDRtCyKRKs74028050;     qFEaAuoKtfuEuHukDRtCyKRKs74028050 = qFEaAuoKtfuEuHukDRtCyKRKs77939338;     qFEaAuoKtfuEuHukDRtCyKRKs77939338 = qFEaAuoKtfuEuHukDRtCyKRKs34490415;     qFEaAuoKtfuEuHukDRtCyKRKs34490415 = qFEaAuoKtfuEuHukDRtCyKRKs91348865;     qFEaAuoKtfuEuHukDRtCyKRKs91348865 = qFEaAuoKtfuEuHukDRtCyKRKs34155216;     qFEaAuoKtfuEuHukDRtCyKRKs34155216 = qFEaAuoKtfuEuHukDRtCyKRKs39425283;     qFEaAuoKtfuEuHukDRtCyKRKs39425283 = qFEaAuoKtfuEuHukDRtCyKRKs1385088;     qFEaAuoKtfuEuHukDRtCyKRKs1385088 = qFEaAuoKtfuEuHukDRtCyKRKs62533276;     qFEaAuoKtfuEuHukDRtCyKRKs62533276 = qFEaAuoKtfuEuHukDRtCyKRKs3647790;     qFEaAuoKtfuEuHukDRtCyKRKs3647790 = qFEaAuoKtfuEuHukDRtCyKRKs1801936;     qFEaAuoKtfuEuHukDRtCyKRKs1801936 = qFEaAuoKtfuEuHukDRtCyKRKs14803390;     qFEaAuoKtfuEuHukDRtCyKRKs14803390 = qFEaAuoKtfuEuHukDRtCyKRKs56402219;     qFEaAuoKtfuEuHukDRtCyKRKs56402219 = qFEaAuoKtfuEuHukDRtCyKRKs26109106;     qFEaAuoKtfuEuHukDRtCyKRKs26109106 = qFEaAuoKtfuEuHukDRtCyKRKs63661575;     qFEaAuoKtfuEuHukDRtCyKRKs63661575 = qFEaAuoKtfuEuHukDRtCyKRKs43425536;     qFEaAuoKtfuEuHukDRtCyKRKs43425536 = qFEaAuoKtfuEuHukDRtCyKRKs40976588;     qFEaAuoKtfuEuHukDRtCyKRKs40976588 = qFEaAuoKtfuEuHukDRtCyKRKs5991941;     qFEaAuoKtfuEuHukDRtCyKRKs5991941 = qFEaAuoKtfuEuHukDRtCyKRKs74806827;     qFEaAuoKtfuEuHukDRtCyKRKs74806827 = qFEaAuoKtfuEuHukDRtCyKRKs25475132;     qFEaAuoKtfuEuHukDRtCyKRKs25475132 = qFEaAuoKtfuEuHukDRtCyKRKs6741490;     qFEaAuoKtfuEuHukDRtCyKRKs6741490 = qFEaAuoKtfuEuHukDRtCyKRKs1104064;     qFEaAuoKtfuEuHukDRtCyKRKs1104064 = qFEaAuoKtfuEuHukDRtCyKRKs24410980;     qFEaAuoKtfuEuHukDRtCyKRKs24410980 = qFEaAuoKtfuEuHukDRtCyKRKs84363633;     qFEaAuoKtfuEuHukDRtCyKRKs84363633 = qFEaAuoKtfuEuHukDRtCyKRKs63252425;     qFEaAuoKtfuEuHukDRtCyKRKs63252425 = qFEaAuoKtfuEuHukDRtCyKRKs55948421;     qFEaAuoKtfuEuHukDRtCyKRKs55948421 = qFEaAuoKtfuEuHukDRtCyKRKs6505495;     qFEaAuoKtfuEuHukDRtCyKRKs6505495 = qFEaAuoKtfuEuHukDRtCyKRKs1299671;     qFEaAuoKtfuEuHukDRtCyKRKs1299671 = qFEaAuoKtfuEuHukDRtCyKRKs93565197;     qFEaAuoKtfuEuHukDRtCyKRKs93565197 = qFEaAuoKtfuEuHukDRtCyKRKs81315329;     qFEaAuoKtfuEuHukDRtCyKRKs81315329 = qFEaAuoKtfuEuHukDRtCyKRKs606778;     qFEaAuoKtfuEuHukDRtCyKRKs606778 = qFEaAuoKtfuEuHukDRtCyKRKs24083489;     qFEaAuoKtfuEuHukDRtCyKRKs24083489 = qFEaAuoKtfuEuHukDRtCyKRKs8601076;     qFEaAuoKtfuEuHukDRtCyKRKs8601076 = qFEaAuoKtfuEuHukDRtCyKRKs64739033;     qFEaAuoKtfuEuHukDRtCyKRKs64739033 = qFEaAuoKtfuEuHukDRtCyKRKs30760924;     qFEaAuoKtfuEuHukDRtCyKRKs30760924 = qFEaAuoKtfuEuHukDRtCyKRKs16734970;     qFEaAuoKtfuEuHukDRtCyKRKs16734970 = qFEaAuoKtfuEuHukDRtCyKRKs66368672;     qFEaAuoKtfuEuHukDRtCyKRKs66368672 = qFEaAuoKtfuEuHukDRtCyKRKs47161001;     qFEaAuoKtfuEuHukDRtCyKRKs47161001 = qFEaAuoKtfuEuHukDRtCyKRKs83133173;     qFEaAuoKtfuEuHukDRtCyKRKs83133173 = qFEaAuoKtfuEuHukDRtCyKRKs15129417;     qFEaAuoKtfuEuHukDRtCyKRKs15129417 = qFEaAuoKtfuEuHukDRtCyKRKs94712678;     qFEaAuoKtfuEuHukDRtCyKRKs94712678 = qFEaAuoKtfuEuHukDRtCyKRKs67121537;     qFEaAuoKtfuEuHukDRtCyKRKs67121537 = qFEaAuoKtfuEuHukDRtCyKRKs3612982;     qFEaAuoKtfuEuHukDRtCyKRKs3612982 = qFEaAuoKtfuEuHukDRtCyKRKs31646708;     qFEaAuoKtfuEuHukDRtCyKRKs31646708 = qFEaAuoKtfuEuHukDRtCyKRKs90022658;     qFEaAuoKtfuEuHukDRtCyKRKs90022658 = qFEaAuoKtfuEuHukDRtCyKRKs93509184;     qFEaAuoKtfuEuHukDRtCyKRKs93509184 = qFEaAuoKtfuEuHukDRtCyKRKs33296725;     qFEaAuoKtfuEuHukDRtCyKRKs33296725 = qFEaAuoKtfuEuHukDRtCyKRKs25054139;     qFEaAuoKtfuEuHukDRtCyKRKs25054139 = qFEaAuoKtfuEuHukDRtCyKRKs58454795;     qFEaAuoKtfuEuHukDRtCyKRKs58454795 = qFEaAuoKtfuEuHukDRtCyKRKs76717123;     qFEaAuoKtfuEuHukDRtCyKRKs76717123 = qFEaAuoKtfuEuHukDRtCyKRKs19592666;     qFEaAuoKtfuEuHukDRtCyKRKs19592666 = qFEaAuoKtfuEuHukDRtCyKRKs9778623;     qFEaAuoKtfuEuHukDRtCyKRKs9778623 = qFEaAuoKtfuEuHukDRtCyKRKs40232968;     qFEaAuoKtfuEuHukDRtCyKRKs40232968 = qFEaAuoKtfuEuHukDRtCyKRKs3710110;     qFEaAuoKtfuEuHukDRtCyKRKs3710110 = qFEaAuoKtfuEuHukDRtCyKRKs64515064;     qFEaAuoKtfuEuHukDRtCyKRKs64515064 = qFEaAuoKtfuEuHukDRtCyKRKs40925219;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void quGTORUNERIpDkvtBfuNQbLiEfxIpmZUsPXkrkveDkejZQNKMylXtxRPj35074197() {     long YOjULYSsoxnNKCRjQJgwcJoSm47042326 = 77530760;    long YOjULYSsoxnNKCRjQJgwcJoSm95962986 = -163812010;    long YOjULYSsoxnNKCRjQJgwcJoSm8439990 = -121500163;    long YOjULYSsoxnNKCRjQJgwcJoSm93179114 = -407130745;    long YOjULYSsoxnNKCRjQJgwcJoSm23320083 = -31244990;    long YOjULYSsoxnNKCRjQJgwcJoSm79150749 = -960349303;    long YOjULYSsoxnNKCRjQJgwcJoSm83116969 = -719583240;    long YOjULYSsoxnNKCRjQJgwcJoSm30233869 = -100855121;    long YOjULYSsoxnNKCRjQJgwcJoSm88733954 = -974635258;    long YOjULYSsoxnNKCRjQJgwcJoSm842753 = -195524351;    long YOjULYSsoxnNKCRjQJgwcJoSm35358404 = -22534665;    long YOjULYSsoxnNKCRjQJgwcJoSm99073363 = -276180755;    long YOjULYSsoxnNKCRjQJgwcJoSm45914595 = -431596046;    long YOjULYSsoxnNKCRjQJgwcJoSm59331904 = -483408562;    long YOjULYSsoxnNKCRjQJgwcJoSm67307425 = -74269508;    long YOjULYSsoxnNKCRjQJgwcJoSm87152759 = -125374050;    long YOjULYSsoxnNKCRjQJgwcJoSm51504742 = -584573656;    long YOjULYSsoxnNKCRjQJgwcJoSm20469194 = -414076207;    long YOjULYSsoxnNKCRjQJgwcJoSm75537697 = -749317585;    long YOjULYSsoxnNKCRjQJgwcJoSm22434748 = 81484062;    long YOjULYSsoxnNKCRjQJgwcJoSm4930534 = -419667974;    long YOjULYSsoxnNKCRjQJgwcJoSm25644307 = -935527819;    long YOjULYSsoxnNKCRjQJgwcJoSm73377109 = -826110490;    long YOjULYSsoxnNKCRjQJgwcJoSm19987961 = -184554267;    long YOjULYSsoxnNKCRjQJgwcJoSm83694878 = -606020386;    long YOjULYSsoxnNKCRjQJgwcJoSm15484695 = -629486661;    long YOjULYSsoxnNKCRjQJgwcJoSm42767789 = -4697288;    long YOjULYSsoxnNKCRjQJgwcJoSm94758540 = -594635328;    long YOjULYSsoxnNKCRjQJgwcJoSm40614294 = 62946113;    long YOjULYSsoxnNKCRjQJgwcJoSm17900269 = -138521564;    long YOjULYSsoxnNKCRjQJgwcJoSm26380511 = 85788767;    long YOjULYSsoxnNKCRjQJgwcJoSm66117246 = -887091092;    long YOjULYSsoxnNKCRjQJgwcJoSm75857206 = -838812746;    long YOjULYSsoxnNKCRjQJgwcJoSm30125061 = -749078099;    long YOjULYSsoxnNKCRjQJgwcJoSm53299246 = -289795595;    long YOjULYSsoxnNKCRjQJgwcJoSm77038486 = -475729217;    long YOjULYSsoxnNKCRjQJgwcJoSm70960878 = -152913231;    long YOjULYSsoxnNKCRjQJgwcJoSm85253457 = 63647115;    long YOjULYSsoxnNKCRjQJgwcJoSm95726623 = -468863475;    long YOjULYSsoxnNKCRjQJgwcJoSm7644597 = -511162573;    long YOjULYSsoxnNKCRjQJgwcJoSm66238477 = -442816167;    long YOjULYSsoxnNKCRjQJgwcJoSm47921020 = -617824167;    long YOjULYSsoxnNKCRjQJgwcJoSm93106773 = -834459193;    long YOjULYSsoxnNKCRjQJgwcJoSm16592982 = -704680282;    long YOjULYSsoxnNKCRjQJgwcJoSm83209018 = -526551834;    long YOjULYSsoxnNKCRjQJgwcJoSm21173500 = -24840537;    long YOjULYSsoxnNKCRjQJgwcJoSm91806624 = -660806611;    long YOjULYSsoxnNKCRjQJgwcJoSm85896279 = -683130018;    long YOjULYSsoxnNKCRjQJgwcJoSm44166144 = -958926900;    long YOjULYSsoxnNKCRjQJgwcJoSm4260518 = 9252048;    long YOjULYSsoxnNKCRjQJgwcJoSm69855894 = -558745808;    long YOjULYSsoxnNKCRjQJgwcJoSm50235002 = -944607909;    long YOjULYSsoxnNKCRjQJgwcJoSm49633545 = 94321547;    long YOjULYSsoxnNKCRjQJgwcJoSm58502156 = -518045918;    long YOjULYSsoxnNKCRjQJgwcJoSm30143664 = -326685564;    long YOjULYSsoxnNKCRjQJgwcJoSm21398019 = 13058578;    long YOjULYSsoxnNKCRjQJgwcJoSm22585877 = -337701520;    long YOjULYSsoxnNKCRjQJgwcJoSm88452029 = -936945897;    long YOjULYSsoxnNKCRjQJgwcJoSm9484237 = -801110360;    long YOjULYSsoxnNKCRjQJgwcJoSm7835388 = -401758330;    long YOjULYSsoxnNKCRjQJgwcJoSm36382960 = -855652016;    long YOjULYSsoxnNKCRjQJgwcJoSm88358428 = -24947912;    long YOjULYSsoxnNKCRjQJgwcJoSm89619575 = -63801234;    long YOjULYSsoxnNKCRjQJgwcJoSm70833685 = -736113695;    long YOjULYSsoxnNKCRjQJgwcJoSm74462241 = -181313118;    long YOjULYSsoxnNKCRjQJgwcJoSm69241158 = -135443574;    long YOjULYSsoxnNKCRjQJgwcJoSm23216158 = -437368010;    long YOjULYSsoxnNKCRjQJgwcJoSm15789535 = -682517947;    long YOjULYSsoxnNKCRjQJgwcJoSm6032658 = -93612967;    long YOjULYSsoxnNKCRjQJgwcJoSm90268938 = -598540291;    long YOjULYSsoxnNKCRjQJgwcJoSm16191881 = -972460819;    long YOjULYSsoxnNKCRjQJgwcJoSm66251285 = -548220771;    long YOjULYSsoxnNKCRjQJgwcJoSm24742570 = -945212733;    long YOjULYSsoxnNKCRjQJgwcJoSm67893101 = -138155012;    long YOjULYSsoxnNKCRjQJgwcJoSm56196270 = -475699771;    long YOjULYSsoxnNKCRjQJgwcJoSm57009514 = -801843807;    long YOjULYSsoxnNKCRjQJgwcJoSm32537534 = -1068626;    long YOjULYSsoxnNKCRjQJgwcJoSm56784127 = -21430208;    long YOjULYSsoxnNKCRjQJgwcJoSm36778942 = -658002433;    long YOjULYSsoxnNKCRjQJgwcJoSm62521379 = -481179850;    long YOjULYSsoxnNKCRjQJgwcJoSm23678071 = -968680050;    long YOjULYSsoxnNKCRjQJgwcJoSm56871510 = -321567271;    long YOjULYSsoxnNKCRjQJgwcJoSm50592397 = -635708429;    long YOjULYSsoxnNKCRjQJgwcJoSm36353776 = -946305936;    long YOjULYSsoxnNKCRjQJgwcJoSm48044375 = -579775756;    long YOjULYSsoxnNKCRjQJgwcJoSm76145508 = 30396675;    long YOjULYSsoxnNKCRjQJgwcJoSm16483702 = -881412639;    long YOjULYSsoxnNKCRjQJgwcJoSm17355050 = -220766829;    long YOjULYSsoxnNKCRjQJgwcJoSm99981397 = -322392536;    long YOjULYSsoxnNKCRjQJgwcJoSm31901228 = -202854174;    long YOjULYSsoxnNKCRjQJgwcJoSm54452610 = -38027697;    long YOjULYSsoxnNKCRjQJgwcJoSm82508849 = -215967335;    long YOjULYSsoxnNKCRjQJgwcJoSm75769220 = -135242526;    long YOjULYSsoxnNKCRjQJgwcJoSm87891235 = 32894855;    long YOjULYSsoxnNKCRjQJgwcJoSm71261636 = -655510558;    long YOjULYSsoxnNKCRjQJgwcJoSm77880049 = -317868256;    long YOjULYSsoxnNKCRjQJgwcJoSm58301444 = -454022934;    long YOjULYSsoxnNKCRjQJgwcJoSm22273088 = 1654501;    long YOjULYSsoxnNKCRjQJgwcJoSm42130741 = -423367165;    long YOjULYSsoxnNKCRjQJgwcJoSm13967861 = 77530760;     YOjULYSsoxnNKCRjQJgwcJoSm47042326 = YOjULYSsoxnNKCRjQJgwcJoSm95962986;     YOjULYSsoxnNKCRjQJgwcJoSm95962986 = YOjULYSsoxnNKCRjQJgwcJoSm8439990;     YOjULYSsoxnNKCRjQJgwcJoSm8439990 = YOjULYSsoxnNKCRjQJgwcJoSm93179114;     YOjULYSsoxnNKCRjQJgwcJoSm93179114 = YOjULYSsoxnNKCRjQJgwcJoSm23320083;     YOjULYSsoxnNKCRjQJgwcJoSm23320083 = YOjULYSsoxnNKCRjQJgwcJoSm79150749;     YOjULYSsoxnNKCRjQJgwcJoSm79150749 = YOjULYSsoxnNKCRjQJgwcJoSm83116969;     YOjULYSsoxnNKCRjQJgwcJoSm83116969 = YOjULYSsoxnNKCRjQJgwcJoSm30233869;     YOjULYSsoxnNKCRjQJgwcJoSm30233869 = YOjULYSsoxnNKCRjQJgwcJoSm88733954;     YOjULYSsoxnNKCRjQJgwcJoSm88733954 = YOjULYSsoxnNKCRjQJgwcJoSm842753;     YOjULYSsoxnNKCRjQJgwcJoSm842753 = YOjULYSsoxnNKCRjQJgwcJoSm35358404;     YOjULYSsoxnNKCRjQJgwcJoSm35358404 = YOjULYSsoxnNKCRjQJgwcJoSm99073363;     YOjULYSsoxnNKCRjQJgwcJoSm99073363 = YOjULYSsoxnNKCRjQJgwcJoSm45914595;     YOjULYSsoxnNKCRjQJgwcJoSm45914595 = YOjULYSsoxnNKCRjQJgwcJoSm59331904;     YOjULYSsoxnNKCRjQJgwcJoSm59331904 = YOjULYSsoxnNKCRjQJgwcJoSm67307425;     YOjULYSsoxnNKCRjQJgwcJoSm67307425 = YOjULYSsoxnNKCRjQJgwcJoSm87152759;     YOjULYSsoxnNKCRjQJgwcJoSm87152759 = YOjULYSsoxnNKCRjQJgwcJoSm51504742;     YOjULYSsoxnNKCRjQJgwcJoSm51504742 = YOjULYSsoxnNKCRjQJgwcJoSm20469194;     YOjULYSsoxnNKCRjQJgwcJoSm20469194 = YOjULYSsoxnNKCRjQJgwcJoSm75537697;     YOjULYSsoxnNKCRjQJgwcJoSm75537697 = YOjULYSsoxnNKCRjQJgwcJoSm22434748;     YOjULYSsoxnNKCRjQJgwcJoSm22434748 = YOjULYSsoxnNKCRjQJgwcJoSm4930534;     YOjULYSsoxnNKCRjQJgwcJoSm4930534 = YOjULYSsoxnNKCRjQJgwcJoSm25644307;     YOjULYSsoxnNKCRjQJgwcJoSm25644307 = YOjULYSsoxnNKCRjQJgwcJoSm73377109;     YOjULYSsoxnNKCRjQJgwcJoSm73377109 = YOjULYSsoxnNKCRjQJgwcJoSm19987961;     YOjULYSsoxnNKCRjQJgwcJoSm19987961 = YOjULYSsoxnNKCRjQJgwcJoSm83694878;     YOjULYSsoxnNKCRjQJgwcJoSm83694878 = YOjULYSsoxnNKCRjQJgwcJoSm15484695;     YOjULYSsoxnNKCRjQJgwcJoSm15484695 = YOjULYSsoxnNKCRjQJgwcJoSm42767789;     YOjULYSsoxnNKCRjQJgwcJoSm42767789 = YOjULYSsoxnNKCRjQJgwcJoSm94758540;     YOjULYSsoxnNKCRjQJgwcJoSm94758540 = YOjULYSsoxnNKCRjQJgwcJoSm40614294;     YOjULYSsoxnNKCRjQJgwcJoSm40614294 = YOjULYSsoxnNKCRjQJgwcJoSm17900269;     YOjULYSsoxnNKCRjQJgwcJoSm17900269 = YOjULYSsoxnNKCRjQJgwcJoSm26380511;     YOjULYSsoxnNKCRjQJgwcJoSm26380511 = YOjULYSsoxnNKCRjQJgwcJoSm66117246;     YOjULYSsoxnNKCRjQJgwcJoSm66117246 = YOjULYSsoxnNKCRjQJgwcJoSm75857206;     YOjULYSsoxnNKCRjQJgwcJoSm75857206 = YOjULYSsoxnNKCRjQJgwcJoSm30125061;     YOjULYSsoxnNKCRjQJgwcJoSm30125061 = YOjULYSsoxnNKCRjQJgwcJoSm53299246;     YOjULYSsoxnNKCRjQJgwcJoSm53299246 = YOjULYSsoxnNKCRjQJgwcJoSm77038486;     YOjULYSsoxnNKCRjQJgwcJoSm77038486 = YOjULYSsoxnNKCRjQJgwcJoSm70960878;     YOjULYSsoxnNKCRjQJgwcJoSm70960878 = YOjULYSsoxnNKCRjQJgwcJoSm85253457;     YOjULYSsoxnNKCRjQJgwcJoSm85253457 = YOjULYSsoxnNKCRjQJgwcJoSm95726623;     YOjULYSsoxnNKCRjQJgwcJoSm95726623 = YOjULYSsoxnNKCRjQJgwcJoSm7644597;     YOjULYSsoxnNKCRjQJgwcJoSm7644597 = YOjULYSsoxnNKCRjQJgwcJoSm66238477;     YOjULYSsoxnNKCRjQJgwcJoSm66238477 = YOjULYSsoxnNKCRjQJgwcJoSm47921020;     YOjULYSsoxnNKCRjQJgwcJoSm47921020 = YOjULYSsoxnNKCRjQJgwcJoSm93106773;     YOjULYSsoxnNKCRjQJgwcJoSm93106773 = YOjULYSsoxnNKCRjQJgwcJoSm16592982;     YOjULYSsoxnNKCRjQJgwcJoSm16592982 = YOjULYSsoxnNKCRjQJgwcJoSm83209018;     YOjULYSsoxnNKCRjQJgwcJoSm83209018 = YOjULYSsoxnNKCRjQJgwcJoSm21173500;     YOjULYSsoxnNKCRjQJgwcJoSm21173500 = YOjULYSsoxnNKCRjQJgwcJoSm91806624;     YOjULYSsoxnNKCRjQJgwcJoSm91806624 = YOjULYSsoxnNKCRjQJgwcJoSm85896279;     YOjULYSsoxnNKCRjQJgwcJoSm85896279 = YOjULYSsoxnNKCRjQJgwcJoSm44166144;     YOjULYSsoxnNKCRjQJgwcJoSm44166144 = YOjULYSsoxnNKCRjQJgwcJoSm4260518;     YOjULYSsoxnNKCRjQJgwcJoSm4260518 = YOjULYSsoxnNKCRjQJgwcJoSm69855894;     YOjULYSsoxnNKCRjQJgwcJoSm69855894 = YOjULYSsoxnNKCRjQJgwcJoSm50235002;     YOjULYSsoxnNKCRjQJgwcJoSm50235002 = YOjULYSsoxnNKCRjQJgwcJoSm49633545;     YOjULYSsoxnNKCRjQJgwcJoSm49633545 = YOjULYSsoxnNKCRjQJgwcJoSm58502156;     YOjULYSsoxnNKCRjQJgwcJoSm58502156 = YOjULYSsoxnNKCRjQJgwcJoSm30143664;     YOjULYSsoxnNKCRjQJgwcJoSm30143664 = YOjULYSsoxnNKCRjQJgwcJoSm21398019;     YOjULYSsoxnNKCRjQJgwcJoSm21398019 = YOjULYSsoxnNKCRjQJgwcJoSm22585877;     YOjULYSsoxnNKCRjQJgwcJoSm22585877 = YOjULYSsoxnNKCRjQJgwcJoSm88452029;     YOjULYSsoxnNKCRjQJgwcJoSm88452029 = YOjULYSsoxnNKCRjQJgwcJoSm9484237;     YOjULYSsoxnNKCRjQJgwcJoSm9484237 = YOjULYSsoxnNKCRjQJgwcJoSm7835388;     YOjULYSsoxnNKCRjQJgwcJoSm7835388 = YOjULYSsoxnNKCRjQJgwcJoSm36382960;     YOjULYSsoxnNKCRjQJgwcJoSm36382960 = YOjULYSsoxnNKCRjQJgwcJoSm88358428;     YOjULYSsoxnNKCRjQJgwcJoSm88358428 = YOjULYSsoxnNKCRjQJgwcJoSm89619575;     YOjULYSsoxnNKCRjQJgwcJoSm89619575 = YOjULYSsoxnNKCRjQJgwcJoSm70833685;     YOjULYSsoxnNKCRjQJgwcJoSm70833685 = YOjULYSsoxnNKCRjQJgwcJoSm74462241;     YOjULYSsoxnNKCRjQJgwcJoSm74462241 = YOjULYSsoxnNKCRjQJgwcJoSm69241158;     YOjULYSsoxnNKCRjQJgwcJoSm69241158 = YOjULYSsoxnNKCRjQJgwcJoSm23216158;     YOjULYSsoxnNKCRjQJgwcJoSm23216158 = YOjULYSsoxnNKCRjQJgwcJoSm15789535;     YOjULYSsoxnNKCRjQJgwcJoSm15789535 = YOjULYSsoxnNKCRjQJgwcJoSm6032658;     YOjULYSsoxnNKCRjQJgwcJoSm6032658 = YOjULYSsoxnNKCRjQJgwcJoSm90268938;     YOjULYSsoxnNKCRjQJgwcJoSm90268938 = YOjULYSsoxnNKCRjQJgwcJoSm16191881;     YOjULYSsoxnNKCRjQJgwcJoSm16191881 = YOjULYSsoxnNKCRjQJgwcJoSm66251285;     YOjULYSsoxnNKCRjQJgwcJoSm66251285 = YOjULYSsoxnNKCRjQJgwcJoSm24742570;     YOjULYSsoxnNKCRjQJgwcJoSm24742570 = YOjULYSsoxnNKCRjQJgwcJoSm67893101;     YOjULYSsoxnNKCRjQJgwcJoSm67893101 = YOjULYSsoxnNKCRjQJgwcJoSm56196270;     YOjULYSsoxnNKCRjQJgwcJoSm56196270 = YOjULYSsoxnNKCRjQJgwcJoSm57009514;     YOjULYSsoxnNKCRjQJgwcJoSm57009514 = YOjULYSsoxnNKCRjQJgwcJoSm32537534;     YOjULYSsoxnNKCRjQJgwcJoSm32537534 = YOjULYSsoxnNKCRjQJgwcJoSm56784127;     YOjULYSsoxnNKCRjQJgwcJoSm56784127 = YOjULYSsoxnNKCRjQJgwcJoSm36778942;     YOjULYSsoxnNKCRjQJgwcJoSm36778942 = YOjULYSsoxnNKCRjQJgwcJoSm62521379;     YOjULYSsoxnNKCRjQJgwcJoSm62521379 = YOjULYSsoxnNKCRjQJgwcJoSm23678071;     YOjULYSsoxnNKCRjQJgwcJoSm23678071 = YOjULYSsoxnNKCRjQJgwcJoSm56871510;     YOjULYSsoxnNKCRjQJgwcJoSm56871510 = YOjULYSsoxnNKCRjQJgwcJoSm50592397;     YOjULYSsoxnNKCRjQJgwcJoSm50592397 = YOjULYSsoxnNKCRjQJgwcJoSm36353776;     YOjULYSsoxnNKCRjQJgwcJoSm36353776 = YOjULYSsoxnNKCRjQJgwcJoSm48044375;     YOjULYSsoxnNKCRjQJgwcJoSm48044375 = YOjULYSsoxnNKCRjQJgwcJoSm76145508;     YOjULYSsoxnNKCRjQJgwcJoSm76145508 = YOjULYSsoxnNKCRjQJgwcJoSm16483702;     YOjULYSsoxnNKCRjQJgwcJoSm16483702 = YOjULYSsoxnNKCRjQJgwcJoSm17355050;     YOjULYSsoxnNKCRjQJgwcJoSm17355050 = YOjULYSsoxnNKCRjQJgwcJoSm99981397;     YOjULYSsoxnNKCRjQJgwcJoSm99981397 = YOjULYSsoxnNKCRjQJgwcJoSm31901228;     YOjULYSsoxnNKCRjQJgwcJoSm31901228 = YOjULYSsoxnNKCRjQJgwcJoSm54452610;     YOjULYSsoxnNKCRjQJgwcJoSm54452610 = YOjULYSsoxnNKCRjQJgwcJoSm82508849;     YOjULYSsoxnNKCRjQJgwcJoSm82508849 = YOjULYSsoxnNKCRjQJgwcJoSm75769220;     YOjULYSsoxnNKCRjQJgwcJoSm75769220 = YOjULYSsoxnNKCRjQJgwcJoSm87891235;     YOjULYSsoxnNKCRjQJgwcJoSm87891235 = YOjULYSsoxnNKCRjQJgwcJoSm71261636;     YOjULYSsoxnNKCRjQJgwcJoSm71261636 = YOjULYSsoxnNKCRjQJgwcJoSm77880049;     YOjULYSsoxnNKCRjQJgwcJoSm77880049 = YOjULYSsoxnNKCRjQJgwcJoSm58301444;     YOjULYSsoxnNKCRjQJgwcJoSm58301444 = YOjULYSsoxnNKCRjQJgwcJoSm22273088;     YOjULYSsoxnNKCRjQJgwcJoSm22273088 = YOjULYSsoxnNKCRjQJgwcJoSm42130741;     YOjULYSsoxnNKCRjQJgwcJoSm42130741 = YOjULYSsoxnNKCRjQJgwcJoSm13967861;     YOjULYSsoxnNKCRjQJgwcJoSm13967861 = YOjULYSsoxnNKCRjQJgwcJoSm47042326;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZNFeaGWJZyGSZrWCfxawhsxiXwFumQFcjjLqFcsYQewCbkBFjpBJJpEhP2365797() {     long XHeAcXItdiqffxDECfDwuGnuA82501294 = -388746140;    long XHeAcXItdiqffxDECfDwuGnuA9235065 = -44363616;    long XHeAcXItdiqffxDECfDwuGnuA45826467 = -887167238;    long XHeAcXItdiqffxDECfDwuGnuA65402469 = -228281817;    long XHeAcXItdiqffxDECfDwuGnuA79605352 = -136843836;    long XHeAcXItdiqffxDECfDwuGnuA15373621 = -122697199;    long XHeAcXItdiqffxDECfDwuGnuA93774375 = -564308974;    long XHeAcXItdiqffxDECfDwuGnuA92365430 = -845089261;    long XHeAcXItdiqffxDECfDwuGnuA90251559 = -362966665;    long XHeAcXItdiqffxDECfDwuGnuA15745465 = -960211349;    long XHeAcXItdiqffxDECfDwuGnuA73540139 = -924542394;    long XHeAcXItdiqffxDECfDwuGnuA99641511 = -140301526;    long XHeAcXItdiqffxDECfDwuGnuA84149240 = -983608551;    long XHeAcXItdiqffxDECfDwuGnuA12472768 = -459771971;    long XHeAcXItdiqffxDECfDwuGnuA25501942 = -577694523;    long XHeAcXItdiqffxDECfDwuGnuA70694060 = -861185657;    long XHeAcXItdiqffxDECfDwuGnuA7340678 = -11548209;    long XHeAcXItdiqffxDECfDwuGnuA20229385 = -487504275;    long XHeAcXItdiqffxDECfDwuGnuA76088027 = 34118994;    long XHeAcXItdiqffxDECfDwuGnuA16271967 = -345077004;    long XHeAcXItdiqffxDECfDwuGnuA18017397 = -76942663;    long XHeAcXItdiqffxDECfDwuGnuA29065832 = 77835887;    long XHeAcXItdiqffxDECfDwuGnuA43902489 = -463742674;    long XHeAcXItdiqffxDECfDwuGnuA13780906 = -695378871;    long XHeAcXItdiqffxDECfDwuGnuA91712829 = -630005585;    long XHeAcXItdiqffxDECfDwuGnuA26182867 = -318063468;    long XHeAcXItdiqffxDECfDwuGnuA3188364 = -910981428;    long XHeAcXItdiqffxDECfDwuGnuA35486966 = -764407503;    long XHeAcXItdiqffxDECfDwuGnuA87282508 = -511148690;    long XHeAcXItdiqffxDECfDwuGnuA23433680 = -173028734;    long XHeAcXItdiqffxDECfDwuGnuA44963743 = -466191720;    long XHeAcXItdiqffxDECfDwuGnuA3940265 = -660062506;    long XHeAcXItdiqffxDECfDwuGnuA88075216 = -986408723;    long XHeAcXItdiqffxDECfDwuGnuA59873487 = -813771912;    long XHeAcXItdiqffxDECfDwuGnuA19107700 = -240895846;    long XHeAcXItdiqffxDECfDwuGnuA28599331 = -690294523;    long XHeAcXItdiqffxDECfDwuGnuA20372695 = -17609272;    long XHeAcXItdiqffxDECfDwuGnuA36468860 = 80991534;    long XHeAcXItdiqffxDECfDwuGnuA26117185 = -119739751;    long XHeAcXItdiqffxDECfDwuGnuA71916128 = 23574881;    long XHeAcXItdiqffxDECfDwuGnuA99690085 = -212015082;    long XHeAcXItdiqffxDECfDwuGnuA37286146 = -212369458;    long XHeAcXItdiqffxDECfDwuGnuA82490151 = -387639979;    long XHeAcXItdiqffxDECfDwuGnuA56724320 = -209012692;    long XHeAcXItdiqffxDECfDwuGnuA83225477 = -353062995;    long XHeAcXItdiqffxDECfDwuGnuA67134828 = -63764169;    long XHeAcXItdiqffxDECfDwuGnuA11151789 = -44792972;    long XHeAcXItdiqffxDECfDwuGnuA3622592 = -849656611;    long XHeAcXItdiqffxDECfDwuGnuA67058809 = -622663780;    long XHeAcXItdiqffxDECfDwuGnuA28790107 = -481774767;    long XHeAcXItdiqffxDECfDwuGnuA50626618 = -433022365;    long XHeAcXItdiqffxDECfDwuGnuA33720475 = -58260256;    long XHeAcXItdiqffxDECfDwuGnuA18254694 = -761724007;    long XHeAcXItdiqffxDECfDwuGnuA74494002 = -709554417;    long XHeAcXItdiqffxDECfDwuGnuA84348400 = -673175710;    long XHeAcXItdiqffxDECfDwuGnuA53435463 = -366582028;    long XHeAcXItdiqffxDECfDwuGnuA65332575 = -580620943;    long XHeAcXItdiqffxDECfDwuGnuA32045561 = -91788368;    long XHeAcXItdiqffxDECfDwuGnuA73689640 = -598276232;    long XHeAcXItdiqffxDECfDwuGnuA53422485 = -818780369;    long XHeAcXItdiqffxDECfDwuGnuA12185258 = -211715771;    long XHeAcXItdiqffxDECfDwuGnuA58287410 = -799901472;    long XHeAcXItdiqffxDECfDwuGnuA5082922 = -233940572;    long XHeAcXItdiqffxDECfDwuGnuA66817880 = -89937931;    long XHeAcXItdiqffxDECfDwuGnuA70781722 = -394019629;    long XHeAcXItdiqffxDECfDwuGnuA69599874 = -164479889;    long XHeAcXItdiqffxDECfDwuGnuA11566295 = -153892804;    long XHeAcXItdiqffxDECfDwuGnuA24275754 = -69836639;    long XHeAcXItdiqffxDECfDwuGnuA93365067 = -118876126;    long XHeAcXItdiqffxDECfDwuGnuA96902611 = -887400000;    long XHeAcXItdiqffxDECfDwuGnuA50321365 = -743576386;    long XHeAcXItdiqffxDECfDwuGnuA70871817 = 7460257;    long XHeAcXItdiqffxDECfDwuGnuA94112199 = -267764525;    long XHeAcXItdiqffxDECfDwuGnuA4171899 = -989455887;    long XHeAcXItdiqffxDECfDwuGnuA16581882 = -33061923;    long XHeAcXItdiqffxDECfDwuGnuA80731250 = -864573205;    long XHeAcXItdiqffxDECfDwuGnuA46575680 = -534524134;    long XHeAcXItdiqffxDECfDwuGnuA87178168 = -154729982;    long XHeAcXItdiqffxDECfDwuGnuA30555429 = -242315876;    long XHeAcXItdiqffxDECfDwuGnuA24578002 = -466241416;    long XHeAcXItdiqffxDECfDwuGnuA15031079 = -173270497;    long XHeAcXItdiqffxDECfDwuGnuA99565771 = 38675182;    long XHeAcXItdiqffxDECfDwuGnuA68428156 = -41743723;    long XHeAcXItdiqffxDECfDwuGnuA58492401 = 70626077;    long XHeAcXItdiqffxDECfDwuGnuA72807062 = -740006369;    long XHeAcXItdiqffxDECfDwuGnuA11243268 = -307931465;    long XHeAcXItdiqffxDECfDwuGnuA85685571 = -898338499;    long XHeAcXItdiqffxDECfDwuGnuA13581215 = -176854306;    long XHeAcXItdiqffxDECfDwuGnuA75525087 = -40596203;    long XHeAcXItdiqffxDECfDwuGnuA65672237 = -874313819;    long XHeAcXItdiqffxDECfDwuGnuA63266755 = -9673581;    long XHeAcXItdiqffxDECfDwuGnuA88327134 = -925820904;    long XHeAcXItdiqffxDECfDwuGnuA62779220 = -320732234;    long XHeAcXItdiqffxDECfDwuGnuA72694700 = -300959383;    long XHeAcXItdiqffxDECfDwuGnuA59730871 = -764709349;    long XHeAcXItdiqffxDECfDwuGnuA41402675 = -412113610;    long XHeAcXItdiqffxDECfDwuGnuA32203225 = -978428887;    long XHeAcXItdiqffxDECfDwuGnuA15672272 = -197702049;    long XHeAcXItdiqffxDECfDwuGnuA85942598 = -814993064;    long XHeAcXItdiqffxDECfDwuGnuA13625603 = -388746140;     XHeAcXItdiqffxDECfDwuGnuA82501294 = XHeAcXItdiqffxDECfDwuGnuA9235065;     XHeAcXItdiqffxDECfDwuGnuA9235065 = XHeAcXItdiqffxDECfDwuGnuA45826467;     XHeAcXItdiqffxDECfDwuGnuA45826467 = XHeAcXItdiqffxDECfDwuGnuA65402469;     XHeAcXItdiqffxDECfDwuGnuA65402469 = XHeAcXItdiqffxDECfDwuGnuA79605352;     XHeAcXItdiqffxDECfDwuGnuA79605352 = XHeAcXItdiqffxDECfDwuGnuA15373621;     XHeAcXItdiqffxDECfDwuGnuA15373621 = XHeAcXItdiqffxDECfDwuGnuA93774375;     XHeAcXItdiqffxDECfDwuGnuA93774375 = XHeAcXItdiqffxDECfDwuGnuA92365430;     XHeAcXItdiqffxDECfDwuGnuA92365430 = XHeAcXItdiqffxDECfDwuGnuA90251559;     XHeAcXItdiqffxDECfDwuGnuA90251559 = XHeAcXItdiqffxDECfDwuGnuA15745465;     XHeAcXItdiqffxDECfDwuGnuA15745465 = XHeAcXItdiqffxDECfDwuGnuA73540139;     XHeAcXItdiqffxDECfDwuGnuA73540139 = XHeAcXItdiqffxDECfDwuGnuA99641511;     XHeAcXItdiqffxDECfDwuGnuA99641511 = XHeAcXItdiqffxDECfDwuGnuA84149240;     XHeAcXItdiqffxDECfDwuGnuA84149240 = XHeAcXItdiqffxDECfDwuGnuA12472768;     XHeAcXItdiqffxDECfDwuGnuA12472768 = XHeAcXItdiqffxDECfDwuGnuA25501942;     XHeAcXItdiqffxDECfDwuGnuA25501942 = XHeAcXItdiqffxDECfDwuGnuA70694060;     XHeAcXItdiqffxDECfDwuGnuA70694060 = XHeAcXItdiqffxDECfDwuGnuA7340678;     XHeAcXItdiqffxDECfDwuGnuA7340678 = XHeAcXItdiqffxDECfDwuGnuA20229385;     XHeAcXItdiqffxDECfDwuGnuA20229385 = XHeAcXItdiqffxDECfDwuGnuA76088027;     XHeAcXItdiqffxDECfDwuGnuA76088027 = XHeAcXItdiqffxDECfDwuGnuA16271967;     XHeAcXItdiqffxDECfDwuGnuA16271967 = XHeAcXItdiqffxDECfDwuGnuA18017397;     XHeAcXItdiqffxDECfDwuGnuA18017397 = XHeAcXItdiqffxDECfDwuGnuA29065832;     XHeAcXItdiqffxDECfDwuGnuA29065832 = XHeAcXItdiqffxDECfDwuGnuA43902489;     XHeAcXItdiqffxDECfDwuGnuA43902489 = XHeAcXItdiqffxDECfDwuGnuA13780906;     XHeAcXItdiqffxDECfDwuGnuA13780906 = XHeAcXItdiqffxDECfDwuGnuA91712829;     XHeAcXItdiqffxDECfDwuGnuA91712829 = XHeAcXItdiqffxDECfDwuGnuA26182867;     XHeAcXItdiqffxDECfDwuGnuA26182867 = XHeAcXItdiqffxDECfDwuGnuA3188364;     XHeAcXItdiqffxDECfDwuGnuA3188364 = XHeAcXItdiqffxDECfDwuGnuA35486966;     XHeAcXItdiqffxDECfDwuGnuA35486966 = XHeAcXItdiqffxDECfDwuGnuA87282508;     XHeAcXItdiqffxDECfDwuGnuA87282508 = XHeAcXItdiqffxDECfDwuGnuA23433680;     XHeAcXItdiqffxDECfDwuGnuA23433680 = XHeAcXItdiqffxDECfDwuGnuA44963743;     XHeAcXItdiqffxDECfDwuGnuA44963743 = XHeAcXItdiqffxDECfDwuGnuA3940265;     XHeAcXItdiqffxDECfDwuGnuA3940265 = XHeAcXItdiqffxDECfDwuGnuA88075216;     XHeAcXItdiqffxDECfDwuGnuA88075216 = XHeAcXItdiqffxDECfDwuGnuA59873487;     XHeAcXItdiqffxDECfDwuGnuA59873487 = XHeAcXItdiqffxDECfDwuGnuA19107700;     XHeAcXItdiqffxDECfDwuGnuA19107700 = XHeAcXItdiqffxDECfDwuGnuA28599331;     XHeAcXItdiqffxDECfDwuGnuA28599331 = XHeAcXItdiqffxDECfDwuGnuA20372695;     XHeAcXItdiqffxDECfDwuGnuA20372695 = XHeAcXItdiqffxDECfDwuGnuA36468860;     XHeAcXItdiqffxDECfDwuGnuA36468860 = XHeAcXItdiqffxDECfDwuGnuA26117185;     XHeAcXItdiqffxDECfDwuGnuA26117185 = XHeAcXItdiqffxDECfDwuGnuA71916128;     XHeAcXItdiqffxDECfDwuGnuA71916128 = XHeAcXItdiqffxDECfDwuGnuA99690085;     XHeAcXItdiqffxDECfDwuGnuA99690085 = XHeAcXItdiqffxDECfDwuGnuA37286146;     XHeAcXItdiqffxDECfDwuGnuA37286146 = XHeAcXItdiqffxDECfDwuGnuA82490151;     XHeAcXItdiqffxDECfDwuGnuA82490151 = XHeAcXItdiqffxDECfDwuGnuA56724320;     XHeAcXItdiqffxDECfDwuGnuA56724320 = XHeAcXItdiqffxDECfDwuGnuA83225477;     XHeAcXItdiqffxDECfDwuGnuA83225477 = XHeAcXItdiqffxDECfDwuGnuA67134828;     XHeAcXItdiqffxDECfDwuGnuA67134828 = XHeAcXItdiqffxDECfDwuGnuA11151789;     XHeAcXItdiqffxDECfDwuGnuA11151789 = XHeAcXItdiqffxDECfDwuGnuA3622592;     XHeAcXItdiqffxDECfDwuGnuA3622592 = XHeAcXItdiqffxDECfDwuGnuA67058809;     XHeAcXItdiqffxDECfDwuGnuA67058809 = XHeAcXItdiqffxDECfDwuGnuA28790107;     XHeAcXItdiqffxDECfDwuGnuA28790107 = XHeAcXItdiqffxDECfDwuGnuA50626618;     XHeAcXItdiqffxDECfDwuGnuA50626618 = XHeAcXItdiqffxDECfDwuGnuA33720475;     XHeAcXItdiqffxDECfDwuGnuA33720475 = XHeAcXItdiqffxDECfDwuGnuA18254694;     XHeAcXItdiqffxDECfDwuGnuA18254694 = XHeAcXItdiqffxDECfDwuGnuA74494002;     XHeAcXItdiqffxDECfDwuGnuA74494002 = XHeAcXItdiqffxDECfDwuGnuA84348400;     XHeAcXItdiqffxDECfDwuGnuA84348400 = XHeAcXItdiqffxDECfDwuGnuA53435463;     XHeAcXItdiqffxDECfDwuGnuA53435463 = XHeAcXItdiqffxDECfDwuGnuA65332575;     XHeAcXItdiqffxDECfDwuGnuA65332575 = XHeAcXItdiqffxDECfDwuGnuA32045561;     XHeAcXItdiqffxDECfDwuGnuA32045561 = XHeAcXItdiqffxDECfDwuGnuA73689640;     XHeAcXItdiqffxDECfDwuGnuA73689640 = XHeAcXItdiqffxDECfDwuGnuA53422485;     XHeAcXItdiqffxDECfDwuGnuA53422485 = XHeAcXItdiqffxDECfDwuGnuA12185258;     XHeAcXItdiqffxDECfDwuGnuA12185258 = XHeAcXItdiqffxDECfDwuGnuA58287410;     XHeAcXItdiqffxDECfDwuGnuA58287410 = XHeAcXItdiqffxDECfDwuGnuA5082922;     XHeAcXItdiqffxDECfDwuGnuA5082922 = XHeAcXItdiqffxDECfDwuGnuA66817880;     XHeAcXItdiqffxDECfDwuGnuA66817880 = XHeAcXItdiqffxDECfDwuGnuA70781722;     XHeAcXItdiqffxDECfDwuGnuA70781722 = XHeAcXItdiqffxDECfDwuGnuA69599874;     XHeAcXItdiqffxDECfDwuGnuA69599874 = XHeAcXItdiqffxDECfDwuGnuA11566295;     XHeAcXItdiqffxDECfDwuGnuA11566295 = XHeAcXItdiqffxDECfDwuGnuA24275754;     XHeAcXItdiqffxDECfDwuGnuA24275754 = XHeAcXItdiqffxDECfDwuGnuA93365067;     XHeAcXItdiqffxDECfDwuGnuA93365067 = XHeAcXItdiqffxDECfDwuGnuA96902611;     XHeAcXItdiqffxDECfDwuGnuA96902611 = XHeAcXItdiqffxDECfDwuGnuA50321365;     XHeAcXItdiqffxDECfDwuGnuA50321365 = XHeAcXItdiqffxDECfDwuGnuA70871817;     XHeAcXItdiqffxDECfDwuGnuA70871817 = XHeAcXItdiqffxDECfDwuGnuA94112199;     XHeAcXItdiqffxDECfDwuGnuA94112199 = XHeAcXItdiqffxDECfDwuGnuA4171899;     XHeAcXItdiqffxDECfDwuGnuA4171899 = XHeAcXItdiqffxDECfDwuGnuA16581882;     XHeAcXItdiqffxDECfDwuGnuA16581882 = XHeAcXItdiqffxDECfDwuGnuA80731250;     XHeAcXItdiqffxDECfDwuGnuA80731250 = XHeAcXItdiqffxDECfDwuGnuA46575680;     XHeAcXItdiqffxDECfDwuGnuA46575680 = XHeAcXItdiqffxDECfDwuGnuA87178168;     XHeAcXItdiqffxDECfDwuGnuA87178168 = XHeAcXItdiqffxDECfDwuGnuA30555429;     XHeAcXItdiqffxDECfDwuGnuA30555429 = XHeAcXItdiqffxDECfDwuGnuA24578002;     XHeAcXItdiqffxDECfDwuGnuA24578002 = XHeAcXItdiqffxDECfDwuGnuA15031079;     XHeAcXItdiqffxDECfDwuGnuA15031079 = XHeAcXItdiqffxDECfDwuGnuA99565771;     XHeAcXItdiqffxDECfDwuGnuA99565771 = XHeAcXItdiqffxDECfDwuGnuA68428156;     XHeAcXItdiqffxDECfDwuGnuA68428156 = XHeAcXItdiqffxDECfDwuGnuA58492401;     XHeAcXItdiqffxDECfDwuGnuA58492401 = XHeAcXItdiqffxDECfDwuGnuA72807062;     XHeAcXItdiqffxDECfDwuGnuA72807062 = XHeAcXItdiqffxDECfDwuGnuA11243268;     XHeAcXItdiqffxDECfDwuGnuA11243268 = XHeAcXItdiqffxDECfDwuGnuA85685571;     XHeAcXItdiqffxDECfDwuGnuA85685571 = XHeAcXItdiqffxDECfDwuGnuA13581215;     XHeAcXItdiqffxDECfDwuGnuA13581215 = XHeAcXItdiqffxDECfDwuGnuA75525087;     XHeAcXItdiqffxDECfDwuGnuA75525087 = XHeAcXItdiqffxDECfDwuGnuA65672237;     XHeAcXItdiqffxDECfDwuGnuA65672237 = XHeAcXItdiqffxDECfDwuGnuA63266755;     XHeAcXItdiqffxDECfDwuGnuA63266755 = XHeAcXItdiqffxDECfDwuGnuA88327134;     XHeAcXItdiqffxDECfDwuGnuA88327134 = XHeAcXItdiqffxDECfDwuGnuA62779220;     XHeAcXItdiqffxDECfDwuGnuA62779220 = XHeAcXItdiqffxDECfDwuGnuA72694700;     XHeAcXItdiqffxDECfDwuGnuA72694700 = XHeAcXItdiqffxDECfDwuGnuA59730871;     XHeAcXItdiqffxDECfDwuGnuA59730871 = XHeAcXItdiqffxDECfDwuGnuA41402675;     XHeAcXItdiqffxDECfDwuGnuA41402675 = XHeAcXItdiqffxDECfDwuGnuA32203225;     XHeAcXItdiqffxDECfDwuGnuA32203225 = XHeAcXItdiqffxDECfDwuGnuA15672272;     XHeAcXItdiqffxDECfDwuGnuA15672272 = XHeAcXItdiqffxDECfDwuGnuA85942598;     XHeAcXItdiqffxDECfDwuGnuA85942598 = XHeAcXItdiqffxDECfDwuGnuA13625603;     XHeAcXItdiqffxDECfDwuGnuA13625603 = XHeAcXItdiqffxDECfDwuGnuA82501294;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void VfTZwhbLgkqiubylDJHelTTZcWagOuwIWkZiXBmLvauSTDNMrdsdjhBCL17414865() {     long uwZGuxmohMKBQNBXwjKYBGZJO88618400 = -500648028;    long uwZGuxmohMKBQNBXwjKYBGZJO52608344 = -853963397;    long uwZGuxmohMKBQNBXwjKYBGZJO61868650 = 61999841;    long uwZGuxmohMKBQNBXwjKYBGZJO92477250 = -419030447;    long uwZGuxmohMKBQNBXwjKYBGZJO48500840 = -657493707;    long uwZGuxmohMKBQNBXwjKYBGZJO6790824 = -387193434;    long uwZGuxmohMKBQNBXwjKYBGZJO54263342 = -703273951;    long uwZGuxmohMKBQNBXwjKYBGZJO42125321 = -31963174;    long uwZGuxmohMKBQNBXwjKYBGZJO54894055 = -130999331;    long uwZGuxmohMKBQNBXwjKYBGZJO56975124 = -189186826;    long uwZGuxmohMKBQNBXwjKYBGZJO33650429 = -801979981;    long uwZGuxmohMKBQNBXwjKYBGZJO31464555 = -584707728;    long uwZGuxmohMKBQNBXwjKYBGZJO70358359 = -323499639;    long uwZGuxmohMKBQNBXwjKYBGZJO95616444 = -992010539;    long uwZGuxmohMKBQNBXwjKYBGZJO21244369 = -168156689;    long uwZGuxmohMKBQNBXwjKYBGZJO12199454 = -834185200;    long uwZGuxmohMKBQNBXwjKYBGZJO1176681 = -628093321;    long uwZGuxmohMKBQNBXwjKYBGZJO17282538 = -153026918;    long uwZGuxmohMKBQNBXwjKYBGZJO37917869 = -371650103;    long uwZGuxmohMKBQNBXwjKYBGZJO96822131 = -701979924;    long uwZGuxmohMKBQNBXwjKYBGZJO6570590 = 67569882;    long uwZGuxmohMKBQNBXwjKYBGZJO15586856 = -930093829;    long uwZGuxmohMKBQNBXwjKYBGZJO79493280 = -210260161;    long uwZGuxmohMKBQNBXwjKYBGZJO97773279 = -917683859;    long uwZGuxmohMKBQNBXwjKYBGZJO35412479 = 96798382;    long uwZGuxmohMKBQNBXwjKYBGZJO50904542 = -196718791;    long uwZGuxmohMKBQNBXwjKYBGZJO1648142 = -811643632;    long uwZGuxmohMKBQNBXwjKYBGZJO48594091 = -830336456;    long uwZGuxmohMKBQNBXwjKYBGZJO53414764 = -733531394;    long uwZGuxmohMKBQNBXwjKYBGZJO92049316 = 9500398;    long uwZGuxmohMKBQNBXwjKYBGZJO37206292 = -379512659;    long uwZGuxmohMKBQNBXwjKYBGZJO1550887 = -369509322;    long uwZGuxmohMKBQNBXwjKYBGZJO97786165 = -879022093;    long uwZGuxmohMKBQNBXwjKYBGZJO54704052 = -565313678;    long uwZGuxmohMKBQNBXwjKYBGZJO80582352 = -879628951;    long uwZGuxmohMKBQNBXwjKYBGZJO97325243 = -904320631;    long uwZGuxmohMKBQNBXwjKYBGZJO1634630 = 28754859;    long uwZGuxmohMKBQNBXwjKYBGZJO70559073 = -790514476;    long uwZGuxmohMKBQNBXwjKYBGZJO99727438 = -113663248;    long uwZGuxmohMKBQNBXwjKYBGZJO59418066 = -449864342;    long uwZGuxmohMKBQNBXwjKYBGZJO5359310 = -277288976;    long uwZGuxmohMKBQNBXwjKYBGZJO69436603 = -482511736;    long uwZGuxmohMKBQNBXwjKYBGZJO60557130 = -468444563;    long uwZGuxmohMKBQNBXwjKYBGZJO44132061 = -228355631;    long uwZGuxmohMKBQNBXwjKYBGZJO95177942 = -14961150;    long uwZGuxmohMKBQNBXwjKYBGZJO79074023 = -48980286;    long uwZGuxmohMKBQNBXwjKYBGZJO28930363 = -163568509;    long uwZGuxmohMKBQNBXwjKYBGZJO11579533 = -859552143;    long uwZGuxmohMKBQNBXwjKYBGZJO76734538 = -708400768;    long uwZGuxmohMKBQNBXwjKYBGZJO41701760 = -568785575;    long uwZGuxmohMKBQNBXwjKYBGZJO86327295 = -275316037;    long uwZGuxmohMKBQNBXwjKYBGZJO44530194 = -958986576;    long uwZGuxmohMKBQNBXwjKYBGZJO66503151 = -553513595;    long uwZGuxmohMKBQNBXwjKYBGZJO70462883 = 69975438;    long uwZGuxmohMKBQNBXwjKYBGZJO10844275 = -273707492;    long uwZGuxmohMKBQNBXwjKYBGZJO73031545 = -570554200;    long uwZGuxmohMKBQNBXwjKYBGZJO73115063 = -543703237;    long uwZGuxmohMKBQNBXwjKYBGZJO64095370 = -20316301;    long uwZGuxmohMKBQNBXwjKYBGZJO57064771 = -415828830;    long uwZGuxmohMKBQNBXwjKYBGZJO97596298 = -360774917;    long uwZGuxmohMKBQNBXwjKYBGZJO5142682 = -575549803;    long uwZGuxmohMKBQNBXwjKYBGZJO5669251 = -872937496;    long uwZGuxmohMKBQNBXwjKYBGZJO88710557 = -298431780;    long uwZGuxmohMKBQNBXwjKYBGZJO62844738 = -40499729;    long uwZGuxmohMKBQNBXwjKYBGZJO19768832 = -809674168;    long uwZGuxmohMKBQNBXwjKYBGZJO32099543 = -332470660;    long uwZGuxmohMKBQNBXwjKYBGZJO33678389 = -705685635;    long uwZGuxmohMKBQNBXwjKYBGZJO15654308 = -758185962;    long uwZGuxmohMKBQNBXwjKYBGZJO15034092 = -12381588;    long uwZGuxmohMKBQNBXwjKYBGZJO23919125 = -263836059;    long uwZGuxmohMKBQNBXwjKYBGZJO10564824 = -762940059;    long uwZGuxmohMKBQNBXwjKYBGZJO30617608 = -837578846;    long uwZGuxmohMKBQNBXwjKYBGZJO17555099 = 60636329;    long uwZGuxmohMKBQNBXwjKYBGZJO78499803 = -921785761;    long uwZGuxmohMKBQNBXwjKYBGZJO91462822 = -324690948;    long uwZGuxmohMKBQNBXwjKYBGZJO37133986 = -449918382;    long uwZGuxmohMKBQNBXwjKYBGZJO55029726 = -361649266;    long uwZGuxmohMKBQNBXwjKYBGZJO35361220 = -981904531;    long uwZGuxmohMKBQNBXwjKYBGZJO2595338 = -802722710;    long uwZGuxmohMKBQNBXwjKYBGZJO56338456 = -854221332;    long uwZGuxmohMKBQNBXwjKYBGZJO21974180 = 66849718;    long uwZGuxmohMKBQNBXwjKYBGZJO90068609 = -952091489;    long uwZGuxmohMKBQNBXwjKYBGZJO71859552 = -21935688;    long uwZGuxmohMKBQNBXwjKYBGZJO11713005 = -64745819;    long uwZGuxmohMKBQNBXwjKYBGZJO5722021 = -715183566;    long uwZGuxmohMKBQNBXwjKYBGZJO92676097 = -420526083;    long uwZGuxmohMKBQNBXwjKYBGZJO35047736 = -815995727;    long uwZGuxmohMKBQNBXwjKYBGZJO27323283 = -848997532;    long uwZGuxmohMKBQNBXwjKYBGZJO43859777 = -191606186;    long uwZGuxmohMKBQNBXwjKYBGZJO7550807 = -209074752;    long uwZGuxmohMKBQNBXwjKYBGZJO24210181 = -260617394;    long uwZGuxmohMKBQNBXwjKYBGZJO37539259 = -950928840;    long uwZGuxmohMKBQNBXwjKYBGZJO13494302 = -274685647;    long uwZGuxmohMKBQNBXwjKYBGZJO2131141 = -752888332;    long uwZGuxmohMKBQNBXwjKYBGZJO54275384 = -874314540;    long uwZGuxmohMKBQNBXwjKYBGZJO99690058 = -404351481;    long uwZGuxmohMKBQNBXwjKYBGZJO80726046 = -84079956;    long uwZGuxmohMKBQNBXwjKYBGZJO97712391 = -327944834;    long uwZGuxmohMKBQNBXwjKYBGZJO24363229 = -418681463;    long uwZGuxmohMKBQNBXwjKYBGZJO63078399 = -500648028;     uwZGuxmohMKBQNBXwjKYBGZJO88618400 = uwZGuxmohMKBQNBXwjKYBGZJO52608344;     uwZGuxmohMKBQNBXwjKYBGZJO52608344 = uwZGuxmohMKBQNBXwjKYBGZJO61868650;     uwZGuxmohMKBQNBXwjKYBGZJO61868650 = uwZGuxmohMKBQNBXwjKYBGZJO92477250;     uwZGuxmohMKBQNBXwjKYBGZJO92477250 = uwZGuxmohMKBQNBXwjKYBGZJO48500840;     uwZGuxmohMKBQNBXwjKYBGZJO48500840 = uwZGuxmohMKBQNBXwjKYBGZJO6790824;     uwZGuxmohMKBQNBXwjKYBGZJO6790824 = uwZGuxmohMKBQNBXwjKYBGZJO54263342;     uwZGuxmohMKBQNBXwjKYBGZJO54263342 = uwZGuxmohMKBQNBXwjKYBGZJO42125321;     uwZGuxmohMKBQNBXwjKYBGZJO42125321 = uwZGuxmohMKBQNBXwjKYBGZJO54894055;     uwZGuxmohMKBQNBXwjKYBGZJO54894055 = uwZGuxmohMKBQNBXwjKYBGZJO56975124;     uwZGuxmohMKBQNBXwjKYBGZJO56975124 = uwZGuxmohMKBQNBXwjKYBGZJO33650429;     uwZGuxmohMKBQNBXwjKYBGZJO33650429 = uwZGuxmohMKBQNBXwjKYBGZJO31464555;     uwZGuxmohMKBQNBXwjKYBGZJO31464555 = uwZGuxmohMKBQNBXwjKYBGZJO70358359;     uwZGuxmohMKBQNBXwjKYBGZJO70358359 = uwZGuxmohMKBQNBXwjKYBGZJO95616444;     uwZGuxmohMKBQNBXwjKYBGZJO95616444 = uwZGuxmohMKBQNBXwjKYBGZJO21244369;     uwZGuxmohMKBQNBXwjKYBGZJO21244369 = uwZGuxmohMKBQNBXwjKYBGZJO12199454;     uwZGuxmohMKBQNBXwjKYBGZJO12199454 = uwZGuxmohMKBQNBXwjKYBGZJO1176681;     uwZGuxmohMKBQNBXwjKYBGZJO1176681 = uwZGuxmohMKBQNBXwjKYBGZJO17282538;     uwZGuxmohMKBQNBXwjKYBGZJO17282538 = uwZGuxmohMKBQNBXwjKYBGZJO37917869;     uwZGuxmohMKBQNBXwjKYBGZJO37917869 = uwZGuxmohMKBQNBXwjKYBGZJO96822131;     uwZGuxmohMKBQNBXwjKYBGZJO96822131 = uwZGuxmohMKBQNBXwjKYBGZJO6570590;     uwZGuxmohMKBQNBXwjKYBGZJO6570590 = uwZGuxmohMKBQNBXwjKYBGZJO15586856;     uwZGuxmohMKBQNBXwjKYBGZJO15586856 = uwZGuxmohMKBQNBXwjKYBGZJO79493280;     uwZGuxmohMKBQNBXwjKYBGZJO79493280 = uwZGuxmohMKBQNBXwjKYBGZJO97773279;     uwZGuxmohMKBQNBXwjKYBGZJO97773279 = uwZGuxmohMKBQNBXwjKYBGZJO35412479;     uwZGuxmohMKBQNBXwjKYBGZJO35412479 = uwZGuxmohMKBQNBXwjKYBGZJO50904542;     uwZGuxmohMKBQNBXwjKYBGZJO50904542 = uwZGuxmohMKBQNBXwjKYBGZJO1648142;     uwZGuxmohMKBQNBXwjKYBGZJO1648142 = uwZGuxmohMKBQNBXwjKYBGZJO48594091;     uwZGuxmohMKBQNBXwjKYBGZJO48594091 = uwZGuxmohMKBQNBXwjKYBGZJO53414764;     uwZGuxmohMKBQNBXwjKYBGZJO53414764 = uwZGuxmohMKBQNBXwjKYBGZJO92049316;     uwZGuxmohMKBQNBXwjKYBGZJO92049316 = uwZGuxmohMKBQNBXwjKYBGZJO37206292;     uwZGuxmohMKBQNBXwjKYBGZJO37206292 = uwZGuxmohMKBQNBXwjKYBGZJO1550887;     uwZGuxmohMKBQNBXwjKYBGZJO1550887 = uwZGuxmohMKBQNBXwjKYBGZJO97786165;     uwZGuxmohMKBQNBXwjKYBGZJO97786165 = uwZGuxmohMKBQNBXwjKYBGZJO54704052;     uwZGuxmohMKBQNBXwjKYBGZJO54704052 = uwZGuxmohMKBQNBXwjKYBGZJO80582352;     uwZGuxmohMKBQNBXwjKYBGZJO80582352 = uwZGuxmohMKBQNBXwjKYBGZJO97325243;     uwZGuxmohMKBQNBXwjKYBGZJO97325243 = uwZGuxmohMKBQNBXwjKYBGZJO1634630;     uwZGuxmohMKBQNBXwjKYBGZJO1634630 = uwZGuxmohMKBQNBXwjKYBGZJO70559073;     uwZGuxmohMKBQNBXwjKYBGZJO70559073 = uwZGuxmohMKBQNBXwjKYBGZJO99727438;     uwZGuxmohMKBQNBXwjKYBGZJO99727438 = uwZGuxmohMKBQNBXwjKYBGZJO59418066;     uwZGuxmohMKBQNBXwjKYBGZJO59418066 = uwZGuxmohMKBQNBXwjKYBGZJO5359310;     uwZGuxmohMKBQNBXwjKYBGZJO5359310 = uwZGuxmohMKBQNBXwjKYBGZJO69436603;     uwZGuxmohMKBQNBXwjKYBGZJO69436603 = uwZGuxmohMKBQNBXwjKYBGZJO60557130;     uwZGuxmohMKBQNBXwjKYBGZJO60557130 = uwZGuxmohMKBQNBXwjKYBGZJO44132061;     uwZGuxmohMKBQNBXwjKYBGZJO44132061 = uwZGuxmohMKBQNBXwjKYBGZJO95177942;     uwZGuxmohMKBQNBXwjKYBGZJO95177942 = uwZGuxmohMKBQNBXwjKYBGZJO79074023;     uwZGuxmohMKBQNBXwjKYBGZJO79074023 = uwZGuxmohMKBQNBXwjKYBGZJO28930363;     uwZGuxmohMKBQNBXwjKYBGZJO28930363 = uwZGuxmohMKBQNBXwjKYBGZJO11579533;     uwZGuxmohMKBQNBXwjKYBGZJO11579533 = uwZGuxmohMKBQNBXwjKYBGZJO76734538;     uwZGuxmohMKBQNBXwjKYBGZJO76734538 = uwZGuxmohMKBQNBXwjKYBGZJO41701760;     uwZGuxmohMKBQNBXwjKYBGZJO41701760 = uwZGuxmohMKBQNBXwjKYBGZJO86327295;     uwZGuxmohMKBQNBXwjKYBGZJO86327295 = uwZGuxmohMKBQNBXwjKYBGZJO44530194;     uwZGuxmohMKBQNBXwjKYBGZJO44530194 = uwZGuxmohMKBQNBXwjKYBGZJO66503151;     uwZGuxmohMKBQNBXwjKYBGZJO66503151 = uwZGuxmohMKBQNBXwjKYBGZJO70462883;     uwZGuxmohMKBQNBXwjKYBGZJO70462883 = uwZGuxmohMKBQNBXwjKYBGZJO10844275;     uwZGuxmohMKBQNBXwjKYBGZJO10844275 = uwZGuxmohMKBQNBXwjKYBGZJO73031545;     uwZGuxmohMKBQNBXwjKYBGZJO73031545 = uwZGuxmohMKBQNBXwjKYBGZJO73115063;     uwZGuxmohMKBQNBXwjKYBGZJO73115063 = uwZGuxmohMKBQNBXwjKYBGZJO64095370;     uwZGuxmohMKBQNBXwjKYBGZJO64095370 = uwZGuxmohMKBQNBXwjKYBGZJO57064771;     uwZGuxmohMKBQNBXwjKYBGZJO57064771 = uwZGuxmohMKBQNBXwjKYBGZJO97596298;     uwZGuxmohMKBQNBXwjKYBGZJO97596298 = uwZGuxmohMKBQNBXwjKYBGZJO5142682;     uwZGuxmohMKBQNBXwjKYBGZJO5142682 = uwZGuxmohMKBQNBXwjKYBGZJO5669251;     uwZGuxmohMKBQNBXwjKYBGZJO5669251 = uwZGuxmohMKBQNBXwjKYBGZJO88710557;     uwZGuxmohMKBQNBXwjKYBGZJO88710557 = uwZGuxmohMKBQNBXwjKYBGZJO62844738;     uwZGuxmohMKBQNBXwjKYBGZJO62844738 = uwZGuxmohMKBQNBXwjKYBGZJO19768832;     uwZGuxmohMKBQNBXwjKYBGZJO19768832 = uwZGuxmohMKBQNBXwjKYBGZJO32099543;     uwZGuxmohMKBQNBXwjKYBGZJO32099543 = uwZGuxmohMKBQNBXwjKYBGZJO33678389;     uwZGuxmohMKBQNBXwjKYBGZJO33678389 = uwZGuxmohMKBQNBXwjKYBGZJO15654308;     uwZGuxmohMKBQNBXwjKYBGZJO15654308 = uwZGuxmohMKBQNBXwjKYBGZJO15034092;     uwZGuxmohMKBQNBXwjKYBGZJO15034092 = uwZGuxmohMKBQNBXwjKYBGZJO23919125;     uwZGuxmohMKBQNBXwjKYBGZJO23919125 = uwZGuxmohMKBQNBXwjKYBGZJO10564824;     uwZGuxmohMKBQNBXwjKYBGZJO10564824 = uwZGuxmohMKBQNBXwjKYBGZJO30617608;     uwZGuxmohMKBQNBXwjKYBGZJO30617608 = uwZGuxmohMKBQNBXwjKYBGZJO17555099;     uwZGuxmohMKBQNBXwjKYBGZJO17555099 = uwZGuxmohMKBQNBXwjKYBGZJO78499803;     uwZGuxmohMKBQNBXwjKYBGZJO78499803 = uwZGuxmohMKBQNBXwjKYBGZJO91462822;     uwZGuxmohMKBQNBXwjKYBGZJO91462822 = uwZGuxmohMKBQNBXwjKYBGZJO37133986;     uwZGuxmohMKBQNBXwjKYBGZJO37133986 = uwZGuxmohMKBQNBXwjKYBGZJO55029726;     uwZGuxmohMKBQNBXwjKYBGZJO55029726 = uwZGuxmohMKBQNBXwjKYBGZJO35361220;     uwZGuxmohMKBQNBXwjKYBGZJO35361220 = uwZGuxmohMKBQNBXwjKYBGZJO2595338;     uwZGuxmohMKBQNBXwjKYBGZJO2595338 = uwZGuxmohMKBQNBXwjKYBGZJO56338456;     uwZGuxmohMKBQNBXwjKYBGZJO56338456 = uwZGuxmohMKBQNBXwjKYBGZJO21974180;     uwZGuxmohMKBQNBXwjKYBGZJO21974180 = uwZGuxmohMKBQNBXwjKYBGZJO90068609;     uwZGuxmohMKBQNBXwjKYBGZJO90068609 = uwZGuxmohMKBQNBXwjKYBGZJO71859552;     uwZGuxmohMKBQNBXwjKYBGZJO71859552 = uwZGuxmohMKBQNBXwjKYBGZJO11713005;     uwZGuxmohMKBQNBXwjKYBGZJO11713005 = uwZGuxmohMKBQNBXwjKYBGZJO5722021;     uwZGuxmohMKBQNBXwjKYBGZJO5722021 = uwZGuxmohMKBQNBXwjKYBGZJO92676097;     uwZGuxmohMKBQNBXwjKYBGZJO92676097 = uwZGuxmohMKBQNBXwjKYBGZJO35047736;     uwZGuxmohMKBQNBXwjKYBGZJO35047736 = uwZGuxmohMKBQNBXwjKYBGZJO27323283;     uwZGuxmohMKBQNBXwjKYBGZJO27323283 = uwZGuxmohMKBQNBXwjKYBGZJO43859777;     uwZGuxmohMKBQNBXwjKYBGZJO43859777 = uwZGuxmohMKBQNBXwjKYBGZJO7550807;     uwZGuxmohMKBQNBXwjKYBGZJO7550807 = uwZGuxmohMKBQNBXwjKYBGZJO24210181;     uwZGuxmohMKBQNBXwjKYBGZJO24210181 = uwZGuxmohMKBQNBXwjKYBGZJO37539259;     uwZGuxmohMKBQNBXwjKYBGZJO37539259 = uwZGuxmohMKBQNBXwjKYBGZJO13494302;     uwZGuxmohMKBQNBXwjKYBGZJO13494302 = uwZGuxmohMKBQNBXwjKYBGZJO2131141;     uwZGuxmohMKBQNBXwjKYBGZJO2131141 = uwZGuxmohMKBQNBXwjKYBGZJO54275384;     uwZGuxmohMKBQNBXwjKYBGZJO54275384 = uwZGuxmohMKBQNBXwjKYBGZJO99690058;     uwZGuxmohMKBQNBXwjKYBGZJO99690058 = uwZGuxmohMKBQNBXwjKYBGZJO80726046;     uwZGuxmohMKBQNBXwjKYBGZJO80726046 = uwZGuxmohMKBQNBXwjKYBGZJO97712391;     uwZGuxmohMKBQNBXwjKYBGZJO97712391 = uwZGuxmohMKBQNBXwjKYBGZJO24363229;     uwZGuxmohMKBQNBXwjKYBGZJO24363229 = uwZGuxmohMKBQNBXwjKYBGZJO63078399;     uwZGuxmohMKBQNBXwjKYBGZJO63078399 = uwZGuxmohMKBQNBXwjKYBGZJO88618400;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void HHpPNvtcFGlxKXshDnMVkFhgQFcbfPwKYgrWgnZFgrmstkJyzFUDhacBZ84706463() {     long JzHTSwpJaZefVAPNGosTpngwd24077370 = -966924928;    long JzHTSwpJaZefVAPNGosTpngwd65880422 = -734515004;    long JzHTSwpJaZefVAPNGosTpngwd99255127 = -703667234;    long JzHTSwpJaZefVAPNGosTpngwd64700605 = -240181518;    long JzHTSwpJaZefVAPNGosTpngwd4786110 = -763092552;    long JzHTSwpJaZefVAPNGosTpngwd43013695 = -649541329;    long JzHTSwpJaZefVAPNGosTpngwd64920748 = -547999686;    long JzHTSwpJaZefVAPNGosTpngwd4256882 = -776197315;    long JzHTSwpJaZefVAPNGosTpngwd56411660 = -619330738;    long JzHTSwpJaZefVAPNGosTpngwd71877836 = -953873824;    long JzHTSwpJaZefVAPNGosTpngwd71832164 = -603987710;    long JzHTSwpJaZefVAPNGosTpngwd32032703 = -448828500;    long JzHTSwpJaZefVAPNGosTpngwd8593005 = -875512144;    long JzHTSwpJaZefVAPNGosTpngwd48757307 = -968373948;    long JzHTSwpJaZefVAPNGosTpngwd79438884 = -671581704;    long JzHTSwpJaZefVAPNGosTpngwd95740754 = -469996807;    long JzHTSwpJaZefVAPNGosTpngwd57012617 = -55067874;    long JzHTSwpJaZefVAPNGosTpngwd17042730 = -226454987;    long JzHTSwpJaZefVAPNGosTpngwd38468199 = -688213524;    long JzHTSwpJaZefVAPNGosTpngwd90659349 = -28540989;    long JzHTSwpJaZefVAPNGosTpngwd19657453 = -689704807;    long JzHTSwpJaZefVAPNGosTpngwd19008380 = 83269877;    long JzHTSwpJaZefVAPNGosTpngwd50018660 = -947892345;    long JzHTSwpJaZefVAPNGosTpngwd91566225 = -328508463;    long JzHTSwpJaZefVAPNGosTpngwd43430431 = 72813184;    long JzHTSwpJaZefVAPNGosTpngwd61602713 = -985295598;    long JzHTSwpJaZefVAPNGosTpngwd62068715 = -617927772;    long JzHTSwpJaZefVAPNGosTpngwd89322516 = 99891369;    long JzHTSwpJaZefVAPNGosTpngwd82979 = -207626197;    long JzHTSwpJaZefVAPNGosTpngwd97582727 = -25006772;    long JzHTSwpJaZefVAPNGosTpngwd55789523 = -931493146;    long JzHTSwpJaZefVAPNGosTpngwd39373905 = -142480736;    long JzHTSwpJaZefVAPNGosTpngwd10004177 = 73381929;    long JzHTSwpJaZefVAPNGosTpngwd84452478 = -630007491;    long JzHTSwpJaZefVAPNGosTpngwd46390806 = -830729202;    long JzHTSwpJaZefVAPNGosTpngwd48886088 = -18885936;    long JzHTSwpJaZefVAPNGosTpngwd51046446 = -935941181;    long JzHTSwpJaZefVAPNGosTpngwd21774477 = -773170057;    long JzHTSwpJaZefVAPNGosTpngwd30118001 = -864539524;    long JzHTSwpJaZefVAPNGosTpngwd23689599 = 84873112;    long JzHTSwpJaZefVAPNGosTpngwd38810917 = -46487890;    long JzHTSwpJaZefVAPNGosTpngwd58801730 = -77057027;    long JzHTSwpJaZefVAPNGosTpngwd49940508 = -21625349;    long JzHTSwpJaZefVAPNGosTpngwd84263398 = -832688041;    long JzHTSwpJaZefVAPNGosTpngwd95194400 = -941472311;    long JzHTSwpJaZefVAPNGosTpngwd25035352 = -87903918;    long JzHTSwpJaZefVAPNGosTpngwd48275526 = -647554870;    long JzHTSwpJaZefVAPNGosTpngwd29305844 = 73921263;    long JzHTSwpJaZefVAPNGosTpngwd99627204 = -372137649;    long JzHTSwpJaZefVAPNGosTpngwd66231349 = 40187609;    long JzHTSwpJaZefVAPNGosTpngwd67098019 = -149592594;    long JzHTSwpJaZefVAPNGosTpngwd28015667 = -72638922;    long JzHTSwpJaZefVAPNGosTpngwd35124299 = -309559149;    long JzHTSwpJaZefVAPNGosTpngwd86454729 = -121533062;    long JzHTSwpJaZefVAPNGosTpngwd65049011 = -620197638;    long JzHTSwpJaZefVAPNGosTpngwd5068990 = -950194806;    long JzHTSwpJaZefVAPNGosTpngwd15861762 = -786622659;    long JzHTSwpJaZefVAPNGosTpngwd7688902 = -275158772;    long JzHTSwpJaZefVAPNGosTpngwd21270175 = -212994703;    long JzHTSwpJaZefVAPNGosTpngwd43183396 = -777796955;    long JzHTSwpJaZefVAPNGosTpngwd80944980 = 68386443;    long JzHTSwpJaZefVAPNGosTpngwd75598232 = -547891055;    long JzHTSwpJaZefVAPNGosTpngwd4173904 = -468571118;    long JzHTSwpJaZefVAPNGosTpngwd58828933 = -494323966;    long JzHTSwpJaZefVAPNGosTpngwd16088313 = 77619321;    long JzHTSwpJaZefVAPNGosTpngwd32458260 = -361506975;    long JzHTSwpJaZefVAPNGosTpngwd22028527 = -422210429;    long JzHTSwpJaZefVAPNGosTpngwd24140527 = -145504654;    long JzHTSwpJaZefVAPNGosTpngwd2366502 = -37644747;    long JzHTSwpJaZefVAPNGosTpngwd30552797 = -552695768;    long JzHTSwpJaZefVAPNGosTpngwd44694308 = -534055626;    long JzHTSwpJaZefVAPNGosTpngwd35238141 = -281897817;    long JzHTSwpJaZefVAPNGosTpngwd86924729 = -361915463;    long JzHTSwpJaZefVAPNGosTpngwd14778601 = -673086637;    long JzHTSwpJaZefVAPNGosTpngwd51848433 = -982053100;    long JzHTSwpJaZefVAPNGosTpngwd60855722 = -512647780;    long JzHTSwpJaZefVAPNGosTpngwd69067872 = -895104774;    long JzHTSwpJaZefVAPNGosTpngwd65755262 = -15204305;    long JzHTSwpJaZefVAPNGosTpngwd96371824 = -387036152;    long JzHTSwpJaZefVAPNGosTpngwd18395079 = -839282898;    long JzHTSwpJaZefVAPNGosTpngwd13327188 = -237740728;    long JzHTSwpJaZefVAPNGosTpngwd32762872 = -591849036;    long JzHTSwpJaZefVAPNGosTpngwd89695311 = -527970982;    long JzHTSwpJaZefVAPNGosTpngwd33851630 = -147813806;    long JzHTSwpJaZefVAPNGosTpngwd30484708 = -875414179;    long JzHTSwpJaZefVAPNGosTpngwd27773857 = -758854224;    long JzHTSwpJaZefVAPNGosTpngwd4249606 = -832921588;    long JzHTSwpJaZefVAPNGosTpngwd23549447 = -805085009;    long JzHTSwpJaZefVAPNGosTpngwd19403467 = 90190146;    long JzHTSwpJaZefVAPNGosTpngwd41321816 = -880534397;    long JzHTSwpJaZefVAPNGosTpngwd33024326 = -232263278;    long JzHTSwpJaZefVAPNGosTpngwd43357544 = -560782410;    long JzHTSwpJaZefVAPNGosTpngwd504302 = -460175355;    long JzHTSwpJaZefVAPNGosTpngwd86934604 = 13257431;    long JzHTSwpJaZefVAPNGosTpngwd42744619 = -983513331;    long JzHTSwpJaZefVAPNGosTpngwd63212685 = -498596835;    long JzHTSwpJaZefVAPNGosTpngwd54627827 = -608485909;    long JzHTSwpJaZefVAPNGosTpngwd91111575 = -527301384;    long JzHTSwpJaZefVAPNGosTpngwd68175086 = -810307362;    long JzHTSwpJaZefVAPNGosTpngwd62736141 = -966924928;     JzHTSwpJaZefVAPNGosTpngwd24077370 = JzHTSwpJaZefVAPNGosTpngwd65880422;     JzHTSwpJaZefVAPNGosTpngwd65880422 = JzHTSwpJaZefVAPNGosTpngwd99255127;     JzHTSwpJaZefVAPNGosTpngwd99255127 = JzHTSwpJaZefVAPNGosTpngwd64700605;     JzHTSwpJaZefVAPNGosTpngwd64700605 = JzHTSwpJaZefVAPNGosTpngwd4786110;     JzHTSwpJaZefVAPNGosTpngwd4786110 = JzHTSwpJaZefVAPNGosTpngwd43013695;     JzHTSwpJaZefVAPNGosTpngwd43013695 = JzHTSwpJaZefVAPNGosTpngwd64920748;     JzHTSwpJaZefVAPNGosTpngwd64920748 = JzHTSwpJaZefVAPNGosTpngwd4256882;     JzHTSwpJaZefVAPNGosTpngwd4256882 = JzHTSwpJaZefVAPNGosTpngwd56411660;     JzHTSwpJaZefVAPNGosTpngwd56411660 = JzHTSwpJaZefVAPNGosTpngwd71877836;     JzHTSwpJaZefVAPNGosTpngwd71877836 = JzHTSwpJaZefVAPNGosTpngwd71832164;     JzHTSwpJaZefVAPNGosTpngwd71832164 = JzHTSwpJaZefVAPNGosTpngwd32032703;     JzHTSwpJaZefVAPNGosTpngwd32032703 = JzHTSwpJaZefVAPNGosTpngwd8593005;     JzHTSwpJaZefVAPNGosTpngwd8593005 = JzHTSwpJaZefVAPNGosTpngwd48757307;     JzHTSwpJaZefVAPNGosTpngwd48757307 = JzHTSwpJaZefVAPNGosTpngwd79438884;     JzHTSwpJaZefVAPNGosTpngwd79438884 = JzHTSwpJaZefVAPNGosTpngwd95740754;     JzHTSwpJaZefVAPNGosTpngwd95740754 = JzHTSwpJaZefVAPNGosTpngwd57012617;     JzHTSwpJaZefVAPNGosTpngwd57012617 = JzHTSwpJaZefVAPNGosTpngwd17042730;     JzHTSwpJaZefVAPNGosTpngwd17042730 = JzHTSwpJaZefVAPNGosTpngwd38468199;     JzHTSwpJaZefVAPNGosTpngwd38468199 = JzHTSwpJaZefVAPNGosTpngwd90659349;     JzHTSwpJaZefVAPNGosTpngwd90659349 = JzHTSwpJaZefVAPNGosTpngwd19657453;     JzHTSwpJaZefVAPNGosTpngwd19657453 = JzHTSwpJaZefVAPNGosTpngwd19008380;     JzHTSwpJaZefVAPNGosTpngwd19008380 = JzHTSwpJaZefVAPNGosTpngwd50018660;     JzHTSwpJaZefVAPNGosTpngwd50018660 = JzHTSwpJaZefVAPNGosTpngwd91566225;     JzHTSwpJaZefVAPNGosTpngwd91566225 = JzHTSwpJaZefVAPNGosTpngwd43430431;     JzHTSwpJaZefVAPNGosTpngwd43430431 = JzHTSwpJaZefVAPNGosTpngwd61602713;     JzHTSwpJaZefVAPNGosTpngwd61602713 = JzHTSwpJaZefVAPNGosTpngwd62068715;     JzHTSwpJaZefVAPNGosTpngwd62068715 = JzHTSwpJaZefVAPNGosTpngwd89322516;     JzHTSwpJaZefVAPNGosTpngwd89322516 = JzHTSwpJaZefVAPNGosTpngwd82979;     JzHTSwpJaZefVAPNGosTpngwd82979 = JzHTSwpJaZefVAPNGosTpngwd97582727;     JzHTSwpJaZefVAPNGosTpngwd97582727 = JzHTSwpJaZefVAPNGosTpngwd55789523;     JzHTSwpJaZefVAPNGosTpngwd55789523 = JzHTSwpJaZefVAPNGosTpngwd39373905;     JzHTSwpJaZefVAPNGosTpngwd39373905 = JzHTSwpJaZefVAPNGosTpngwd10004177;     JzHTSwpJaZefVAPNGosTpngwd10004177 = JzHTSwpJaZefVAPNGosTpngwd84452478;     JzHTSwpJaZefVAPNGosTpngwd84452478 = JzHTSwpJaZefVAPNGosTpngwd46390806;     JzHTSwpJaZefVAPNGosTpngwd46390806 = JzHTSwpJaZefVAPNGosTpngwd48886088;     JzHTSwpJaZefVAPNGosTpngwd48886088 = JzHTSwpJaZefVAPNGosTpngwd51046446;     JzHTSwpJaZefVAPNGosTpngwd51046446 = JzHTSwpJaZefVAPNGosTpngwd21774477;     JzHTSwpJaZefVAPNGosTpngwd21774477 = JzHTSwpJaZefVAPNGosTpngwd30118001;     JzHTSwpJaZefVAPNGosTpngwd30118001 = JzHTSwpJaZefVAPNGosTpngwd23689599;     JzHTSwpJaZefVAPNGosTpngwd23689599 = JzHTSwpJaZefVAPNGosTpngwd38810917;     JzHTSwpJaZefVAPNGosTpngwd38810917 = JzHTSwpJaZefVAPNGosTpngwd58801730;     JzHTSwpJaZefVAPNGosTpngwd58801730 = JzHTSwpJaZefVAPNGosTpngwd49940508;     JzHTSwpJaZefVAPNGosTpngwd49940508 = JzHTSwpJaZefVAPNGosTpngwd84263398;     JzHTSwpJaZefVAPNGosTpngwd84263398 = JzHTSwpJaZefVAPNGosTpngwd95194400;     JzHTSwpJaZefVAPNGosTpngwd95194400 = JzHTSwpJaZefVAPNGosTpngwd25035352;     JzHTSwpJaZefVAPNGosTpngwd25035352 = JzHTSwpJaZefVAPNGosTpngwd48275526;     JzHTSwpJaZefVAPNGosTpngwd48275526 = JzHTSwpJaZefVAPNGosTpngwd29305844;     JzHTSwpJaZefVAPNGosTpngwd29305844 = JzHTSwpJaZefVAPNGosTpngwd99627204;     JzHTSwpJaZefVAPNGosTpngwd99627204 = JzHTSwpJaZefVAPNGosTpngwd66231349;     JzHTSwpJaZefVAPNGosTpngwd66231349 = JzHTSwpJaZefVAPNGosTpngwd67098019;     JzHTSwpJaZefVAPNGosTpngwd67098019 = JzHTSwpJaZefVAPNGosTpngwd28015667;     JzHTSwpJaZefVAPNGosTpngwd28015667 = JzHTSwpJaZefVAPNGosTpngwd35124299;     JzHTSwpJaZefVAPNGosTpngwd35124299 = JzHTSwpJaZefVAPNGosTpngwd86454729;     JzHTSwpJaZefVAPNGosTpngwd86454729 = JzHTSwpJaZefVAPNGosTpngwd65049011;     JzHTSwpJaZefVAPNGosTpngwd65049011 = JzHTSwpJaZefVAPNGosTpngwd5068990;     JzHTSwpJaZefVAPNGosTpngwd5068990 = JzHTSwpJaZefVAPNGosTpngwd15861762;     JzHTSwpJaZefVAPNGosTpngwd15861762 = JzHTSwpJaZefVAPNGosTpngwd7688902;     JzHTSwpJaZefVAPNGosTpngwd7688902 = JzHTSwpJaZefVAPNGosTpngwd21270175;     JzHTSwpJaZefVAPNGosTpngwd21270175 = JzHTSwpJaZefVAPNGosTpngwd43183396;     JzHTSwpJaZefVAPNGosTpngwd43183396 = JzHTSwpJaZefVAPNGosTpngwd80944980;     JzHTSwpJaZefVAPNGosTpngwd80944980 = JzHTSwpJaZefVAPNGosTpngwd75598232;     JzHTSwpJaZefVAPNGosTpngwd75598232 = JzHTSwpJaZefVAPNGosTpngwd4173904;     JzHTSwpJaZefVAPNGosTpngwd4173904 = JzHTSwpJaZefVAPNGosTpngwd58828933;     JzHTSwpJaZefVAPNGosTpngwd58828933 = JzHTSwpJaZefVAPNGosTpngwd16088313;     JzHTSwpJaZefVAPNGosTpngwd16088313 = JzHTSwpJaZefVAPNGosTpngwd32458260;     JzHTSwpJaZefVAPNGosTpngwd32458260 = JzHTSwpJaZefVAPNGosTpngwd22028527;     JzHTSwpJaZefVAPNGosTpngwd22028527 = JzHTSwpJaZefVAPNGosTpngwd24140527;     JzHTSwpJaZefVAPNGosTpngwd24140527 = JzHTSwpJaZefVAPNGosTpngwd2366502;     JzHTSwpJaZefVAPNGosTpngwd2366502 = JzHTSwpJaZefVAPNGosTpngwd30552797;     JzHTSwpJaZefVAPNGosTpngwd30552797 = JzHTSwpJaZefVAPNGosTpngwd44694308;     JzHTSwpJaZefVAPNGosTpngwd44694308 = JzHTSwpJaZefVAPNGosTpngwd35238141;     JzHTSwpJaZefVAPNGosTpngwd35238141 = JzHTSwpJaZefVAPNGosTpngwd86924729;     JzHTSwpJaZefVAPNGosTpngwd86924729 = JzHTSwpJaZefVAPNGosTpngwd14778601;     JzHTSwpJaZefVAPNGosTpngwd14778601 = JzHTSwpJaZefVAPNGosTpngwd51848433;     JzHTSwpJaZefVAPNGosTpngwd51848433 = JzHTSwpJaZefVAPNGosTpngwd60855722;     JzHTSwpJaZefVAPNGosTpngwd60855722 = JzHTSwpJaZefVAPNGosTpngwd69067872;     JzHTSwpJaZefVAPNGosTpngwd69067872 = JzHTSwpJaZefVAPNGosTpngwd65755262;     JzHTSwpJaZefVAPNGosTpngwd65755262 = JzHTSwpJaZefVAPNGosTpngwd96371824;     JzHTSwpJaZefVAPNGosTpngwd96371824 = JzHTSwpJaZefVAPNGosTpngwd18395079;     JzHTSwpJaZefVAPNGosTpngwd18395079 = JzHTSwpJaZefVAPNGosTpngwd13327188;     JzHTSwpJaZefVAPNGosTpngwd13327188 = JzHTSwpJaZefVAPNGosTpngwd32762872;     JzHTSwpJaZefVAPNGosTpngwd32762872 = JzHTSwpJaZefVAPNGosTpngwd89695311;     JzHTSwpJaZefVAPNGosTpngwd89695311 = JzHTSwpJaZefVAPNGosTpngwd33851630;     JzHTSwpJaZefVAPNGosTpngwd33851630 = JzHTSwpJaZefVAPNGosTpngwd30484708;     JzHTSwpJaZefVAPNGosTpngwd30484708 = JzHTSwpJaZefVAPNGosTpngwd27773857;     JzHTSwpJaZefVAPNGosTpngwd27773857 = JzHTSwpJaZefVAPNGosTpngwd4249606;     JzHTSwpJaZefVAPNGosTpngwd4249606 = JzHTSwpJaZefVAPNGosTpngwd23549447;     JzHTSwpJaZefVAPNGosTpngwd23549447 = JzHTSwpJaZefVAPNGosTpngwd19403467;     JzHTSwpJaZefVAPNGosTpngwd19403467 = JzHTSwpJaZefVAPNGosTpngwd41321816;     JzHTSwpJaZefVAPNGosTpngwd41321816 = JzHTSwpJaZefVAPNGosTpngwd33024326;     JzHTSwpJaZefVAPNGosTpngwd33024326 = JzHTSwpJaZefVAPNGosTpngwd43357544;     JzHTSwpJaZefVAPNGosTpngwd43357544 = JzHTSwpJaZefVAPNGosTpngwd504302;     JzHTSwpJaZefVAPNGosTpngwd504302 = JzHTSwpJaZefVAPNGosTpngwd86934604;     JzHTSwpJaZefVAPNGosTpngwd86934604 = JzHTSwpJaZefVAPNGosTpngwd42744619;     JzHTSwpJaZefVAPNGosTpngwd42744619 = JzHTSwpJaZefVAPNGosTpngwd63212685;     JzHTSwpJaZefVAPNGosTpngwd63212685 = JzHTSwpJaZefVAPNGosTpngwd54627827;     JzHTSwpJaZefVAPNGosTpngwd54627827 = JzHTSwpJaZefVAPNGosTpngwd91111575;     JzHTSwpJaZefVAPNGosTpngwd91111575 = JzHTSwpJaZefVAPNGosTpngwd68175086;     JzHTSwpJaZefVAPNGosTpngwd68175086 = JzHTSwpJaZefVAPNGosTpngwd62736141;     JzHTSwpJaZefVAPNGosTpngwd62736141 = JzHTSwpJaZefVAPNGosTpngwd24077370;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void SgImhgYYApGIBWkJYPgRCKydFqTzhgxDgRLVNfNPAsOqGIqtyJzbbdbIh99755531() {     long egrNZqTsDcjLPwsBQRJwHWxAa30194476 = 21173183;    long egrNZqTsDcjLPwsBQRJwHWxAa9253702 = -444114784;    long egrNZqTsDcjLPwsBQRJwHWxAa15297311 = -854500156;    long egrNZqTsDcjLPwsBQRJwHWxAa91775386 = -430930148;    long egrNZqTsDcjLPwsBQRJwHWxAa73681598 = -183742424;    long egrNZqTsDcjLPwsBQRJwHWxAa34430898 = -914037564;    long egrNZqTsDcjLPwsBQRJwHWxAa25409714 = -686964663;    long egrNZqTsDcjLPwsBQRJwHWxAa54016773 = 36928772;    long egrNZqTsDcjLPwsBQRJwHWxAa21054156 = -387363403;    long egrNZqTsDcjLPwsBQRJwHWxAa13107496 = -182849302;    long egrNZqTsDcjLPwsBQRJwHWxAa31942455 = -481425297;    long egrNZqTsDcjLPwsBQRJwHWxAa63855745 = -893234702;    long egrNZqTsDcjLPwsBQRJwHWxAa94802123 = -215403233;    long egrNZqTsDcjLPwsBQRJwHWxAa31900984 = -400612516;    long egrNZqTsDcjLPwsBQRJwHWxAa75181311 = -262043870;    long egrNZqTsDcjLPwsBQRJwHWxAa37246148 = -442996350;    long egrNZqTsDcjLPwsBQRJwHWxAa50848620 = -671612987;    long egrNZqTsDcjLPwsBQRJwHWxAa14095883 = -991977629;    long egrNZqTsDcjLPwsBQRJwHWxAa298041 = 6017379;    long egrNZqTsDcjLPwsBQRJwHWxAa71209514 = -385443909;    long egrNZqTsDcjLPwsBQRJwHWxAa8210646 = -545192262;    long egrNZqTsDcjLPwsBQRJwHWxAa5529404 = -924659839;    long egrNZqTsDcjLPwsBQRJwHWxAa85609452 = -694409832;    long egrNZqTsDcjLPwsBQRJwHWxAa75558599 = -550813451;    long egrNZqTsDcjLPwsBQRJwHWxAa87130080 = -300382849;    long egrNZqTsDcjLPwsBQRJwHWxAa86324389 = -863950921;    long egrNZqTsDcjLPwsBQRJwHWxAa60528493 = -518589975;    long egrNZqTsDcjLPwsBQRJwHWxAa2429642 = 33962416;    long egrNZqTsDcjLPwsBQRJwHWxAa66215234 = -430008901;    long egrNZqTsDcjLPwsBQRJwHWxAa66198364 = -942477640;    long egrNZqTsDcjLPwsBQRJwHWxAa48032073 = -844814084;    long egrNZqTsDcjLPwsBQRJwHWxAa36984527 = -951927552;    long egrNZqTsDcjLPwsBQRJwHWxAa19715125 = -919231441;    long egrNZqTsDcjLPwsBQRJwHWxAa79283042 = -381549256;    long egrNZqTsDcjLPwsBQRJwHWxAa7865458 = -369462307;    long egrNZqTsDcjLPwsBQRJwHWxAa17612001 = -232912044;    long egrNZqTsDcjLPwsBQRJwHWxAa32308381 = -889577051;    long egrNZqTsDcjLPwsBQRJwHWxAa55864689 = -544676067;    long egrNZqTsDcjLPwsBQRJwHWxAa3728255 = -858463021;    long egrNZqTsDcjLPwsBQRJwHWxAa11191536 = -388566111;    long egrNZqTsDcjLPwsBQRJwHWxAa44480141 = -111761784;    long egrNZqTsDcjLPwsBQRJwHWxAa90952187 = -347199305;    long egrNZqTsDcjLPwsBQRJwHWxAa28007486 = -102429933;    long egrNZqTsDcjLPwsBQRJwHWxAa71671139 = -852030979;    long egrNZqTsDcjLPwsBQRJwHWxAa7146866 = -603370465;    long egrNZqTsDcjLPwsBQRJwHWxAa36974546 = -73120034;    long egrNZqTsDcjLPwsBQRJwHWxAa66054100 = -766330407;    long egrNZqTsDcjLPwsBQRJwHWxAa37262785 = 64025731;    long egrNZqTsDcjLPwsBQRJwHWxAa9302934 = -457874637;    long egrNZqTsDcjLPwsBQRJwHWxAa79143001 = -46823199;    long egrNZqTsDcjLPwsBQRJwHWxAa2798698 = 8113735;    long egrNZqTsDcjLPwsBQRJwHWxAa38825386 = -973365242;    long egrNZqTsDcjLPwsBQRJwHWxAa83372756 = -101348737;    long egrNZqTsDcjLPwsBQRJwHWxAa82423609 = -442003207;    long egrNZqTsDcjLPwsBQRJwHWxAa91544885 = -220729420;    long egrNZqTsDcjLPwsBQRJwHWxAa24665073 = -54166978;    long egrNZqTsDcjLPwsBQRJwHWxAa23644250 = -749704953;    long egrNZqTsDcjLPwsBQRJwHWxAa39738712 = -203686705;    long egrNZqTsDcjLPwsBQRJwHWxAa4645306 = -30547300;    long egrNZqTsDcjLPwsBQRJwHWxAa87357209 = -319791503;    long egrNZqTsDcjLPwsBQRJwHWxAa73902404 = -295447589;    long egrNZqTsDcjLPwsBQRJwHWxAa22980073 = -620927079;    long egrNZqTsDcjLPwsBQRJwHWxAa87801538 = -533062327;    long egrNZqTsDcjLPwsBQRJwHWxAa54855791 = -444885764;    long egrNZqTsDcjLPwsBQRJwHWxAa65075422 = -338035219;    long egrNZqTsDcjLPwsBQRJwHWxAa94957927 = -529497745;    long egrNZqTsDcjLPwsBQRJwHWxAa44140621 = -974003261;    long egrNZqTsDcjLPwsBQRJwHWxAa15519081 = -833853977;    long egrNZqTsDcjLPwsBQRJwHWxAa24035527 = 68849791;    long egrNZqTsDcjLPwsBQRJwHWxAa57569311 = 70868173;    long egrNZqTsDcjLPwsBQRJwHWxAa4937768 = -553419300;    long egrNZqTsDcjLPwsBQRJwHWxAa94983931 = -26936921;    long egrNZqTsDcjLPwsBQRJwHWxAa10367629 = -33514609;    long egrNZqTsDcjLPwsBQRJwHWxAa89106504 = -605416511;    long egrNZqTsDcjLPwsBQRJwHWxAa26729374 = -173682125;    long egrNZqTsDcjLPwsBQRJwHWxAa17258459 = -97992958;    long egrNZqTsDcjLPwsBQRJwHWxAa77521917 = -722229907;    long egrNZqTsDcjLPwsBQRJwHWxAa13938313 = -842378854;    long egrNZqTsDcjLPwsBQRJwHWxAa68411733 = -947442986;    long egrNZqTsDcjLPwsBQRJwHWxAa50155534 = -127262815;    long egrNZqTsDcjLPwsBQRJwHWxAa20270289 = 2379486;    long egrNZqTsDcjLPwsBQRJwHWxAa23265709 = -482615707;    long egrNZqTsDcjLPwsBQRJwHWxAa93126707 = -508162948;    long egrNZqTsDcjLPwsBQRJwHWxAa87072232 = -283185703;    long egrNZqTsDcjLPwsBQRJwHWxAa63399666 = -850591375;    long egrNZqTsDcjLPwsBQRJwHWxAa9206687 = -871448842;    long egrNZqTsDcjLPwsBQRJwHWxAa53611770 = -750578816;    long egrNZqTsDcjLPwsBQRJwHWxAa37291515 = -377228234;    long egrNZqTsDcjLPwsBQRJwHWxAa87738156 = -60819836;    long egrNZqTsDcjLPwsBQRJwHWxAa83200385 = -215295330;    long egrNZqTsDcjLPwsBQRJwHWxAa93967751 = -483207092;    long egrNZqTsDcjLPwsBQRJwHWxAa92569669 = -585890346;    long egrNZqTsDcjLPwsBQRJwHWxAa51219383 = -414128767;    long egrNZqTsDcjLPwsBQRJwHWxAa16371045 = -438671518;    long egrNZqTsDcjLPwsBQRJwHWxAa37289132 = 6881478;    long egrNZqTsDcjLPwsBQRJwHWxAa21500068 = -490834706;    long egrNZqTsDcjLPwsBQRJwHWxAa3150649 = -814136979;    long egrNZqTsDcjLPwsBQRJwHWxAa73151695 = -657544170;    long egrNZqTsDcjLPwsBQRJwHWxAa6595717 = -413995761;    long egrNZqTsDcjLPwsBQRJwHWxAa12188938 = 21173183;     egrNZqTsDcjLPwsBQRJwHWxAa30194476 = egrNZqTsDcjLPwsBQRJwHWxAa9253702;     egrNZqTsDcjLPwsBQRJwHWxAa9253702 = egrNZqTsDcjLPwsBQRJwHWxAa15297311;     egrNZqTsDcjLPwsBQRJwHWxAa15297311 = egrNZqTsDcjLPwsBQRJwHWxAa91775386;     egrNZqTsDcjLPwsBQRJwHWxAa91775386 = egrNZqTsDcjLPwsBQRJwHWxAa73681598;     egrNZqTsDcjLPwsBQRJwHWxAa73681598 = egrNZqTsDcjLPwsBQRJwHWxAa34430898;     egrNZqTsDcjLPwsBQRJwHWxAa34430898 = egrNZqTsDcjLPwsBQRJwHWxAa25409714;     egrNZqTsDcjLPwsBQRJwHWxAa25409714 = egrNZqTsDcjLPwsBQRJwHWxAa54016773;     egrNZqTsDcjLPwsBQRJwHWxAa54016773 = egrNZqTsDcjLPwsBQRJwHWxAa21054156;     egrNZqTsDcjLPwsBQRJwHWxAa21054156 = egrNZqTsDcjLPwsBQRJwHWxAa13107496;     egrNZqTsDcjLPwsBQRJwHWxAa13107496 = egrNZqTsDcjLPwsBQRJwHWxAa31942455;     egrNZqTsDcjLPwsBQRJwHWxAa31942455 = egrNZqTsDcjLPwsBQRJwHWxAa63855745;     egrNZqTsDcjLPwsBQRJwHWxAa63855745 = egrNZqTsDcjLPwsBQRJwHWxAa94802123;     egrNZqTsDcjLPwsBQRJwHWxAa94802123 = egrNZqTsDcjLPwsBQRJwHWxAa31900984;     egrNZqTsDcjLPwsBQRJwHWxAa31900984 = egrNZqTsDcjLPwsBQRJwHWxAa75181311;     egrNZqTsDcjLPwsBQRJwHWxAa75181311 = egrNZqTsDcjLPwsBQRJwHWxAa37246148;     egrNZqTsDcjLPwsBQRJwHWxAa37246148 = egrNZqTsDcjLPwsBQRJwHWxAa50848620;     egrNZqTsDcjLPwsBQRJwHWxAa50848620 = egrNZqTsDcjLPwsBQRJwHWxAa14095883;     egrNZqTsDcjLPwsBQRJwHWxAa14095883 = egrNZqTsDcjLPwsBQRJwHWxAa298041;     egrNZqTsDcjLPwsBQRJwHWxAa298041 = egrNZqTsDcjLPwsBQRJwHWxAa71209514;     egrNZqTsDcjLPwsBQRJwHWxAa71209514 = egrNZqTsDcjLPwsBQRJwHWxAa8210646;     egrNZqTsDcjLPwsBQRJwHWxAa8210646 = egrNZqTsDcjLPwsBQRJwHWxAa5529404;     egrNZqTsDcjLPwsBQRJwHWxAa5529404 = egrNZqTsDcjLPwsBQRJwHWxAa85609452;     egrNZqTsDcjLPwsBQRJwHWxAa85609452 = egrNZqTsDcjLPwsBQRJwHWxAa75558599;     egrNZqTsDcjLPwsBQRJwHWxAa75558599 = egrNZqTsDcjLPwsBQRJwHWxAa87130080;     egrNZqTsDcjLPwsBQRJwHWxAa87130080 = egrNZqTsDcjLPwsBQRJwHWxAa86324389;     egrNZqTsDcjLPwsBQRJwHWxAa86324389 = egrNZqTsDcjLPwsBQRJwHWxAa60528493;     egrNZqTsDcjLPwsBQRJwHWxAa60528493 = egrNZqTsDcjLPwsBQRJwHWxAa2429642;     egrNZqTsDcjLPwsBQRJwHWxAa2429642 = egrNZqTsDcjLPwsBQRJwHWxAa66215234;     egrNZqTsDcjLPwsBQRJwHWxAa66215234 = egrNZqTsDcjLPwsBQRJwHWxAa66198364;     egrNZqTsDcjLPwsBQRJwHWxAa66198364 = egrNZqTsDcjLPwsBQRJwHWxAa48032073;     egrNZqTsDcjLPwsBQRJwHWxAa48032073 = egrNZqTsDcjLPwsBQRJwHWxAa36984527;     egrNZqTsDcjLPwsBQRJwHWxAa36984527 = egrNZqTsDcjLPwsBQRJwHWxAa19715125;     egrNZqTsDcjLPwsBQRJwHWxAa19715125 = egrNZqTsDcjLPwsBQRJwHWxAa79283042;     egrNZqTsDcjLPwsBQRJwHWxAa79283042 = egrNZqTsDcjLPwsBQRJwHWxAa7865458;     egrNZqTsDcjLPwsBQRJwHWxAa7865458 = egrNZqTsDcjLPwsBQRJwHWxAa17612001;     egrNZqTsDcjLPwsBQRJwHWxAa17612001 = egrNZqTsDcjLPwsBQRJwHWxAa32308381;     egrNZqTsDcjLPwsBQRJwHWxAa32308381 = egrNZqTsDcjLPwsBQRJwHWxAa55864689;     egrNZqTsDcjLPwsBQRJwHWxAa55864689 = egrNZqTsDcjLPwsBQRJwHWxAa3728255;     egrNZqTsDcjLPwsBQRJwHWxAa3728255 = egrNZqTsDcjLPwsBQRJwHWxAa11191536;     egrNZqTsDcjLPwsBQRJwHWxAa11191536 = egrNZqTsDcjLPwsBQRJwHWxAa44480141;     egrNZqTsDcjLPwsBQRJwHWxAa44480141 = egrNZqTsDcjLPwsBQRJwHWxAa90952187;     egrNZqTsDcjLPwsBQRJwHWxAa90952187 = egrNZqTsDcjLPwsBQRJwHWxAa28007486;     egrNZqTsDcjLPwsBQRJwHWxAa28007486 = egrNZqTsDcjLPwsBQRJwHWxAa71671139;     egrNZqTsDcjLPwsBQRJwHWxAa71671139 = egrNZqTsDcjLPwsBQRJwHWxAa7146866;     egrNZqTsDcjLPwsBQRJwHWxAa7146866 = egrNZqTsDcjLPwsBQRJwHWxAa36974546;     egrNZqTsDcjLPwsBQRJwHWxAa36974546 = egrNZqTsDcjLPwsBQRJwHWxAa66054100;     egrNZqTsDcjLPwsBQRJwHWxAa66054100 = egrNZqTsDcjLPwsBQRJwHWxAa37262785;     egrNZqTsDcjLPwsBQRJwHWxAa37262785 = egrNZqTsDcjLPwsBQRJwHWxAa9302934;     egrNZqTsDcjLPwsBQRJwHWxAa9302934 = egrNZqTsDcjLPwsBQRJwHWxAa79143001;     egrNZqTsDcjLPwsBQRJwHWxAa79143001 = egrNZqTsDcjLPwsBQRJwHWxAa2798698;     egrNZqTsDcjLPwsBQRJwHWxAa2798698 = egrNZqTsDcjLPwsBQRJwHWxAa38825386;     egrNZqTsDcjLPwsBQRJwHWxAa38825386 = egrNZqTsDcjLPwsBQRJwHWxAa83372756;     egrNZqTsDcjLPwsBQRJwHWxAa83372756 = egrNZqTsDcjLPwsBQRJwHWxAa82423609;     egrNZqTsDcjLPwsBQRJwHWxAa82423609 = egrNZqTsDcjLPwsBQRJwHWxAa91544885;     egrNZqTsDcjLPwsBQRJwHWxAa91544885 = egrNZqTsDcjLPwsBQRJwHWxAa24665073;     egrNZqTsDcjLPwsBQRJwHWxAa24665073 = egrNZqTsDcjLPwsBQRJwHWxAa23644250;     egrNZqTsDcjLPwsBQRJwHWxAa23644250 = egrNZqTsDcjLPwsBQRJwHWxAa39738712;     egrNZqTsDcjLPwsBQRJwHWxAa39738712 = egrNZqTsDcjLPwsBQRJwHWxAa4645306;     egrNZqTsDcjLPwsBQRJwHWxAa4645306 = egrNZqTsDcjLPwsBQRJwHWxAa87357209;     egrNZqTsDcjLPwsBQRJwHWxAa87357209 = egrNZqTsDcjLPwsBQRJwHWxAa73902404;     egrNZqTsDcjLPwsBQRJwHWxAa73902404 = egrNZqTsDcjLPwsBQRJwHWxAa22980073;     egrNZqTsDcjLPwsBQRJwHWxAa22980073 = egrNZqTsDcjLPwsBQRJwHWxAa87801538;     egrNZqTsDcjLPwsBQRJwHWxAa87801538 = egrNZqTsDcjLPwsBQRJwHWxAa54855791;     egrNZqTsDcjLPwsBQRJwHWxAa54855791 = egrNZqTsDcjLPwsBQRJwHWxAa65075422;     egrNZqTsDcjLPwsBQRJwHWxAa65075422 = egrNZqTsDcjLPwsBQRJwHWxAa94957927;     egrNZqTsDcjLPwsBQRJwHWxAa94957927 = egrNZqTsDcjLPwsBQRJwHWxAa44140621;     egrNZqTsDcjLPwsBQRJwHWxAa44140621 = egrNZqTsDcjLPwsBQRJwHWxAa15519081;     egrNZqTsDcjLPwsBQRJwHWxAa15519081 = egrNZqTsDcjLPwsBQRJwHWxAa24035527;     egrNZqTsDcjLPwsBQRJwHWxAa24035527 = egrNZqTsDcjLPwsBQRJwHWxAa57569311;     egrNZqTsDcjLPwsBQRJwHWxAa57569311 = egrNZqTsDcjLPwsBQRJwHWxAa4937768;     egrNZqTsDcjLPwsBQRJwHWxAa4937768 = egrNZqTsDcjLPwsBQRJwHWxAa94983931;     egrNZqTsDcjLPwsBQRJwHWxAa94983931 = egrNZqTsDcjLPwsBQRJwHWxAa10367629;     egrNZqTsDcjLPwsBQRJwHWxAa10367629 = egrNZqTsDcjLPwsBQRJwHWxAa89106504;     egrNZqTsDcjLPwsBQRJwHWxAa89106504 = egrNZqTsDcjLPwsBQRJwHWxAa26729374;     egrNZqTsDcjLPwsBQRJwHWxAa26729374 = egrNZqTsDcjLPwsBQRJwHWxAa17258459;     egrNZqTsDcjLPwsBQRJwHWxAa17258459 = egrNZqTsDcjLPwsBQRJwHWxAa77521917;     egrNZqTsDcjLPwsBQRJwHWxAa77521917 = egrNZqTsDcjLPwsBQRJwHWxAa13938313;     egrNZqTsDcjLPwsBQRJwHWxAa13938313 = egrNZqTsDcjLPwsBQRJwHWxAa68411733;     egrNZqTsDcjLPwsBQRJwHWxAa68411733 = egrNZqTsDcjLPwsBQRJwHWxAa50155534;     egrNZqTsDcjLPwsBQRJwHWxAa50155534 = egrNZqTsDcjLPwsBQRJwHWxAa20270289;     egrNZqTsDcjLPwsBQRJwHWxAa20270289 = egrNZqTsDcjLPwsBQRJwHWxAa23265709;     egrNZqTsDcjLPwsBQRJwHWxAa23265709 = egrNZqTsDcjLPwsBQRJwHWxAa93126707;     egrNZqTsDcjLPwsBQRJwHWxAa93126707 = egrNZqTsDcjLPwsBQRJwHWxAa87072232;     egrNZqTsDcjLPwsBQRJwHWxAa87072232 = egrNZqTsDcjLPwsBQRJwHWxAa63399666;     egrNZqTsDcjLPwsBQRJwHWxAa63399666 = egrNZqTsDcjLPwsBQRJwHWxAa9206687;     egrNZqTsDcjLPwsBQRJwHWxAa9206687 = egrNZqTsDcjLPwsBQRJwHWxAa53611770;     egrNZqTsDcjLPwsBQRJwHWxAa53611770 = egrNZqTsDcjLPwsBQRJwHWxAa37291515;     egrNZqTsDcjLPwsBQRJwHWxAa37291515 = egrNZqTsDcjLPwsBQRJwHWxAa87738156;     egrNZqTsDcjLPwsBQRJwHWxAa87738156 = egrNZqTsDcjLPwsBQRJwHWxAa83200385;     egrNZqTsDcjLPwsBQRJwHWxAa83200385 = egrNZqTsDcjLPwsBQRJwHWxAa93967751;     egrNZqTsDcjLPwsBQRJwHWxAa93967751 = egrNZqTsDcjLPwsBQRJwHWxAa92569669;     egrNZqTsDcjLPwsBQRJwHWxAa92569669 = egrNZqTsDcjLPwsBQRJwHWxAa51219383;     egrNZqTsDcjLPwsBQRJwHWxAa51219383 = egrNZqTsDcjLPwsBQRJwHWxAa16371045;     egrNZqTsDcjLPwsBQRJwHWxAa16371045 = egrNZqTsDcjLPwsBQRJwHWxAa37289132;     egrNZqTsDcjLPwsBQRJwHWxAa37289132 = egrNZqTsDcjLPwsBQRJwHWxAa21500068;     egrNZqTsDcjLPwsBQRJwHWxAa21500068 = egrNZqTsDcjLPwsBQRJwHWxAa3150649;     egrNZqTsDcjLPwsBQRJwHWxAa3150649 = egrNZqTsDcjLPwsBQRJwHWxAa73151695;     egrNZqTsDcjLPwsBQRJwHWxAa73151695 = egrNZqTsDcjLPwsBQRJwHWxAa6595717;     egrNZqTsDcjLPwsBQRJwHWxAa6595717 = egrNZqTsDcjLPwsBQRJwHWxAa12188938;     egrNZqTsDcjLPwsBQRJwHWxAa12188938 = egrNZqTsDcjLPwsBQRJwHWxAa30194476;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JoyufUpcUTZXFMSRwniFupvrkVYDlJQygziIwPMLazTdeRfPSleiJxaUs67047131() {     long GKJvlqLDbrGdJVgaXfvVRMSpJ65653444 = -445103717;    long GKJvlqLDbrGdJVgaXfvVRMSpJ22525780 = -324666391;    long GKJvlqLDbrGdJVgaXfvVRMSpJ52683787 = -520167231;    long GKJvlqLDbrGdJVgaXfvVRMSpJ63998741 = -252081220;    long GKJvlqLDbrGdJVgaXfvVRMSpJ29966868 = -289341269;    long GKJvlqLDbrGdJVgaXfvVRMSpJ70653769 = -76385460;    long GKJvlqLDbrGdJVgaXfvVRMSpJ36067120 = -531690397;    long GKJvlqLDbrGdJVgaXfvVRMSpJ16148334 = -707305368;    long GKJvlqLDbrGdJVgaXfvVRMSpJ22571761 = -875694810;    long GKJvlqLDbrGdJVgaXfvVRMSpJ28010208 = -947536300;    long GKJvlqLDbrGdJVgaXfvVRMSpJ70124189 = -283433026;    long GKJvlqLDbrGdJVgaXfvVRMSpJ64423894 = -757355473;    long GKJvlqLDbrGdJVgaXfvVRMSpJ33036769 = -767415738;    long GKJvlqLDbrGdJVgaXfvVRMSpJ85041847 = -376975925;    long GKJvlqLDbrGdJVgaXfvVRMSpJ33375828 = -765468885;    long GKJvlqLDbrGdJVgaXfvVRMSpJ20787449 = -78807957;    long GKJvlqLDbrGdJVgaXfvVRMSpJ6684556 = -98587539;    long GKJvlqLDbrGdJVgaXfvVRMSpJ13856074 = 34594302;    long GKJvlqLDbrGdJVgaXfvVRMSpJ848371 = -310546043;    long GKJvlqLDbrGdJVgaXfvVRMSpJ65046733 = -812004975;    long GKJvlqLDbrGdJVgaXfvVRMSpJ21297509 = -202466951;    long GKJvlqLDbrGdJVgaXfvVRMSpJ8950929 = 88703867;    long GKJvlqLDbrGdJVgaXfvVRMSpJ56134832 = -332042016;    long GKJvlqLDbrGdJVgaXfvVRMSpJ69351544 = 38361945;    long GKJvlqLDbrGdJVgaXfvVRMSpJ95148031 = -324368047;    long GKJvlqLDbrGdJVgaXfvVRMSpJ97022560 = -552527728;    long GKJvlqLDbrGdJVgaXfvVRMSpJ20949068 = -324874116;    long GKJvlqLDbrGdJVgaXfvVRMSpJ43158066 = -135809759;    long GKJvlqLDbrGdJVgaXfvVRMSpJ12883449 = 95896296;    long GKJvlqLDbrGdJVgaXfvVRMSpJ71731775 = -976984810;    long GKJvlqLDbrGdJVgaXfvVRMSpJ66615304 = -296794571;    long GKJvlqLDbrGdJVgaXfvVRMSpJ74807545 = -724898966;    long GKJvlqLDbrGdJVgaXfvVRMSpJ31933136 = 33172582;    long GKJvlqLDbrGdJVgaXfvVRMSpJ9031469 = -446243070;    long GKJvlqLDbrGdJVgaXfvVRMSpJ73673911 = -320562558;    long GKJvlqLDbrGdJVgaXfvVRMSpJ69172844 = -447477350;    long GKJvlqLDbrGdJVgaXfvVRMSpJ81720197 = -754273091;    long GKJvlqLDbrGdJVgaXfvVRMSpJ7080093 = -527331648;    long GKJvlqLDbrGdJVgaXfvVRMSpJ34118816 = -509339297;    long GKJvlqLDbrGdJVgaXfvVRMSpJ75463068 = -953828657;    long GKJvlqLDbrGdJVgaXfvVRMSpJ77931748 = -980960698;    long GKJvlqLDbrGdJVgaXfvVRMSpJ80317313 = 58255404;    long GKJvlqLDbrGdJVgaXfvVRMSpJ17390865 = -755610719;    long GKJvlqLDbrGdJVgaXfvVRMSpJ11802478 = -356363389;    long GKJvlqLDbrGdJVgaXfvVRMSpJ7163325 = -429881627;    long GKJvlqLDbrGdJVgaXfvVRMSpJ82935874 = -112043667;    long GKJvlqLDbrGdJVgaXfvVRMSpJ85399264 = -150316768;    long GKJvlqLDbrGdJVgaXfvVRMSpJ54989097 = -102500863;    long GKJvlqLDbrGdJVgaXfvVRMSpJ32195600 = -121611517;    long GKJvlqLDbrGdJVgaXfvVRMSpJ3672591 = -537850015;    long GKJvlqLDbrGdJVgaXfvVRMSpJ83569421 = -966162823;    long GKJvlqLDbrGdJVgaXfvVRMSpJ22310859 = -87017589;    long GKJvlqLDbrGdJVgaXfvVRMSpJ51993905 = -957394291;    long GKJvlqLDbrGdJVgaXfvVRMSpJ98415456 = -633511707;    long GKJvlqLDbrGdJVgaXfvVRMSpJ45749622 = -567219566;    long GKJvlqLDbrGdJVgaXfvVRMSpJ56702516 = -433807584;    long GKJvlqLDbrGdJVgaXfvVRMSpJ66390948 = -992624375;    long GKJvlqLDbrGdJVgaXfvVRMSpJ83332243 = -458529176;    long GKJvlqLDbrGdJVgaXfvVRMSpJ68850709 = -927713173;    long GKJvlqLDbrGdJVgaXfvVRMSpJ32944307 = -736813542;    long GKJvlqLDbrGdJVgaXfvVRMSpJ49704702 = -751511344;    long GKJvlqLDbrGdJVgaXfvVRMSpJ92909054 = -295880639;    long GKJvlqLDbrGdJVgaXfvVRMSpJ3264886 = -703201665;    long GKJvlqLDbrGdJVgaXfvVRMSpJ50839986 = -898710000;    long GKJvlqLDbrGdJVgaXfvVRMSpJ61394903 = -550741730;    long GKJvlqLDbrGdJVgaXfvVRMSpJ95316644 = -558534060;    long GKJvlqLDbrGdJVgaXfvVRMSpJ32490758 = -690528055;    long GKJvlqLDbrGdJVgaXfvVRMSpJ24005300 = -221172669;    long GKJvlqLDbrGdJVgaXfvVRMSpJ11367936 = 43586632;    long GKJvlqLDbrGdJVgaXfvVRMSpJ64202983 = -217991536;    long GKJvlqLDbrGdJVgaXfvVRMSpJ39067252 = -324534866;    long GKJvlqLDbrGdJVgaXfvVRMSpJ99604463 = -571255892;    long GKJvlqLDbrGdJVgaXfvVRMSpJ79737258 = -456066401;    long GKJvlqLDbrGdJVgaXfvVRMSpJ25385303 = -356717386;    long GKJvlqLDbrGdJVgaXfvVRMSpJ87114984 = -831044277;    long GKJvlqLDbrGdJVgaXfvVRMSpJ40980195 = -160722355;    long GKJvlqLDbrGdJVgaXfvVRMSpJ91560063 = -155685415;    long GKJvlqLDbrGdJVgaXfvVRMSpJ44332355 = -975678628;    long GKJvlqLDbrGdJVgaXfvVRMSpJ62188219 = -531756429;    long GKJvlqLDbrGdJVgaXfvVRMSpJ12212157 = -112324381;    long GKJvlqLDbrGdJVgaXfvVRMSpJ11623297 = -302210960;    long GKJvlqLDbrGdJVgaXfvVRMSpJ65959971 = -122373254;    long GKJvlqLDbrGdJVgaXfvVRMSpJ10962467 = 85801758;    long GKJvlqLDbrGdJVgaXfvVRMSpJ9210858 = -366253689;    long GKJvlqLDbrGdJVgaXfvVRMSpJ88162353 = 89178012;    long GKJvlqLDbrGdJVgaXfvVRMSpJ44304446 = -109776982;    long GKJvlqLDbrGdJVgaXfvVRMSpJ22813640 = -767504676;    long GKJvlqLDbrGdJVgaXfvVRMSpJ33517679 = -333315712;    long GKJvlqLDbrGdJVgaXfvVRMSpJ63281846 = -879023504;    long GKJvlqLDbrGdJVgaXfvVRMSpJ16971396 = -886754975;    long GKJvlqLDbrGdJVgaXfvVRMSpJ2781897 = -454852975;    long GKJvlqLDbrGdJVgaXfvVRMSpJ98387954 = -195743916;    long GKJvlqLDbrGdJVgaXfvVRMSpJ38229383 = -599618475;    long GKJvlqLDbrGdJVgaXfvVRMSpJ1174509 = -772525756;    long GKJvlqLDbrGdJVgaXfvVRMSpJ25758366 = -102317313;    long GKJvlqLDbrGdJVgaXfvVRMSpJ85022694 = -585080060;    long GKJvlqLDbrGdJVgaXfvVRMSpJ77052428 = -238542932;    long GKJvlqLDbrGdJVgaXfvVRMSpJ66550879 = -856900719;    long GKJvlqLDbrGdJVgaXfvVRMSpJ50407574 = -805621660;    long GKJvlqLDbrGdJVgaXfvVRMSpJ11846681 = -445103717;     GKJvlqLDbrGdJVgaXfvVRMSpJ65653444 = GKJvlqLDbrGdJVgaXfvVRMSpJ22525780;     GKJvlqLDbrGdJVgaXfvVRMSpJ22525780 = GKJvlqLDbrGdJVgaXfvVRMSpJ52683787;     GKJvlqLDbrGdJVgaXfvVRMSpJ52683787 = GKJvlqLDbrGdJVgaXfvVRMSpJ63998741;     GKJvlqLDbrGdJVgaXfvVRMSpJ63998741 = GKJvlqLDbrGdJVgaXfvVRMSpJ29966868;     GKJvlqLDbrGdJVgaXfvVRMSpJ29966868 = GKJvlqLDbrGdJVgaXfvVRMSpJ70653769;     GKJvlqLDbrGdJVgaXfvVRMSpJ70653769 = GKJvlqLDbrGdJVgaXfvVRMSpJ36067120;     GKJvlqLDbrGdJVgaXfvVRMSpJ36067120 = GKJvlqLDbrGdJVgaXfvVRMSpJ16148334;     GKJvlqLDbrGdJVgaXfvVRMSpJ16148334 = GKJvlqLDbrGdJVgaXfvVRMSpJ22571761;     GKJvlqLDbrGdJVgaXfvVRMSpJ22571761 = GKJvlqLDbrGdJVgaXfvVRMSpJ28010208;     GKJvlqLDbrGdJVgaXfvVRMSpJ28010208 = GKJvlqLDbrGdJVgaXfvVRMSpJ70124189;     GKJvlqLDbrGdJVgaXfvVRMSpJ70124189 = GKJvlqLDbrGdJVgaXfvVRMSpJ64423894;     GKJvlqLDbrGdJVgaXfvVRMSpJ64423894 = GKJvlqLDbrGdJVgaXfvVRMSpJ33036769;     GKJvlqLDbrGdJVgaXfvVRMSpJ33036769 = GKJvlqLDbrGdJVgaXfvVRMSpJ85041847;     GKJvlqLDbrGdJVgaXfvVRMSpJ85041847 = GKJvlqLDbrGdJVgaXfvVRMSpJ33375828;     GKJvlqLDbrGdJVgaXfvVRMSpJ33375828 = GKJvlqLDbrGdJVgaXfvVRMSpJ20787449;     GKJvlqLDbrGdJVgaXfvVRMSpJ20787449 = GKJvlqLDbrGdJVgaXfvVRMSpJ6684556;     GKJvlqLDbrGdJVgaXfvVRMSpJ6684556 = GKJvlqLDbrGdJVgaXfvVRMSpJ13856074;     GKJvlqLDbrGdJVgaXfvVRMSpJ13856074 = GKJvlqLDbrGdJVgaXfvVRMSpJ848371;     GKJvlqLDbrGdJVgaXfvVRMSpJ848371 = GKJvlqLDbrGdJVgaXfvVRMSpJ65046733;     GKJvlqLDbrGdJVgaXfvVRMSpJ65046733 = GKJvlqLDbrGdJVgaXfvVRMSpJ21297509;     GKJvlqLDbrGdJVgaXfvVRMSpJ21297509 = GKJvlqLDbrGdJVgaXfvVRMSpJ8950929;     GKJvlqLDbrGdJVgaXfvVRMSpJ8950929 = GKJvlqLDbrGdJVgaXfvVRMSpJ56134832;     GKJvlqLDbrGdJVgaXfvVRMSpJ56134832 = GKJvlqLDbrGdJVgaXfvVRMSpJ69351544;     GKJvlqLDbrGdJVgaXfvVRMSpJ69351544 = GKJvlqLDbrGdJVgaXfvVRMSpJ95148031;     GKJvlqLDbrGdJVgaXfvVRMSpJ95148031 = GKJvlqLDbrGdJVgaXfvVRMSpJ97022560;     GKJvlqLDbrGdJVgaXfvVRMSpJ97022560 = GKJvlqLDbrGdJVgaXfvVRMSpJ20949068;     GKJvlqLDbrGdJVgaXfvVRMSpJ20949068 = GKJvlqLDbrGdJVgaXfvVRMSpJ43158066;     GKJvlqLDbrGdJVgaXfvVRMSpJ43158066 = GKJvlqLDbrGdJVgaXfvVRMSpJ12883449;     GKJvlqLDbrGdJVgaXfvVRMSpJ12883449 = GKJvlqLDbrGdJVgaXfvVRMSpJ71731775;     GKJvlqLDbrGdJVgaXfvVRMSpJ71731775 = GKJvlqLDbrGdJVgaXfvVRMSpJ66615304;     GKJvlqLDbrGdJVgaXfvVRMSpJ66615304 = GKJvlqLDbrGdJVgaXfvVRMSpJ74807545;     GKJvlqLDbrGdJVgaXfvVRMSpJ74807545 = GKJvlqLDbrGdJVgaXfvVRMSpJ31933136;     GKJvlqLDbrGdJVgaXfvVRMSpJ31933136 = GKJvlqLDbrGdJVgaXfvVRMSpJ9031469;     GKJvlqLDbrGdJVgaXfvVRMSpJ9031469 = GKJvlqLDbrGdJVgaXfvVRMSpJ73673911;     GKJvlqLDbrGdJVgaXfvVRMSpJ73673911 = GKJvlqLDbrGdJVgaXfvVRMSpJ69172844;     GKJvlqLDbrGdJVgaXfvVRMSpJ69172844 = GKJvlqLDbrGdJVgaXfvVRMSpJ81720197;     GKJvlqLDbrGdJVgaXfvVRMSpJ81720197 = GKJvlqLDbrGdJVgaXfvVRMSpJ7080093;     GKJvlqLDbrGdJVgaXfvVRMSpJ7080093 = GKJvlqLDbrGdJVgaXfvVRMSpJ34118816;     GKJvlqLDbrGdJVgaXfvVRMSpJ34118816 = GKJvlqLDbrGdJVgaXfvVRMSpJ75463068;     GKJvlqLDbrGdJVgaXfvVRMSpJ75463068 = GKJvlqLDbrGdJVgaXfvVRMSpJ77931748;     GKJvlqLDbrGdJVgaXfvVRMSpJ77931748 = GKJvlqLDbrGdJVgaXfvVRMSpJ80317313;     GKJvlqLDbrGdJVgaXfvVRMSpJ80317313 = GKJvlqLDbrGdJVgaXfvVRMSpJ17390865;     GKJvlqLDbrGdJVgaXfvVRMSpJ17390865 = GKJvlqLDbrGdJVgaXfvVRMSpJ11802478;     GKJvlqLDbrGdJVgaXfvVRMSpJ11802478 = GKJvlqLDbrGdJVgaXfvVRMSpJ7163325;     GKJvlqLDbrGdJVgaXfvVRMSpJ7163325 = GKJvlqLDbrGdJVgaXfvVRMSpJ82935874;     GKJvlqLDbrGdJVgaXfvVRMSpJ82935874 = GKJvlqLDbrGdJVgaXfvVRMSpJ85399264;     GKJvlqLDbrGdJVgaXfvVRMSpJ85399264 = GKJvlqLDbrGdJVgaXfvVRMSpJ54989097;     GKJvlqLDbrGdJVgaXfvVRMSpJ54989097 = GKJvlqLDbrGdJVgaXfvVRMSpJ32195600;     GKJvlqLDbrGdJVgaXfvVRMSpJ32195600 = GKJvlqLDbrGdJVgaXfvVRMSpJ3672591;     GKJvlqLDbrGdJVgaXfvVRMSpJ3672591 = GKJvlqLDbrGdJVgaXfvVRMSpJ83569421;     GKJvlqLDbrGdJVgaXfvVRMSpJ83569421 = GKJvlqLDbrGdJVgaXfvVRMSpJ22310859;     GKJvlqLDbrGdJVgaXfvVRMSpJ22310859 = GKJvlqLDbrGdJVgaXfvVRMSpJ51993905;     GKJvlqLDbrGdJVgaXfvVRMSpJ51993905 = GKJvlqLDbrGdJVgaXfvVRMSpJ98415456;     GKJvlqLDbrGdJVgaXfvVRMSpJ98415456 = GKJvlqLDbrGdJVgaXfvVRMSpJ45749622;     GKJvlqLDbrGdJVgaXfvVRMSpJ45749622 = GKJvlqLDbrGdJVgaXfvVRMSpJ56702516;     GKJvlqLDbrGdJVgaXfvVRMSpJ56702516 = GKJvlqLDbrGdJVgaXfvVRMSpJ66390948;     GKJvlqLDbrGdJVgaXfvVRMSpJ66390948 = GKJvlqLDbrGdJVgaXfvVRMSpJ83332243;     GKJvlqLDbrGdJVgaXfvVRMSpJ83332243 = GKJvlqLDbrGdJVgaXfvVRMSpJ68850709;     GKJvlqLDbrGdJVgaXfvVRMSpJ68850709 = GKJvlqLDbrGdJVgaXfvVRMSpJ32944307;     GKJvlqLDbrGdJVgaXfvVRMSpJ32944307 = GKJvlqLDbrGdJVgaXfvVRMSpJ49704702;     GKJvlqLDbrGdJVgaXfvVRMSpJ49704702 = GKJvlqLDbrGdJVgaXfvVRMSpJ92909054;     GKJvlqLDbrGdJVgaXfvVRMSpJ92909054 = GKJvlqLDbrGdJVgaXfvVRMSpJ3264886;     GKJvlqLDbrGdJVgaXfvVRMSpJ3264886 = GKJvlqLDbrGdJVgaXfvVRMSpJ50839986;     GKJvlqLDbrGdJVgaXfvVRMSpJ50839986 = GKJvlqLDbrGdJVgaXfvVRMSpJ61394903;     GKJvlqLDbrGdJVgaXfvVRMSpJ61394903 = GKJvlqLDbrGdJVgaXfvVRMSpJ95316644;     GKJvlqLDbrGdJVgaXfvVRMSpJ95316644 = GKJvlqLDbrGdJVgaXfvVRMSpJ32490758;     GKJvlqLDbrGdJVgaXfvVRMSpJ32490758 = GKJvlqLDbrGdJVgaXfvVRMSpJ24005300;     GKJvlqLDbrGdJVgaXfvVRMSpJ24005300 = GKJvlqLDbrGdJVgaXfvVRMSpJ11367936;     GKJvlqLDbrGdJVgaXfvVRMSpJ11367936 = GKJvlqLDbrGdJVgaXfvVRMSpJ64202983;     GKJvlqLDbrGdJVgaXfvVRMSpJ64202983 = GKJvlqLDbrGdJVgaXfvVRMSpJ39067252;     GKJvlqLDbrGdJVgaXfvVRMSpJ39067252 = GKJvlqLDbrGdJVgaXfvVRMSpJ99604463;     GKJvlqLDbrGdJVgaXfvVRMSpJ99604463 = GKJvlqLDbrGdJVgaXfvVRMSpJ79737258;     GKJvlqLDbrGdJVgaXfvVRMSpJ79737258 = GKJvlqLDbrGdJVgaXfvVRMSpJ25385303;     GKJvlqLDbrGdJVgaXfvVRMSpJ25385303 = GKJvlqLDbrGdJVgaXfvVRMSpJ87114984;     GKJvlqLDbrGdJVgaXfvVRMSpJ87114984 = GKJvlqLDbrGdJVgaXfvVRMSpJ40980195;     GKJvlqLDbrGdJVgaXfvVRMSpJ40980195 = GKJvlqLDbrGdJVgaXfvVRMSpJ91560063;     GKJvlqLDbrGdJVgaXfvVRMSpJ91560063 = GKJvlqLDbrGdJVgaXfvVRMSpJ44332355;     GKJvlqLDbrGdJVgaXfvVRMSpJ44332355 = GKJvlqLDbrGdJVgaXfvVRMSpJ62188219;     GKJvlqLDbrGdJVgaXfvVRMSpJ62188219 = GKJvlqLDbrGdJVgaXfvVRMSpJ12212157;     GKJvlqLDbrGdJVgaXfvVRMSpJ12212157 = GKJvlqLDbrGdJVgaXfvVRMSpJ11623297;     GKJvlqLDbrGdJVgaXfvVRMSpJ11623297 = GKJvlqLDbrGdJVgaXfvVRMSpJ65959971;     GKJvlqLDbrGdJVgaXfvVRMSpJ65959971 = GKJvlqLDbrGdJVgaXfvVRMSpJ10962467;     GKJvlqLDbrGdJVgaXfvVRMSpJ10962467 = GKJvlqLDbrGdJVgaXfvVRMSpJ9210858;     GKJvlqLDbrGdJVgaXfvVRMSpJ9210858 = GKJvlqLDbrGdJVgaXfvVRMSpJ88162353;     GKJvlqLDbrGdJVgaXfvVRMSpJ88162353 = GKJvlqLDbrGdJVgaXfvVRMSpJ44304446;     GKJvlqLDbrGdJVgaXfvVRMSpJ44304446 = GKJvlqLDbrGdJVgaXfvVRMSpJ22813640;     GKJvlqLDbrGdJVgaXfvVRMSpJ22813640 = GKJvlqLDbrGdJVgaXfvVRMSpJ33517679;     GKJvlqLDbrGdJVgaXfvVRMSpJ33517679 = GKJvlqLDbrGdJVgaXfvVRMSpJ63281846;     GKJvlqLDbrGdJVgaXfvVRMSpJ63281846 = GKJvlqLDbrGdJVgaXfvVRMSpJ16971396;     GKJvlqLDbrGdJVgaXfvVRMSpJ16971396 = GKJvlqLDbrGdJVgaXfvVRMSpJ2781897;     GKJvlqLDbrGdJVgaXfvVRMSpJ2781897 = GKJvlqLDbrGdJVgaXfvVRMSpJ98387954;     GKJvlqLDbrGdJVgaXfvVRMSpJ98387954 = GKJvlqLDbrGdJVgaXfvVRMSpJ38229383;     GKJvlqLDbrGdJVgaXfvVRMSpJ38229383 = GKJvlqLDbrGdJVgaXfvVRMSpJ1174509;     GKJvlqLDbrGdJVgaXfvVRMSpJ1174509 = GKJvlqLDbrGdJVgaXfvVRMSpJ25758366;     GKJvlqLDbrGdJVgaXfvVRMSpJ25758366 = GKJvlqLDbrGdJVgaXfvVRMSpJ85022694;     GKJvlqLDbrGdJVgaXfvVRMSpJ85022694 = GKJvlqLDbrGdJVgaXfvVRMSpJ77052428;     GKJvlqLDbrGdJVgaXfvVRMSpJ77052428 = GKJvlqLDbrGdJVgaXfvVRMSpJ66550879;     GKJvlqLDbrGdJVgaXfvVRMSpJ66550879 = GKJvlqLDbrGdJVgaXfvVRMSpJ50407574;     GKJvlqLDbrGdJVgaXfvVRMSpJ50407574 = GKJvlqLDbrGdJVgaXfvVRMSpJ11846681;     GKJvlqLDbrGdJVgaXfvVRMSpJ11846681 = GKJvlqLDbrGdJVgaXfvVRMSpJ65653444;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IxkVEYfFFXASjEsKUjuSjvptEKXvqZggfsLAxYrhvRUoDQygXLpEIrMMH82096198() {     long qQtBjOgqTnrssMvsNXRbBpoMr71770551 = -557005605;    long qQtBjOgqTnrssMvsNXRbBpoMr65899059 = -34266172;    long qQtBjOgqTnrssMvsNXRbBpoMr68725971 = -671000152;    long qQtBjOgqTnrssMvsNXRbBpoMr91073521 = -442829850;    long qQtBjOgqTnrssMvsNXRbBpoMr98862356 = -809991140;    long qQtBjOgqTnrssMvsNXRbBpoMr62070972 = -340881695;    long qQtBjOgqTnrssMvsNXRbBpoMr96556086 = -670655374;    long qQtBjOgqTnrssMvsNXRbBpoMr65908225 = -994179281;    long qQtBjOgqTnrssMvsNXRbBpoMr87214256 = -643727476;    long qQtBjOgqTnrssMvsNXRbBpoMr69239867 = -176511777;    long qQtBjOgqTnrssMvsNXRbBpoMr30234480 = -160870613;    long qQtBjOgqTnrssMvsNXRbBpoMr96246936 = -101761675;    long qQtBjOgqTnrssMvsNXRbBpoMr19245887 = -107306827;    long qQtBjOgqTnrssMvsNXRbBpoMr68185524 = -909214493;    long qQtBjOgqTnrssMvsNXRbBpoMr29118255 = -355931052;    long qQtBjOgqTnrssMvsNXRbBpoMr62292843 = -51807500;    long qQtBjOgqTnrssMvsNXRbBpoMr520559 = -715132652;    long qQtBjOgqTnrssMvsNXRbBpoMr10909227 = -730928341;    long qQtBjOgqTnrssMvsNXRbBpoMr62678212 = -716315139;    long qQtBjOgqTnrssMvsNXRbBpoMr45596898 = -68907894;    long qQtBjOgqTnrssMvsNXRbBpoMr9850702 = -57954407;    long qQtBjOgqTnrssMvsNXRbBpoMr95471952 = -919225850;    long qQtBjOgqTnrssMvsNXRbBpoMr91725623 = -78559503;    long qQtBjOgqTnrssMvsNXRbBpoMr53343918 = -183943043;    long qQtBjOgqTnrssMvsNXRbBpoMr38847682 = -697564080;    long qQtBjOgqTnrssMvsNXRbBpoMr21744236 = -431183051;    long qQtBjOgqTnrssMvsNXRbBpoMr19408846 = -225536319;    long qQtBjOgqTnrssMvsNXRbBpoMr56265192 = -201738712;    long qQtBjOgqTnrssMvsNXRbBpoMr79015704 = -126486408;    long qQtBjOgqTnrssMvsNXRbBpoMr40347412 = -794455678;    long qQtBjOgqTnrssMvsNXRbBpoMr58857854 = -210115509;    long qQtBjOgqTnrssMvsNXRbBpoMr72418167 = -434345782;    long qQtBjOgqTnrssMvsNXRbBpoMr41644084 = -959440789;    long qQtBjOgqTnrssMvsNXRbBpoMr3862033 = -197784835;    long qQtBjOgqTnrssMvsNXRbBpoMr35148564 = -959295663;    long qQtBjOgqTnrssMvsNXRbBpoMr37898758 = -661503457;    long qQtBjOgqTnrssMvsNXRbBpoMr62982132 = -707908961;    long qQtBjOgqTnrssMvsNXRbBpoMr41170305 = -298837657;    long qQtBjOgqTnrssMvsNXRbBpoMr7729070 = -503262794;    long qQtBjOgqTnrssMvsNXRbBpoMr62965006 = -327267879;    long qQtBjOgqTnrssMvsNXRbBpoMr83600972 = 53765407;    long qQtBjOgqTnrssMvsNXRbBpoMr12467771 = -211886874;    long qQtBjOgqTnrssMvsNXRbBpoMr95457842 = -836415303;    long qQtBjOgqTnrssMvsNXRbBpoMr99210217 = -375706327;    long qQtBjOgqTnrssMvsNXRbBpoMr19115790 = -91779781;    long qQtBjOgqTnrssMvsNXRbBpoMr94875069 = -97259783;    long qQtBjOgqTnrssMvsNXRbBpoMr3177839 = -269092306;    long qQtBjOgqTnrssMvsNXRbBpoMr62946038 = -112396395;    long qQtBjOgqTnrssMvsNXRbBpoMr41871329 = -207348505;    long qQtBjOgqTnrssMvsNXRbBpoMr16584244 = -624860823;    long qQtBjOgqTnrssMvsNXRbBpoMr19270100 = -808456494;    long qQtBjOgqTnrssMvsNXRbBpoMr33120578 = -987743909;    long qQtBjOgqTnrssMvsNXRbBpoMr242363 = -749183878;    long qQtBjOgqTnrssMvsNXRbBpoMr94384336 = -953981852;    long qQtBjOgqTnrssMvsNXRbBpoMr72245497 = -167751349;    long qQtBjOgqTnrssMvsNXRbBpoMr76298599 = -637779756;    long qQtBjOgqTnrssMvsNXRbBpoMr74173435 = -955706669;    long qQtBjOgqTnrssMvsNXRbBpoMr15382054 = -387057110;    long qQtBjOgqTnrssMvsNXRbBpoMr52225840 = -745265770;    long qQtBjOgqTnrssMvsNXRbBpoMr77118120 = -278808090;    long qQtBjOgqTnrssMvsNXRbBpoMr42662126 = -15345376;    long qQtBjOgqTnrssMvsNXRbBpoMr40290895 = -368916662;    long qQtBjOgqTnrssMvsNXRbBpoMr86892520 = -767692873;    long qQtBjOgqTnrssMvsNXRbBpoMr46866844 = -849271799;    long qQtBjOgqTnrssMvsNXRbBpoMr10382013 = -966396269;    long qQtBjOgqTnrssMvsNXRbBpoMr57816313 = -726524831;    long qQtBjOgqTnrssMvsNXRbBpoMr54602852 = -142320887;    long qQtBjOgqTnrssMvsNXRbBpoMr15383854 = -909521992;    long qQtBjOgqTnrssMvsNXRbBpoMr33036961 = -949918830;    long qQtBjOgqTnrssMvsNXRbBpoMr91219496 = -694427595;    long qQtBjOgqTnrssMvsNXRbBpoMr99310710 = -343898540;    long qQtBjOgqTnrssMvsNXRbBpoMr59350254 = -316294995;    long qQtBjOgqTnrssMvsNXRbBpoMr3180158 = -127665547;    long qQtBjOgqTnrssMvsNXRbBpoMr99713206 = -289047261;    long qQtBjOgqTnrssMvsNXRbBpoMr61995925 = -22673302;    long qQtBjOgqTnrssMvsNXRbBpoMr97382931 = -846067533;    long qQtBjOgqTnrssMvsNXRbBpoMr14110 = 17189453;    long qQtBjOgqTnrssMvsNXRbBpoMr92515406 = -702853176;    long qQtBjOgqTnrssMvsNXRbBpoMr34228128 = 7836738;    long qQtBjOgqTnrssMvsNXRbBpoMr43972612 = -500304298;    long qQtBjOgqTnrssMvsNXRbBpoMr18566398 = -62090746;    long qQtBjOgqTnrssMvsNXRbBpoMr56462808 = -13139924;    long qQtBjOgqTnrssMvsNXRbBpoMr14393863 = -994390208;    long qQtBjOgqTnrssMvsNXRbBpoMr62431460 = -501625586;    long qQtBjOgqTnrssMvsNXRbBpoMr21077312 = -985999184;    long qQtBjOgqTnrssMvsNXRbBpoMr25737276 = -222371600;    long qQtBjOgqTnrssMvsNXRbBpoMr72175804 = -685161904;    long qQtBjOgqTnrssMvsNXRbBpoMr47259748 = 94541063;    long qQtBjOgqTnrssMvsNXRbBpoMr31616536 = 69966513;    long qQtBjOgqTnrssMvsNXRbBpoMr58849964 = -221515908;    long qQtBjOgqTnrssMvsNXRbBpoMr63725322 = -705796789;    long qQtBjOgqTnrssMvsNXRbBpoMr47600079 = -220851852;    long qQtBjOgqTnrssMvsNXRbBpoMr88944464 = -553571887;    long qQtBjOgqTnrssMvsNXRbBpoMr30610950 = -124454705;    long qQtBjOgqTnrssMvsNXRbBpoMr20302880 = -211922504;    long qQtBjOgqTnrssMvsNXRbBpoMr43310078 = -577317931;    long qQtBjOgqTnrssMvsNXRbBpoMr25575250 = -444194001;    long qQtBjOgqTnrssMvsNXRbBpoMr48590998 = -987143505;    long qQtBjOgqTnrssMvsNXRbBpoMr88828205 = -409310058;    long qQtBjOgqTnrssMvsNXRbBpoMr61299477 = -557005605;     qQtBjOgqTnrssMvsNXRbBpoMr71770551 = qQtBjOgqTnrssMvsNXRbBpoMr65899059;     qQtBjOgqTnrssMvsNXRbBpoMr65899059 = qQtBjOgqTnrssMvsNXRbBpoMr68725971;     qQtBjOgqTnrssMvsNXRbBpoMr68725971 = qQtBjOgqTnrssMvsNXRbBpoMr91073521;     qQtBjOgqTnrssMvsNXRbBpoMr91073521 = qQtBjOgqTnrssMvsNXRbBpoMr98862356;     qQtBjOgqTnrssMvsNXRbBpoMr98862356 = qQtBjOgqTnrssMvsNXRbBpoMr62070972;     qQtBjOgqTnrssMvsNXRbBpoMr62070972 = qQtBjOgqTnrssMvsNXRbBpoMr96556086;     qQtBjOgqTnrssMvsNXRbBpoMr96556086 = qQtBjOgqTnrssMvsNXRbBpoMr65908225;     qQtBjOgqTnrssMvsNXRbBpoMr65908225 = qQtBjOgqTnrssMvsNXRbBpoMr87214256;     qQtBjOgqTnrssMvsNXRbBpoMr87214256 = qQtBjOgqTnrssMvsNXRbBpoMr69239867;     qQtBjOgqTnrssMvsNXRbBpoMr69239867 = qQtBjOgqTnrssMvsNXRbBpoMr30234480;     qQtBjOgqTnrssMvsNXRbBpoMr30234480 = qQtBjOgqTnrssMvsNXRbBpoMr96246936;     qQtBjOgqTnrssMvsNXRbBpoMr96246936 = qQtBjOgqTnrssMvsNXRbBpoMr19245887;     qQtBjOgqTnrssMvsNXRbBpoMr19245887 = qQtBjOgqTnrssMvsNXRbBpoMr68185524;     qQtBjOgqTnrssMvsNXRbBpoMr68185524 = qQtBjOgqTnrssMvsNXRbBpoMr29118255;     qQtBjOgqTnrssMvsNXRbBpoMr29118255 = qQtBjOgqTnrssMvsNXRbBpoMr62292843;     qQtBjOgqTnrssMvsNXRbBpoMr62292843 = qQtBjOgqTnrssMvsNXRbBpoMr520559;     qQtBjOgqTnrssMvsNXRbBpoMr520559 = qQtBjOgqTnrssMvsNXRbBpoMr10909227;     qQtBjOgqTnrssMvsNXRbBpoMr10909227 = qQtBjOgqTnrssMvsNXRbBpoMr62678212;     qQtBjOgqTnrssMvsNXRbBpoMr62678212 = qQtBjOgqTnrssMvsNXRbBpoMr45596898;     qQtBjOgqTnrssMvsNXRbBpoMr45596898 = qQtBjOgqTnrssMvsNXRbBpoMr9850702;     qQtBjOgqTnrssMvsNXRbBpoMr9850702 = qQtBjOgqTnrssMvsNXRbBpoMr95471952;     qQtBjOgqTnrssMvsNXRbBpoMr95471952 = qQtBjOgqTnrssMvsNXRbBpoMr91725623;     qQtBjOgqTnrssMvsNXRbBpoMr91725623 = qQtBjOgqTnrssMvsNXRbBpoMr53343918;     qQtBjOgqTnrssMvsNXRbBpoMr53343918 = qQtBjOgqTnrssMvsNXRbBpoMr38847682;     qQtBjOgqTnrssMvsNXRbBpoMr38847682 = qQtBjOgqTnrssMvsNXRbBpoMr21744236;     qQtBjOgqTnrssMvsNXRbBpoMr21744236 = qQtBjOgqTnrssMvsNXRbBpoMr19408846;     qQtBjOgqTnrssMvsNXRbBpoMr19408846 = qQtBjOgqTnrssMvsNXRbBpoMr56265192;     qQtBjOgqTnrssMvsNXRbBpoMr56265192 = qQtBjOgqTnrssMvsNXRbBpoMr79015704;     qQtBjOgqTnrssMvsNXRbBpoMr79015704 = qQtBjOgqTnrssMvsNXRbBpoMr40347412;     qQtBjOgqTnrssMvsNXRbBpoMr40347412 = qQtBjOgqTnrssMvsNXRbBpoMr58857854;     qQtBjOgqTnrssMvsNXRbBpoMr58857854 = qQtBjOgqTnrssMvsNXRbBpoMr72418167;     qQtBjOgqTnrssMvsNXRbBpoMr72418167 = qQtBjOgqTnrssMvsNXRbBpoMr41644084;     qQtBjOgqTnrssMvsNXRbBpoMr41644084 = qQtBjOgqTnrssMvsNXRbBpoMr3862033;     qQtBjOgqTnrssMvsNXRbBpoMr3862033 = qQtBjOgqTnrssMvsNXRbBpoMr35148564;     qQtBjOgqTnrssMvsNXRbBpoMr35148564 = qQtBjOgqTnrssMvsNXRbBpoMr37898758;     qQtBjOgqTnrssMvsNXRbBpoMr37898758 = qQtBjOgqTnrssMvsNXRbBpoMr62982132;     qQtBjOgqTnrssMvsNXRbBpoMr62982132 = qQtBjOgqTnrssMvsNXRbBpoMr41170305;     qQtBjOgqTnrssMvsNXRbBpoMr41170305 = qQtBjOgqTnrssMvsNXRbBpoMr7729070;     qQtBjOgqTnrssMvsNXRbBpoMr7729070 = qQtBjOgqTnrssMvsNXRbBpoMr62965006;     qQtBjOgqTnrssMvsNXRbBpoMr62965006 = qQtBjOgqTnrssMvsNXRbBpoMr83600972;     qQtBjOgqTnrssMvsNXRbBpoMr83600972 = qQtBjOgqTnrssMvsNXRbBpoMr12467771;     qQtBjOgqTnrssMvsNXRbBpoMr12467771 = qQtBjOgqTnrssMvsNXRbBpoMr95457842;     qQtBjOgqTnrssMvsNXRbBpoMr95457842 = qQtBjOgqTnrssMvsNXRbBpoMr99210217;     qQtBjOgqTnrssMvsNXRbBpoMr99210217 = qQtBjOgqTnrssMvsNXRbBpoMr19115790;     qQtBjOgqTnrssMvsNXRbBpoMr19115790 = qQtBjOgqTnrssMvsNXRbBpoMr94875069;     qQtBjOgqTnrssMvsNXRbBpoMr94875069 = qQtBjOgqTnrssMvsNXRbBpoMr3177839;     qQtBjOgqTnrssMvsNXRbBpoMr3177839 = qQtBjOgqTnrssMvsNXRbBpoMr62946038;     qQtBjOgqTnrssMvsNXRbBpoMr62946038 = qQtBjOgqTnrssMvsNXRbBpoMr41871329;     qQtBjOgqTnrssMvsNXRbBpoMr41871329 = qQtBjOgqTnrssMvsNXRbBpoMr16584244;     qQtBjOgqTnrssMvsNXRbBpoMr16584244 = qQtBjOgqTnrssMvsNXRbBpoMr19270100;     qQtBjOgqTnrssMvsNXRbBpoMr19270100 = qQtBjOgqTnrssMvsNXRbBpoMr33120578;     qQtBjOgqTnrssMvsNXRbBpoMr33120578 = qQtBjOgqTnrssMvsNXRbBpoMr242363;     qQtBjOgqTnrssMvsNXRbBpoMr242363 = qQtBjOgqTnrssMvsNXRbBpoMr94384336;     qQtBjOgqTnrssMvsNXRbBpoMr94384336 = qQtBjOgqTnrssMvsNXRbBpoMr72245497;     qQtBjOgqTnrssMvsNXRbBpoMr72245497 = qQtBjOgqTnrssMvsNXRbBpoMr76298599;     qQtBjOgqTnrssMvsNXRbBpoMr76298599 = qQtBjOgqTnrssMvsNXRbBpoMr74173435;     qQtBjOgqTnrssMvsNXRbBpoMr74173435 = qQtBjOgqTnrssMvsNXRbBpoMr15382054;     qQtBjOgqTnrssMvsNXRbBpoMr15382054 = qQtBjOgqTnrssMvsNXRbBpoMr52225840;     qQtBjOgqTnrssMvsNXRbBpoMr52225840 = qQtBjOgqTnrssMvsNXRbBpoMr77118120;     qQtBjOgqTnrssMvsNXRbBpoMr77118120 = qQtBjOgqTnrssMvsNXRbBpoMr42662126;     qQtBjOgqTnrssMvsNXRbBpoMr42662126 = qQtBjOgqTnrssMvsNXRbBpoMr40290895;     qQtBjOgqTnrssMvsNXRbBpoMr40290895 = qQtBjOgqTnrssMvsNXRbBpoMr86892520;     qQtBjOgqTnrssMvsNXRbBpoMr86892520 = qQtBjOgqTnrssMvsNXRbBpoMr46866844;     qQtBjOgqTnrssMvsNXRbBpoMr46866844 = qQtBjOgqTnrssMvsNXRbBpoMr10382013;     qQtBjOgqTnrssMvsNXRbBpoMr10382013 = qQtBjOgqTnrssMvsNXRbBpoMr57816313;     qQtBjOgqTnrssMvsNXRbBpoMr57816313 = qQtBjOgqTnrssMvsNXRbBpoMr54602852;     qQtBjOgqTnrssMvsNXRbBpoMr54602852 = qQtBjOgqTnrssMvsNXRbBpoMr15383854;     qQtBjOgqTnrssMvsNXRbBpoMr15383854 = qQtBjOgqTnrssMvsNXRbBpoMr33036961;     qQtBjOgqTnrssMvsNXRbBpoMr33036961 = qQtBjOgqTnrssMvsNXRbBpoMr91219496;     qQtBjOgqTnrssMvsNXRbBpoMr91219496 = qQtBjOgqTnrssMvsNXRbBpoMr99310710;     qQtBjOgqTnrssMvsNXRbBpoMr99310710 = qQtBjOgqTnrssMvsNXRbBpoMr59350254;     qQtBjOgqTnrssMvsNXRbBpoMr59350254 = qQtBjOgqTnrssMvsNXRbBpoMr3180158;     qQtBjOgqTnrssMvsNXRbBpoMr3180158 = qQtBjOgqTnrssMvsNXRbBpoMr99713206;     qQtBjOgqTnrssMvsNXRbBpoMr99713206 = qQtBjOgqTnrssMvsNXRbBpoMr61995925;     qQtBjOgqTnrssMvsNXRbBpoMr61995925 = qQtBjOgqTnrssMvsNXRbBpoMr97382931;     qQtBjOgqTnrssMvsNXRbBpoMr97382931 = qQtBjOgqTnrssMvsNXRbBpoMr14110;     qQtBjOgqTnrssMvsNXRbBpoMr14110 = qQtBjOgqTnrssMvsNXRbBpoMr92515406;     qQtBjOgqTnrssMvsNXRbBpoMr92515406 = qQtBjOgqTnrssMvsNXRbBpoMr34228128;     qQtBjOgqTnrssMvsNXRbBpoMr34228128 = qQtBjOgqTnrssMvsNXRbBpoMr43972612;     qQtBjOgqTnrssMvsNXRbBpoMr43972612 = qQtBjOgqTnrssMvsNXRbBpoMr18566398;     qQtBjOgqTnrssMvsNXRbBpoMr18566398 = qQtBjOgqTnrssMvsNXRbBpoMr56462808;     qQtBjOgqTnrssMvsNXRbBpoMr56462808 = qQtBjOgqTnrssMvsNXRbBpoMr14393863;     qQtBjOgqTnrssMvsNXRbBpoMr14393863 = qQtBjOgqTnrssMvsNXRbBpoMr62431460;     qQtBjOgqTnrssMvsNXRbBpoMr62431460 = qQtBjOgqTnrssMvsNXRbBpoMr21077312;     qQtBjOgqTnrssMvsNXRbBpoMr21077312 = qQtBjOgqTnrssMvsNXRbBpoMr25737276;     qQtBjOgqTnrssMvsNXRbBpoMr25737276 = qQtBjOgqTnrssMvsNXRbBpoMr72175804;     qQtBjOgqTnrssMvsNXRbBpoMr72175804 = qQtBjOgqTnrssMvsNXRbBpoMr47259748;     qQtBjOgqTnrssMvsNXRbBpoMr47259748 = qQtBjOgqTnrssMvsNXRbBpoMr31616536;     qQtBjOgqTnrssMvsNXRbBpoMr31616536 = qQtBjOgqTnrssMvsNXRbBpoMr58849964;     qQtBjOgqTnrssMvsNXRbBpoMr58849964 = qQtBjOgqTnrssMvsNXRbBpoMr63725322;     qQtBjOgqTnrssMvsNXRbBpoMr63725322 = qQtBjOgqTnrssMvsNXRbBpoMr47600079;     qQtBjOgqTnrssMvsNXRbBpoMr47600079 = qQtBjOgqTnrssMvsNXRbBpoMr88944464;     qQtBjOgqTnrssMvsNXRbBpoMr88944464 = qQtBjOgqTnrssMvsNXRbBpoMr30610950;     qQtBjOgqTnrssMvsNXRbBpoMr30610950 = qQtBjOgqTnrssMvsNXRbBpoMr20302880;     qQtBjOgqTnrssMvsNXRbBpoMr20302880 = qQtBjOgqTnrssMvsNXRbBpoMr43310078;     qQtBjOgqTnrssMvsNXRbBpoMr43310078 = qQtBjOgqTnrssMvsNXRbBpoMr25575250;     qQtBjOgqTnrssMvsNXRbBpoMr25575250 = qQtBjOgqTnrssMvsNXRbBpoMr48590998;     qQtBjOgqTnrssMvsNXRbBpoMr48590998 = qQtBjOgqTnrssMvsNXRbBpoMr88828205;     qQtBjOgqTnrssMvsNXRbBpoMr88828205 = qQtBjOgqTnrssMvsNXRbBpoMr61299477;     qQtBjOgqTnrssMvsNXRbBpoMr61299477 = qQtBjOgqTnrssMvsNXRbBpoMr71770551;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GdvqHDelHetSLTEPCXZCdTxDGbaQSYFvnScZLhdEYSfFyHvUjwXyqNYnf49387798() {     long rjgdNTjZxftqeDVtVeLorFzgF7229520 = 76717495;    long rjgdNTjZxftqeDVtVeLorFzgF79171138 = 85182222;    long rjgdNTjZxftqeDVtVeLorFzgF6112448 = -336667227;    long rjgdNTjZxftqeDVtVeLorFzgF63296876 = -263980921;    long rjgdNTjZxftqeDVtVeLorFzgF55147625 = -915589986;    long rjgdNTjZxftqeDVtVeLorFzgF98293843 = -603229590;    long rjgdNTjZxftqeDVtVeLorFzgF7213493 = -515381108;    long rjgdNTjZxftqeDVtVeLorFzgF28039786 = -638413422;    long rjgdNTjZxftqeDVtVeLorFzgF88731861 = -32058883;    long rjgdNTjZxftqeDVtVeLorFzgF84142579 = -941198775;    long rjgdNTjZxftqeDVtVeLorFzgF68416214 = 37121658;    long rjgdNTjZxftqeDVtVeLorFzgF96815084 = 34117554;    long rjgdNTjZxftqeDVtVeLorFzgF57480532 = -659319332;    long rjgdNTjZxftqeDVtVeLorFzgF21326387 = -885577903;    long rjgdNTjZxftqeDVtVeLorFzgF87312770 = -859356067;    long rjgdNTjZxftqeDVtVeLorFzgF45834144 = -787619107;    long rjgdNTjZxftqeDVtVeLorFzgF56356494 = -142107205;    long rjgdNTjZxftqeDVtVeLorFzgF10669419 = -804356409;    long rjgdNTjZxftqeDVtVeLorFzgF63228542 = 67121439;    long rjgdNTjZxftqeDVtVeLorFzgF39434116 = -495468960;    long rjgdNTjZxftqeDVtVeLorFzgF22937565 = -815229095;    long rjgdNTjZxftqeDVtVeLorFzgF98893476 = 94137856;    long rjgdNTjZxftqeDVtVeLorFzgF62251003 = -816191687;    long rjgdNTjZxftqeDVtVeLorFzgF47136863 = -694767647;    long rjgdNTjZxftqeDVtVeLorFzgF46865633 = -721549278;    long rjgdNTjZxftqeDVtVeLorFzgF32442408 = -119759858;    long rjgdNTjZxftqeDVtVeLorFzgF79829419 = -31820460;    long rjgdNTjZxftqeDVtVeLorFzgF96993616 = -371510887;    long rjgdNTjZxftqeDVtVeLorFzgF25683919 = -700581211;    long rjgdNTjZxftqeDVtVeLorFzgF45880822 = -828962848;    long rjgdNTjZxftqeDVtVeLorFzgF77441085 = -762095996;    long rjgdNTjZxftqeDVtVeLorFzgF10241186 = -207317196;    long rjgdNTjZxftqeDVtVeLorFzgF53862095 = -7036766;    long rjgdNTjZxftqeDVtVeLorFzgF33610460 = -262478649;    long rjgdNTjZxftqeDVtVeLorFzgF957018 = -910395914;    long rjgdNTjZxftqeDVtVeLorFzgF89459601 = -876068763;    long rjgdNTjZxftqeDVtVeLorFzgF12393949 = -572605001;    long rjgdNTjZxftqeDVtVeLorFzgF92385708 = -281493239;    long rjgdNTjZxftqeDVtVeLorFzgF38119631 = -154139070;    long rjgdNTjZxftqeDVtVeLorFzgF27236538 = -892530425;    long rjgdNTjZxftqeDVtVeLorFzgF17052580 = -815433507;    long rjgdNTjZxftqeDVtVeLorFzgF1832898 = -906432165;    long rjgdNTjZxftqeDVtVeLorFzgF84841221 = -389596089;    long rjgdNTjZxftqeDVtVeLorFzgF39341556 = -980038737;    long rjgdNTjZxftqeDVtVeLorFzgF19132249 = 81709058;    long rjgdNTjZxftqeDVtVeLorFzgF40836398 = -136183415;    long rjgdNTjZxftqeDVtVeLorFzgF22523003 = -753078666;    long rjgdNTjZxftqeDVtVeLorFzgF80672349 = -278922988;    long rjgdNTjZxftqeDVtVeLorFzgF64763994 = -971085385;    long rjgdNTjZxftqeDVtVeLorFzgF41113833 = -15887639;    long rjgdNTjZxftqeDVtVeLorFzgF40824 = -682733052;    long rjgdNTjZxftqeDVtVeLorFzgF16606051 = -101396256;    long rjgdNTjZxftqeDVtVeLorFzgF68863511 = -505229432;    long rjgdNTjZxftqeDVtVeLorFzgF10376184 = -45490352;    long rjgdNTjZxftqeDVtVeLorFzgF26450234 = -514241494;    long rjgdNTjZxftqeDVtVeLorFzgF8336043 = 82579638;    long rjgdNTjZxftqeDVtVeLorFzgF16920135 = -98626092;    long rjgdNTjZxftqeDVtVeLorFzgF58975585 = -641899580;    long rjgdNTjZxftqeDVtVeLorFzgF16431244 = -542431643;    long rjgdNTjZxftqeDVtVeLorFzgF22705218 = -695830128;    long rjgdNTjZxftqeDVtVeLorFzgF18464425 = -471409131;    long rjgdNTjZxftqeDVtVeLorFzgF10219876 = -43870222;    long rjgdNTjZxftqeDVtVeLorFzgF2355867 = -937832211;    long rjgdNTjZxftqeDVtVeLorFzgF42851039 = -203096035;    long rjgdNTjZxftqeDVtVeLorFzgF6701494 = -79102780;    long rjgdNTjZxftqeDVtVeLorFzgF58175029 = -755561146;    long rjgdNTjZxftqeDVtVeLorFzgF42952990 = -958845681;    long rjgdNTjZxftqeDVtVeLorFzgF23870073 = -296840684;    long rjgdNTjZxftqeDVtVeLorFzgF20369370 = -975181989;    long rjgdNTjZxftqeDVtVeLorFzgF97853169 = -983287304;    long rjgdNTjZxftqeDVtVeLorFzgF33440195 = -115014107;    long rjgdNTjZxftqeDVtVeLorFzgF63970786 = -860613967;    long rjgdNTjZxftqeDVtVeLorFzgF72549787 = -550217339;    long rjgdNTjZxftqeDVtVeLorFzgF35992004 = -40348136;    long rjgdNTjZxftqeDVtVeLorFzgF22381536 = -680035454;    long rjgdNTjZxftqeDVtVeLorFzgF21104668 = -908796931;    long rjgdNTjZxftqeDVtVeLorFzgF14052256 = -516266055;    long rjgdNTjZxftqeDVtVeLorFzgF22909448 = -836152951;    long rjgdNTjZxftqeDVtVeLorFzgF28004615 = -676476705;    long rjgdNTjZxftqeDVtVeLorFzgF6029235 = -485365864;    long rjgdNTjZxftqeDVtVeLorFzgF9919406 = -366681192;    long rjgdNTjZxftqeDVtVeLorFzgF99157070 = -752897472;    long rjgdNTjZxftqeDVtVeLorFzgF32229622 = -400425502;    long rjgdNTjZxftqeDVtVeLorFzgF84570086 = -584693572;    long rjgdNTjZxftqeDVtVeLorFzgF45839999 = -46229797;    long rjgdNTjZxftqeDVtVeLorFzgF60835035 = -560699741;    long rjgdNTjZxftqeDVtVeLorFzgF41377674 = -702087764;    long rjgdNTjZxftqeDVtVeLorFzgF43485912 = -961546415;    long rjgdNTjZxftqeDVtVeLorFzgF7160227 = -748237155;    long rjgdNTjZxftqeDVtVeLorFzgF92620974 = -892975552;    long rjgdNTjZxftqeDVtVeLorFzgF72539467 = -677442672;    long rjgdNTjZxftqeDVtVeLorFzgF53418364 = -930705421;    long rjgdNTjZxftqeDVtVeLorFzgF75954464 = -739061596;    long rjgdNTjZxftqeDVtVeLorFzgF15414414 = -458308943;    long rjgdNTjZxftqeDVtVeLorFzgF8772114 = -321121295;    long rjgdNTjZxftqeDVtVeLorFzgF6832704 = -671563285;    long rjgdNTjZxftqeDVtVeLorFzgF99477030 = -968599954;    long rjgdNTjZxftqeDVtVeLorFzgF41990183 = -86500054;    long rjgdNTjZxftqeDVtVeLorFzgF32640063 = -800935957;    long rjgdNTjZxftqeDVtVeLorFzgF60957219 = 76717495;     rjgdNTjZxftqeDVtVeLorFzgF7229520 = rjgdNTjZxftqeDVtVeLorFzgF79171138;     rjgdNTjZxftqeDVtVeLorFzgF79171138 = rjgdNTjZxftqeDVtVeLorFzgF6112448;     rjgdNTjZxftqeDVtVeLorFzgF6112448 = rjgdNTjZxftqeDVtVeLorFzgF63296876;     rjgdNTjZxftqeDVtVeLorFzgF63296876 = rjgdNTjZxftqeDVtVeLorFzgF55147625;     rjgdNTjZxftqeDVtVeLorFzgF55147625 = rjgdNTjZxftqeDVtVeLorFzgF98293843;     rjgdNTjZxftqeDVtVeLorFzgF98293843 = rjgdNTjZxftqeDVtVeLorFzgF7213493;     rjgdNTjZxftqeDVtVeLorFzgF7213493 = rjgdNTjZxftqeDVtVeLorFzgF28039786;     rjgdNTjZxftqeDVtVeLorFzgF28039786 = rjgdNTjZxftqeDVtVeLorFzgF88731861;     rjgdNTjZxftqeDVtVeLorFzgF88731861 = rjgdNTjZxftqeDVtVeLorFzgF84142579;     rjgdNTjZxftqeDVtVeLorFzgF84142579 = rjgdNTjZxftqeDVtVeLorFzgF68416214;     rjgdNTjZxftqeDVtVeLorFzgF68416214 = rjgdNTjZxftqeDVtVeLorFzgF96815084;     rjgdNTjZxftqeDVtVeLorFzgF96815084 = rjgdNTjZxftqeDVtVeLorFzgF57480532;     rjgdNTjZxftqeDVtVeLorFzgF57480532 = rjgdNTjZxftqeDVtVeLorFzgF21326387;     rjgdNTjZxftqeDVtVeLorFzgF21326387 = rjgdNTjZxftqeDVtVeLorFzgF87312770;     rjgdNTjZxftqeDVtVeLorFzgF87312770 = rjgdNTjZxftqeDVtVeLorFzgF45834144;     rjgdNTjZxftqeDVtVeLorFzgF45834144 = rjgdNTjZxftqeDVtVeLorFzgF56356494;     rjgdNTjZxftqeDVtVeLorFzgF56356494 = rjgdNTjZxftqeDVtVeLorFzgF10669419;     rjgdNTjZxftqeDVtVeLorFzgF10669419 = rjgdNTjZxftqeDVtVeLorFzgF63228542;     rjgdNTjZxftqeDVtVeLorFzgF63228542 = rjgdNTjZxftqeDVtVeLorFzgF39434116;     rjgdNTjZxftqeDVtVeLorFzgF39434116 = rjgdNTjZxftqeDVtVeLorFzgF22937565;     rjgdNTjZxftqeDVtVeLorFzgF22937565 = rjgdNTjZxftqeDVtVeLorFzgF98893476;     rjgdNTjZxftqeDVtVeLorFzgF98893476 = rjgdNTjZxftqeDVtVeLorFzgF62251003;     rjgdNTjZxftqeDVtVeLorFzgF62251003 = rjgdNTjZxftqeDVtVeLorFzgF47136863;     rjgdNTjZxftqeDVtVeLorFzgF47136863 = rjgdNTjZxftqeDVtVeLorFzgF46865633;     rjgdNTjZxftqeDVtVeLorFzgF46865633 = rjgdNTjZxftqeDVtVeLorFzgF32442408;     rjgdNTjZxftqeDVtVeLorFzgF32442408 = rjgdNTjZxftqeDVtVeLorFzgF79829419;     rjgdNTjZxftqeDVtVeLorFzgF79829419 = rjgdNTjZxftqeDVtVeLorFzgF96993616;     rjgdNTjZxftqeDVtVeLorFzgF96993616 = rjgdNTjZxftqeDVtVeLorFzgF25683919;     rjgdNTjZxftqeDVtVeLorFzgF25683919 = rjgdNTjZxftqeDVtVeLorFzgF45880822;     rjgdNTjZxftqeDVtVeLorFzgF45880822 = rjgdNTjZxftqeDVtVeLorFzgF77441085;     rjgdNTjZxftqeDVtVeLorFzgF77441085 = rjgdNTjZxftqeDVtVeLorFzgF10241186;     rjgdNTjZxftqeDVtVeLorFzgF10241186 = rjgdNTjZxftqeDVtVeLorFzgF53862095;     rjgdNTjZxftqeDVtVeLorFzgF53862095 = rjgdNTjZxftqeDVtVeLorFzgF33610460;     rjgdNTjZxftqeDVtVeLorFzgF33610460 = rjgdNTjZxftqeDVtVeLorFzgF957018;     rjgdNTjZxftqeDVtVeLorFzgF957018 = rjgdNTjZxftqeDVtVeLorFzgF89459601;     rjgdNTjZxftqeDVtVeLorFzgF89459601 = rjgdNTjZxftqeDVtVeLorFzgF12393949;     rjgdNTjZxftqeDVtVeLorFzgF12393949 = rjgdNTjZxftqeDVtVeLorFzgF92385708;     rjgdNTjZxftqeDVtVeLorFzgF92385708 = rjgdNTjZxftqeDVtVeLorFzgF38119631;     rjgdNTjZxftqeDVtVeLorFzgF38119631 = rjgdNTjZxftqeDVtVeLorFzgF27236538;     rjgdNTjZxftqeDVtVeLorFzgF27236538 = rjgdNTjZxftqeDVtVeLorFzgF17052580;     rjgdNTjZxftqeDVtVeLorFzgF17052580 = rjgdNTjZxftqeDVtVeLorFzgF1832898;     rjgdNTjZxftqeDVtVeLorFzgF1832898 = rjgdNTjZxftqeDVtVeLorFzgF84841221;     rjgdNTjZxftqeDVtVeLorFzgF84841221 = rjgdNTjZxftqeDVtVeLorFzgF39341556;     rjgdNTjZxftqeDVtVeLorFzgF39341556 = rjgdNTjZxftqeDVtVeLorFzgF19132249;     rjgdNTjZxftqeDVtVeLorFzgF19132249 = rjgdNTjZxftqeDVtVeLorFzgF40836398;     rjgdNTjZxftqeDVtVeLorFzgF40836398 = rjgdNTjZxftqeDVtVeLorFzgF22523003;     rjgdNTjZxftqeDVtVeLorFzgF22523003 = rjgdNTjZxftqeDVtVeLorFzgF80672349;     rjgdNTjZxftqeDVtVeLorFzgF80672349 = rjgdNTjZxftqeDVtVeLorFzgF64763994;     rjgdNTjZxftqeDVtVeLorFzgF64763994 = rjgdNTjZxftqeDVtVeLorFzgF41113833;     rjgdNTjZxftqeDVtVeLorFzgF41113833 = rjgdNTjZxftqeDVtVeLorFzgF40824;     rjgdNTjZxftqeDVtVeLorFzgF40824 = rjgdNTjZxftqeDVtVeLorFzgF16606051;     rjgdNTjZxftqeDVtVeLorFzgF16606051 = rjgdNTjZxftqeDVtVeLorFzgF68863511;     rjgdNTjZxftqeDVtVeLorFzgF68863511 = rjgdNTjZxftqeDVtVeLorFzgF10376184;     rjgdNTjZxftqeDVtVeLorFzgF10376184 = rjgdNTjZxftqeDVtVeLorFzgF26450234;     rjgdNTjZxftqeDVtVeLorFzgF26450234 = rjgdNTjZxftqeDVtVeLorFzgF8336043;     rjgdNTjZxftqeDVtVeLorFzgF8336043 = rjgdNTjZxftqeDVtVeLorFzgF16920135;     rjgdNTjZxftqeDVtVeLorFzgF16920135 = rjgdNTjZxftqeDVtVeLorFzgF58975585;     rjgdNTjZxftqeDVtVeLorFzgF58975585 = rjgdNTjZxftqeDVtVeLorFzgF16431244;     rjgdNTjZxftqeDVtVeLorFzgF16431244 = rjgdNTjZxftqeDVtVeLorFzgF22705218;     rjgdNTjZxftqeDVtVeLorFzgF22705218 = rjgdNTjZxftqeDVtVeLorFzgF18464425;     rjgdNTjZxftqeDVtVeLorFzgF18464425 = rjgdNTjZxftqeDVtVeLorFzgF10219876;     rjgdNTjZxftqeDVtVeLorFzgF10219876 = rjgdNTjZxftqeDVtVeLorFzgF2355867;     rjgdNTjZxftqeDVtVeLorFzgF2355867 = rjgdNTjZxftqeDVtVeLorFzgF42851039;     rjgdNTjZxftqeDVtVeLorFzgF42851039 = rjgdNTjZxftqeDVtVeLorFzgF6701494;     rjgdNTjZxftqeDVtVeLorFzgF6701494 = rjgdNTjZxftqeDVtVeLorFzgF58175029;     rjgdNTjZxftqeDVtVeLorFzgF58175029 = rjgdNTjZxftqeDVtVeLorFzgF42952990;     rjgdNTjZxftqeDVtVeLorFzgF42952990 = rjgdNTjZxftqeDVtVeLorFzgF23870073;     rjgdNTjZxftqeDVtVeLorFzgF23870073 = rjgdNTjZxftqeDVtVeLorFzgF20369370;     rjgdNTjZxftqeDVtVeLorFzgF20369370 = rjgdNTjZxftqeDVtVeLorFzgF97853169;     rjgdNTjZxftqeDVtVeLorFzgF97853169 = rjgdNTjZxftqeDVtVeLorFzgF33440195;     rjgdNTjZxftqeDVtVeLorFzgF33440195 = rjgdNTjZxftqeDVtVeLorFzgF63970786;     rjgdNTjZxftqeDVtVeLorFzgF63970786 = rjgdNTjZxftqeDVtVeLorFzgF72549787;     rjgdNTjZxftqeDVtVeLorFzgF72549787 = rjgdNTjZxftqeDVtVeLorFzgF35992004;     rjgdNTjZxftqeDVtVeLorFzgF35992004 = rjgdNTjZxftqeDVtVeLorFzgF22381536;     rjgdNTjZxftqeDVtVeLorFzgF22381536 = rjgdNTjZxftqeDVtVeLorFzgF21104668;     rjgdNTjZxftqeDVtVeLorFzgF21104668 = rjgdNTjZxftqeDVtVeLorFzgF14052256;     rjgdNTjZxftqeDVtVeLorFzgF14052256 = rjgdNTjZxftqeDVtVeLorFzgF22909448;     rjgdNTjZxftqeDVtVeLorFzgF22909448 = rjgdNTjZxftqeDVtVeLorFzgF28004615;     rjgdNTjZxftqeDVtVeLorFzgF28004615 = rjgdNTjZxftqeDVtVeLorFzgF6029235;     rjgdNTjZxftqeDVtVeLorFzgF6029235 = rjgdNTjZxftqeDVtVeLorFzgF9919406;     rjgdNTjZxftqeDVtVeLorFzgF9919406 = rjgdNTjZxftqeDVtVeLorFzgF99157070;     rjgdNTjZxftqeDVtVeLorFzgF99157070 = rjgdNTjZxftqeDVtVeLorFzgF32229622;     rjgdNTjZxftqeDVtVeLorFzgF32229622 = rjgdNTjZxftqeDVtVeLorFzgF84570086;     rjgdNTjZxftqeDVtVeLorFzgF84570086 = rjgdNTjZxftqeDVtVeLorFzgF45839999;     rjgdNTjZxftqeDVtVeLorFzgF45839999 = rjgdNTjZxftqeDVtVeLorFzgF60835035;     rjgdNTjZxftqeDVtVeLorFzgF60835035 = rjgdNTjZxftqeDVtVeLorFzgF41377674;     rjgdNTjZxftqeDVtVeLorFzgF41377674 = rjgdNTjZxftqeDVtVeLorFzgF43485912;     rjgdNTjZxftqeDVtVeLorFzgF43485912 = rjgdNTjZxftqeDVtVeLorFzgF7160227;     rjgdNTjZxftqeDVtVeLorFzgF7160227 = rjgdNTjZxftqeDVtVeLorFzgF92620974;     rjgdNTjZxftqeDVtVeLorFzgF92620974 = rjgdNTjZxftqeDVtVeLorFzgF72539467;     rjgdNTjZxftqeDVtVeLorFzgF72539467 = rjgdNTjZxftqeDVtVeLorFzgF53418364;     rjgdNTjZxftqeDVtVeLorFzgF53418364 = rjgdNTjZxftqeDVtVeLorFzgF75954464;     rjgdNTjZxftqeDVtVeLorFzgF75954464 = rjgdNTjZxftqeDVtVeLorFzgF15414414;     rjgdNTjZxftqeDVtVeLorFzgF15414414 = rjgdNTjZxftqeDVtVeLorFzgF8772114;     rjgdNTjZxftqeDVtVeLorFzgF8772114 = rjgdNTjZxftqeDVtVeLorFzgF6832704;     rjgdNTjZxftqeDVtVeLorFzgF6832704 = rjgdNTjZxftqeDVtVeLorFzgF99477030;     rjgdNTjZxftqeDVtVeLorFzgF99477030 = rjgdNTjZxftqeDVtVeLorFzgF41990183;     rjgdNTjZxftqeDVtVeLorFzgF41990183 = rjgdNTjZxftqeDVtVeLorFzgF32640063;     rjgdNTjZxftqeDVtVeLorFzgF32640063 = rjgdNTjZxftqeDVtVeLorFzgF60957219;     rjgdNTjZxftqeDVtVeLorFzgF60957219 = rjgdNTjZxftqeDVtVeLorFzgF7229520;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GlWPdVpgKYcHAldOglmZeTRcqvQAgtJLqYODRcZCbFwuBDnSjeKVWGkmT64436866() {     long tYiFoAQPQRbXZxDMkxZXWbnHy13346627 = -35184394;    long tYiFoAQPQRbXZxDMkxZXWbnHy22544418 = -724417559;    long tYiFoAQPQRbXZxDMkxZXWbnHy22154632 = -487500148;    long tYiFoAQPQRbXZxDMkxZXWbnHy90371657 = -454729552;    long tYiFoAQPQRbXZxDMkxZXWbnHy24043114 = -336239857;    long tYiFoAQPQRbXZxDMkxZXWbnHy89711046 = -867725825;    long tYiFoAQPQRbXZxDMkxZXWbnHy67702458 = -654346085;    long tYiFoAQPQRbXZxDMkxZXWbnHy77799676 = -925287335;    long tYiFoAQPQRbXZxDMkxZXWbnHy53374356 = -900091548;    long tYiFoAQPQRbXZxDMkxZXWbnHy25372238 = -170174253;    long tYiFoAQPQRbXZxDMkxZXWbnHy28526505 = -940315928;    long tYiFoAQPQRbXZxDMkxZXWbnHy28638127 = -410288648;    long tYiFoAQPQRbXZxDMkxZXWbnHy43689651 = 789580;    long tYiFoAQPQRbXZxDMkxZXWbnHy4470064 = -317816471;    long tYiFoAQPQRbXZxDMkxZXWbnHy83055197 = -449818233;    long tYiFoAQPQRbXZxDMkxZXWbnHy87339537 = -760618651;    long tYiFoAQPQRbXZxDMkxZXWbnHy50192498 = -758652318;    long tYiFoAQPQRbXZxDMkxZXWbnHy7722572 = -469879052;    long tYiFoAQPQRbXZxDMkxZXWbnHy25058384 = -338647658;    long tYiFoAQPQRbXZxDMkxZXWbnHy19984281 = -852371879;    long tYiFoAQPQRbXZxDMkxZXWbnHy11490758 = -670716551;    long tYiFoAQPQRbXZxDMkxZXWbnHy85414500 = -913791860;    long tYiFoAQPQRbXZxDMkxZXWbnHy97841795 = -562709174;    long tYiFoAQPQRbXZxDMkxZXWbnHy31129237 = -917072635;    long tYiFoAQPQRbXZxDMkxZXWbnHy90565283 = 5254689;    long tYiFoAQPQRbXZxDMkxZXWbnHy57164083 = 1584819;    long tYiFoAQPQRbXZxDMkxZXWbnHy78289198 = 67517337;    long tYiFoAQPQRbXZxDMkxZXWbnHy10100742 = -437439840;    long tYiFoAQPQRbXZxDMkxZXWbnHy91816174 = -922963915;    long tYiFoAQPQRbXZxDMkxZXWbnHy14496460 = -646433716;    long tYiFoAQPQRbXZxDMkxZXWbnHy69683635 = -675416934;    long tYiFoAQPQRbXZxDMkxZXWbnHy7851807 = 83235988;    long tYiFoAQPQRbXZxDMkxZXWbnHy63573043 = -999650136;    long tYiFoAQPQRbXZxDMkxZXWbnHy28441024 = -14020414;    long tYiFoAQPQRbXZxDMkxZXWbnHy62431669 = -449129020;    long tYiFoAQPQRbXZxDMkxZXWbnHy58185515 = 9905129;    long tYiFoAQPQRbXZxDMkxZXWbnHy93655883 = -526240871;    long tYiFoAQPQRbXZxDMkxZXWbnHy26475921 = -52999248;    long tYiFoAQPQRbXZxDMkxZXWbnHy11729885 = -148062567;    long tYiFoAQPQRbXZxDMkxZXWbnHy14738476 = -265969648;    long tYiFoAQPQRbXZxDMkxZXWbnHy22721804 = -880707401;    long tYiFoAQPQRbXZxDMkxZXWbnHy33983355 = -76574443;    long tYiFoAQPQRbXZxDMkxZXWbnHy62908199 = -470400673;    long tYiFoAQPQRbXZxDMkxZXWbnHy26749297 = -999381675;    long tYiFoAQPQRbXZxDMkxZXWbnHy31084713 = -680189097;    long tYiFoAQPQRbXZxDMkxZXWbnHy52775593 = -121399532;    long tYiFoAQPQRbXZxDMkxZXWbnHy40301577 = -871854204;    long tYiFoAQPQRbXZxDMkxZXWbnHy88629290 = -288818521;    long tYiFoAQPQRbXZxDMkxZXWbnHy74439723 = 43177627;    long tYiFoAQPQRbXZxDMkxZXWbnHy54025485 = -102898447;    long tYiFoAQPQRbXZxDMkxZXWbnHy35741502 = -525026723;    long tYiFoAQPQRbXZxDMkxZXWbnHy27415770 = 97877424;    long tYiFoAQPQRbXZxDMkxZXWbnHy17111969 = -297019020;    long tYiFoAQPQRbXZxDMkxZXWbnHy6345064 = -365960497;    long tYiFoAQPQRbXZxDMkxZXWbnHy52946108 = -114773277;    long tYiFoAQPQRbXZxDMkxZXWbnHy27932126 = -121392535;    long tYiFoAQPQRbXZxDMkxZXWbnHy24702622 = -61708386;    long tYiFoAQPQRbXZxDMkxZXWbnHy91025394 = -570427514;    long tYiFoAQPQRbXZxDMkxZXWbnHy99806374 = -359984241;    long tYiFoAQPQRbXZxDMkxZXWbnHy66879031 = -237824676;    long tYiFoAQPQRbXZxDMkxZXWbnHy11421849 = -835243163;    long tYiFoAQPQRbXZxDMkxZXWbnHy57601717 = -116906246;    long tYiFoAQPQRbXZxDMkxZXWbnHy85983502 = 97676580;    long tYiFoAQPQRbXZxDMkxZXWbnHy38877897 = -153657833;    long tYiFoAQPQRbXZxDMkxZXWbnHy55688603 = -494757319;    long tYiFoAQPQRbXZxDMkxZXWbnHy20674698 = -923551917;    long tYiFoAQPQRbXZxDMkxZXWbnHy65065084 = -410638512;    long tYiFoAQPQRbXZxDMkxZXWbnHy15248628 = -985190007;    long tYiFoAQPQRbXZxDMkxZXWbnHy42038395 = -868687452;    long tYiFoAQPQRbXZxDMkxZXWbnHy24869683 = -359723363;    long tYiFoAQPQRbXZxDMkxZXWbnHy93683654 = -134377780;    long tYiFoAQPQRbXZxDMkxZXWbnHy23716577 = -605653070;    long tYiFoAQPQRbXZxDMkxZXWbnHy95992686 = -221816485;    long tYiFoAQPQRbXZxDMkxZXWbnHy10319908 = 27321990;    long tYiFoAQPQRbXZxDMkxZXWbnHy97262476 = -971664479;    long tYiFoAQPQRbXZxDMkxZXWbnHy77507403 = -494142108;    long tYiFoAQPQRbXZxDMkxZXWbnHy22506301 = -343391188;    long tYiFoAQPQRbXZxDMkxZXWbnHy71092499 = -563327499;    long tYiFoAQPQRbXZxDMkxZXWbnHy44524 = -136883538;    long tYiFoAQPQRbXZxDMkxZXWbnHy37789690 = -873345780;    long tYiFoAQPQRbXZxDMkxZXWbnHy16862507 = -126560978;    long tYiFoAQPQRbXZxDMkxZXWbnHy89659907 = -643664142;    long tYiFoAQPQRbXZxDMkxZXWbnHy35661018 = -380617467;    long tYiFoAQPQRbXZxDMkxZXWbnHy37790689 = -720065469;    long tYiFoAQPQRbXZxDMkxZXWbnHy78754957 = -21406993;    long tYiFoAQPQRbXZxDMkxZXWbnHy42267865 = -673294359;    long tYiFoAQPQRbXZxDMkxZXWbnHy90739838 = -619744992;    long tYiFoAQPQRbXZxDMkxZXWbnHy57227980 = -533689640;    long tYiFoAQPQRbXZxDMkxZXWbnHy75494915 = -899247137;    long tYiFoAQPQRbXZxDMkxZXWbnHy34499543 = -227736485;    long tYiFoAQPQRbXZxDMkxZXWbnHy33482893 = -928386486;    long tYiFoAQPQRbXZxDMkxZXWbnHy2630489 = -955813358;    long tYiFoAQPQRbXZxDMkxZXWbnHy26669547 = -693015008;    long tYiFoAQPQRbXZxDMkxZXWbnHy44850854 = -910237891;    long tYiFoAQPQRbXZxDMkxZXWbnHy3316628 = -430726486;    long tYiFoAQPQRbXZxDMkxZXWbnHy65120087 = -663801156;    long tYiFoAQPQRbXZxDMkxZXWbnHy47999852 = -74251024;    long tYiFoAQPQRbXZxDMkxZXWbnHy24030302 = -216742840;    long tYiFoAQPQRbXZxDMkxZXWbnHy71060693 = -404624356;    long tYiFoAQPQRbXZxDMkxZXWbnHy10410016 = -35184394;     tYiFoAQPQRbXZxDMkxZXWbnHy13346627 = tYiFoAQPQRbXZxDMkxZXWbnHy22544418;     tYiFoAQPQRbXZxDMkxZXWbnHy22544418 = tYiFoAQPQRbXZxDMkxZXWbnHy22154632;     tYiFoAQPQRbXZxDMkxZXWbnHy22154632 = tYiFoAQPQRbXZxDMkxZXWbnHy90371657;     tYiFoAQPQRbXZxDMkxZXWbnHy90371657 = tYiFoAQPQRbXZxDMkxZXWbnHy24043114;     tYiFoAQPQRbXZxDMkxZXWbnHy24043114 = tYiFoAQPQRbXZxDMkxZXWbnHy89711046;     tYiFoAQPQRbXZxDMkxZXWbnHy89711046 = tYiFoAQPQRbXZxDMkxZXWbnHy67702458;     tYiFoAQPQRbXZxDMkxZXWbnHy67702458 = tYiFoAQPQRbXZxDMkxZXWbnHy77799676;     tYiFoAQPQRbXZxDMkxZXWbnHy77799676 = tYiFoAQPQRbXZxDMkxZXWbnHy53374356;     tYiFoAQPQRbXZxDMkxZXWbnHy53374356 = tYiFoAQPQRbXZxDMkxZXWbnHy25372238;     tYiFoAQPQRbXZxDMkxZXWbnHy25372238 = tYiFoAQPQRbXZxDMkxZXWbnHy28526505;     tYiFoAQPQRbXZxDMkxZXWbnHy28526505 = tYiFoAQPQRbXZxDMkxZXWbnHy28638127;     tYiFoAQPQRbXZxDMkxZXWbnHy28638127 = tYiFoAQPQRbXZxDMkxZXWbnHy43689651;     tYiFoAQPQRbXZxDMkxZXWbnHy43689651 = tYiFoAQPQRbXZxDMkxZXWbnHy4470064;     tYiFoAQPQRbXZxDMkxZXWbnHy4470064 = tYiFoAQPQRbXZxDMkxZXWbnHy83055197;     tYiFoAQPQRbXZxDMkxZXWbnHy83055197 = tYiFoAQPQRbXZxDMkxZXWbnHy87339537;     tYiFoAQPQRbXZxDMkxZXWbnHy87339537 = tYiFoAQPQRbXZxDMkxZXWbnHy50192498;     tYiFoAQPQRbXZxDMkxZXWbnHy50192498 = tYiFoAQPQRbXZxDMkxZXWbnHy7722572;     tYiFoAQPQRbXZxDMkxZXWbnHy7722572 = tYiFoAQPQRbXZxDMkxZXWbnHy25058384;     tYiFoAQPQRbXZxDMkxZXWbnHy25058384 = tYiFoAQPQRbXZxDMkxZXWbnHy19984281;     tYiFoAQPQRbXZxDMkxZXWbnHy19984281 = tYiFoAQPQRbXZxDMkxZXWbnHy11490758;     tYiFoAQPQRbXZxDMkxZXWbnHy11490758 = tYiFoAQPQRbXZxDMkxZXWbnHy85414500;     tYiFoAQPQRbXZxDMkxZXWbnHy85414500 = tYiFoAQPQRbXZxDMkxZXWbnHy97841795;     tYiFoAQPQRbXZxDMkxZXWbnHy97841795 = tYiFoAQPQRbXZxDMkxZXWbnHy31129237;     tYiFoAQPQRbXZxDMkxZXWbnHy31129237 = tYiFoAQPQRbXZxDMkxZXWbnHy90565283;     tYiFoAQPQRbXZxDMkxZXWbnHy90565283 = tYiFoAQPQRbXZxDMkxZXWbnHy57164083;     tYiFoAQPQRbXZxDMkxZXWbnHy57164083 = tYiFoAQPQRbXZxDMkxZXWbnHy78289198;     tYiFoAQPQRbXZxDMkxZXWbnHy78289198 = tYiFoAQPQRbXZxDMkxZXWbnHy10100742;     tYiFoAQPQRbXZxDMkxZXWbnHy10100742 = tYiFoAQPQRbXZxDMkxZXWbnHy91816174;     tYiFoAQPQRbXZxDMkxZXWbnHy91816174 = tYiFoAQPQRbXZxDMkxZXWbnHy14496460;     tYiFoAQPQRbXZxDMkxZXWbnHy14496460 = tYiFoAQPQRbXZxDMkxZXWbnHy69683635;     tYiFoAQPQRbXZxDMkxZXWbnHy69683635 = tYiFoAQPQRbXZxDMkxZXWbnHy7851807;     tYiFoAQPQRbXZxDMkxZXWbnHy7851807 = tYiFoAQPQRbXZxDMkxZXWbnHy63573043;     tYiFoAQPQRbXZxDMkxZXWbnHy63573043 = tYiFoAQPQRbXZxDMkxZXWbnHy28441024;     tYiFoAQPQRbXZxDMkxZXWbnHy28441024 = tYiFoAQPQRbXZxDMkxZXWbnHy62431669;     tYiFoAQPQRbXZxDMkxZXWbnHy62431669 = tYiFoAQPQRbXZxDMkxZXWbnHy58185515;     tYiFoAQPQRbXZxDMkxZXWbnHy58185515 = tYiFoAQPQRbXZxDMkxZXWbnHy93655883;     tYiFoAQPQRbXZxDMkxZXWbnHy93655883 = tYiFoAQPQRbXZxDMkxZXWbnHy26475921;     tYiFoAQPQRbXZxDMkxZXWbnHy26475921 = tYiFoAQPQRbXZxDMkxZXWbnHy11729885;     tYiFoAQPQRbXZxDMkxZXWbnHy11729885 = tYiFoAQPQRbXZxDMkxZXWbnHy14738476;     tYiFoAQPQRbXZxDMkxZXWbnHy14738476 = tYiFoAQPQRbXZxDMkxZXWbnHy22721804;     tYiFoAQPQRbXZxDMkxZXWbnHy22721804 = tYiFoAQPQRbXZxDMkxZXWbnHy33983355;     tYiFoAQPQRbXZxDMkxZXWbnHy33983355 = tYiFoAQPQRbXZxDMkxZXWbnHy62908199;     tYiFoAQPQRbXZxDMkxZXWbnHy62908199 = tYiFoAQPQRbXZxDMkxZXWbnHy26749297;     tYiFoAQPQRbXZxDMkxZXWbnHy26749297 = tYiFoAQPQRbXZxDMkxZXWbnHy31084713;     tYiFoAQPQRbXZxDMkxZXWbnHy31084713 = tYiFoAQPQRbXZxDMkxZXWbnHy52775593;     tYiFoAQPQRbXZxDMkxZXWbnHy52775593 = tYiFoAQPQRbXZxDMkxZXWbnHy40301577;     tYiFoAQPQRbXZxDMkxZXWbnHy40301577 = tYiFoAQPQRbXZxDMkxZXWbnHy88629290;     tYiFoAQPQRbXZxDMkxZXWbnHy88629290 = tYiFoAQPQRbXZxDMkxZXWbnHy74439723;     tYiFoAQPQRbXZxDMkxZXWbnHy74439723 = tYiFoAQPQRbXZxDMkxZXWbnHy54025485;     tYiFoAQPQRbXZxDMkxZXWbnHy54025485 = tYiFoAQPQRbXZxDMkxZXWbnHy35741502;     tYiFoAQPQRbXZxDMkxZXWbnHy35741502 = tYiFoAQPQRbXZxDMkxZXWbnHy27415770;     tYiFoAQPQRbXZxDMkxZXWbnHy27415770 = tYiFoAQPQRbXZxDMkxZXWbnHy17111969;     tYiFoAQPQRbXZxDMkxZXWbnHy17111969 = tYiFoAQPQRbXZxDMkxZXWbnHy6345064;     tYiFoAQPQRbXZxDMkxZXWbnHy6345064 = tYiFoAQPQRbXZxDMkxZXWbnHy52946108;     tYiFoAQPQRbXZxDMkxZXWbnHy52946108 = tYiFoAQPQRbXZxDMkxZXWbnHy27932126;     tYiFoAQPQRbXZxDMkxZXWbnHy27932126 = tYiFoAQPQRbXZxDMkxZXWbnHy24702622;     tYiFoAQPQRbXZxDMkxZXWbnHy24702622 = tYiFoAQPQRbXZxDMkxZXWbnHy91025394;     tYiFoAQPQRbXZxDMkxZXWbnHy91025394 = tYiFoAQPQRbXZxDMkxZXWbnHy99806374;     tYiFoAQPQRbXZxDMkxZXWbnHy99806374 = tYiFoAQPQRbXZxDMkxZXWbnHy66879031;     tYiFoAQPQRbXZxDMkxZXWbnHy66879031 = tYiFoAQPQRbXZxDMkxZXWbnHy11421849;     tYiFoAQPQRbXZxDMkxZXWbnHy11421849 = tYiFoAQPQRbXZxDMkxZXWbnHy57601717;     tYiFoAQPQRbXZxDMkxZXWbnHy57601717 = tYiFoAQPQRbXZxDMkxZXWbnHy85983502;     tYiFoAQPQRbXZxDMkxZXWbnHy85983502 = tYiFoAQPQRbXZxDMkxZXWbnHy38877897;     tYiFoAQPQRbXZxDMkxZXWbnHy38877897 = tYiFoAQPQRbXZxDMkxZXWbnHy55688603;     tYiFoAQPQRbXZxDMkxZXWbnHy55688603 = tYiFoAQPQRbXZxDMkxZXWbnHy20674698;     tYiFoAQPQRbXZxDMkxZXWbnHy20674698 = tYiFoAQPQRbXZxDMkxZXWbnHy65065084;     tYiFoAQPQRbXZxDMkxZXWbnHy65065084 = tYiFoAQPQRbXZxDMkxZXWbnHy15248628;     tYiFoAQPQRbXZxDMkxZXWbnHy15248628 = tYiFoAQPQRbXZxDMkxZXWbnHy42038395;     tYiFoAQPQRbXZxDMkxZXWbnHy42038395 = tYiFoAQPQRbXZxDMkxZXWbnHy24869683;     tYiFoAQPQRbXZxDMkxZXWbnHy24869683 = tYiFoAQPQRbXZxDMkxZXWbnHy93683654;     tYiFoAQPQRbXZxDMkxZXWbnHy93683654 = tYiFoAQPQRbXZxDMkxZXWbnHy23716577;     tYiFoAQPQRbXZxDMkxZXWbnHy23716577 = tYiFoAQPQRbXZxDMkxZXWbnHy95992686;     tYiFoAQPQRbXZxDMkxZXWbnHy95992686 = tYiFoAQPQRbXZxDMkxZXWbnHy10319908;     tYiFoAQPQRbXZxDMkxZXWbnHy10319908 = tYiFoAQPQRbXZxDMkxZXWbnHy97262476;     tYiFoAQPQRbXZxDMkxZXWbnHy97262476 = tYiFoAQPQRbXZxDMkxZXWbnHy77507403;     tYiFoAQPQRbXZxDMkxZXWbnHy77507403 = tYiFoAQPQRbXZxDMkxZXWbnHy22506301;     tYiFoAQPQRbXZxDMkxZXWbnHy22506301 = tYiFoAQPQRbXZxDMkxZXWbnHy71092499;     tYiFoAQPQRbXZxDMkxZXWbnHy71092499 = tYiFoAQPQRbXZxDMkxZXWbnHy44524;     tYiFoAQPQRbXZxDMkxZXWbnHy44524 = tYiFoAQPQRbXZxDMkxZXWbnHy37789690;     tYiFoAQPQRbXZxDMkxZXWbnHy37789690 = tYiFoAQPQRbXZxDMkxZXWbnHy16862507;     tYiFoAQPQRbXZxDMkxZXWbnHy16862507 = tYiFoAQPQRbXZxDMkxZXWbnHy89659907;     tYiFoAQPQRbXZxDMkxZXWbnHy89659907 = tYiFoAQPQRbXZxDMkxZXWbnHy35661018;     tYiFoAQPQRbXZxDMkxZXWbnHy35661018 = tYiFoAQPQRbXZxDMkxZXWbnHy37790689;     tYiFoAQPQRbXZxDMkxZXWbnHy37790689 = tYiFoAQPQRbXZxDMkxZXWbnHy78754957;     tYiFoAQPQRbXZxDMkxZXWbnHy78754957 = tYiFoAQPQRbXZxDMkxZXWbnHy42267865;     tYiFoAQPQRbXZxDMkxZXWbnHy42267865 = tYiFoAQPQRbXZxDMkxZXWbnHy90739838;     tYiFoAQPQRbXZxDMkxZXWbnHy90739838 = tYiFoAQPQRbXZxDMkxZXWbnHy57227980;     tYiFoAQPQRbXZxDMkxZXWbnHy57227980 = tYiFoAQPQRbXZxDMkxZXWbnHy75494915;     tYiFoAQPQRbXZxDMkxZXWbnHy75494915 = tYiFoAQPQRbXZxDMkxZXWbnHy34499543;     tYiFoAQPQRbXZxDMkxZXWbnHy34499543 = tYiFoAQPQRbXZxDMkxZXWbnHy33482893;     tYiFoAQPQRbXZxDMkxZXWbnHy33482893 = tYiFoAQPQRbXZxDMkxZXWbnHy2630489;     tYiFoAQPQRbXZxDMkxZXWbnHy2630489 = tYiFoAQPQRbXZxDMkxZXWbnHy26669547;     tYiFoAQPQRbXZxDMkxZXWbnHy26669547 = tYiFoAQPQRbXZxDMkxZXWbnHy44850854;     tYiFoAQPQRbXZxDMkxZXWbnHy44850854 = tYiFoAQPQRbXZxDMkxZXWbnHy3316628;     tYiFoAQPQRbXZxDMkxZXWbnHy3316628 = tYiFoAQPQRbXZxDMkxZXWbnHy65120087;     tYiFoAQPQRbXZxDMkxZXWbnHy65120087 = tYiFoAQPQRbXZxDMkxZXWbnHy47999852;     tYiFoAQPQRbXZxDMkxZXWbnHy47999852 = tYiFoAQPQRbXZxDMkxZXWbnHy24030302;     tYiFoAQPQRbXZxDMkxZXWbnHy24030302 = tYiFoAQPQRbXZxDMkxZXWbnHy71060693;     tYiFoAQPQRbXZxDMkxZXWbnHy71060693 = tYiFoAQPQRbXZxDMkxZXWbnHy10410016;     tYiFoAQPQRbXZxDMkxZXWbnHy10410016 = tYiFoAQPQRbXZxDMkxZXWbnHy13346627;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gBBrKkJowELLWQoYgdaGauJzEiKAaDTuMCdvufdtNoVrkaEcRnqapTAms31728465() {     long CmcaJNskRzTmseBzhslYSOedh48805595 = -501461294;    long CmcaJNskRzTmseBzhslYSOedh35816496 = -604969165;    long CmcaJNskRzTmseBzhslYSOedh59541108 = -153167223;    long CmcaJNskRzTmseBzhslYSOedh62595012 = -275880623;    long CmcaJNskRzTmseBzhslYSOedh80328383 = -441838702;    long CmcaJNskRzTmseBzhslYSOedh25933919 = -30073720;    long CmcaJNskRzTmseBzhslYSOedh78359865 = -499071820;    long CmcaJNskRzTmseBzhslYSOedh39931238 = -569521475;    long CmcaJNskRzTmseBzhslYSOedh54891962 = -288422955;    long CmcaJNskRzTmseBzhslYSOedh40274950 = -934861251;    long CmcaJNskRzTmseBzhslYSOedh66708239 = -742323658;    long CmcaJNskRzTmseBzhslYSOedh29206276 = -274409420;    long CmcaJNskRzTmseBzhslYSOedh81924296 = -551222925;    long CmcaJNskRzTmseBzhslYSOedh57610927 = -294179880;    long CmcaJNskRzTmseBzhslYSOedh41249714 = -953243248;    long CmcaJNskRzTmseBzhslYSOedh70880838 = -396430258;    long CmcaJNskRzTmseBzhslYSOedh6028434 = -185626870;    long CmcaJNskRzTmseBzhslYSOedh7482764 = -543307121;    long CmcaJNskRzTmseBzhslYSOedh25608714 = -655211079;    long CmcaJNskRzTmseBzhslYSOedh13821500 = -178932945;    long CmcaJNskRzTmseBzhslYSOedh24577621 = -327991240;    long CmcaJNskRzTmseBzhslYSOedh88836025 = 99571846;    long CmcaJNskRzTmseBzhslYSOedh68367175 = -200341358;    long CmcaJNskRzTmseBzhslYSOedh24922182 = -327897239;    long CmcaJNskRzTmseBzhslYSOedh98583234 = -18730510;    long CmcaJNskRzTmseBzhslYSOedh67862255 = -786991988;    long CmcaJNskRzTmseBzhslYSOedh38709772 = -838766804;    long CmcaJNskRzTmseBzhslYSOedh50829167 = -607212015;    long CmcaJNskRzTmseBzhslYSOedh38484389 = -397058718;    long CmcaJNskRzTmseBzhslYSOedh20029870 = -680940886;    long CmcaJNskRzTmseBzhslYSOedh88266866 = -127397421;    long CmcaJNskRzTmseBzhslYSOedh45674826 = -789735426;    long CmcaJNskRzTmseBzhslYSOedh75791054 = -47246114;    long CmcaJNskRzTmseBzhslYSOedh58189450 = -78714227;    long CmcaJNskRzTmseBzhslYSOedh28240123 = -400229270;    long CmcaJNskRzTmseBzhslYSOedh9746359 = -204660177;    long CmcaJNskRzTmseBzhslYSOedh43067700 = -390936911;    long CmcaJNskRzTmseBzhslYSOedh77691324 = -35654829;    long CmcaJNskRzTmseBzhslYSOedh42120446 = -898938844;    long CmcaJNskRzTmseBzhslYSOedh79010008 = -831232194;    long CmcaJNskRzTmseBzhslYSOedh56173412 = -649906315;    long CmcaJNskRzTmseBzhslYSOedh23348481 = -771119734;    long CmcaJNskRzTmseBzhslYSOedh52291578 = -23581459;    long CmcaJNskRzTmseBzhslYSOedh66880634 = -503714085;    long CmcaJNskRzTmseBzhslYSOedh31101172 = -506700258;    long CmcaJNskRzTmseBzhslYSOedh98736921 = -160323164;    long CmcaJNskRzTmseBzhslYSOedh59646740 = -255840564;    long CmcaJNskRzTmseBzhslYSOedh6355603 = -455345114;    long CmcaJNskRzTmseBzhslYSOedh97332389 = -720559253;    long CmcaJNskRzTmseBzhslYSOedh78555074 = -593925263;    long CmcaJNskRzTmseBzhslYSOedh16512226 = -399303280;    long CmcaJNskRzTmseBzhslYSOedh10901243 = -115774922;    long CmcaJNskRzTmseBzhslYSOedh85733117 = -53064574;    long CmcaJNskRzTmseBzhslYSOedh22336910 = -557468997;    long CmcaJNskRzTmseBzhslYSOedh7150845 = -461263423;    long CmcaJNskRzTmseBzhslYSOedh59969569 = -501033140;    long CmcaJNskRzTmseBzhslYSOedh67449320 = -304627808;    long CmcaJNskRzTmseBzhslYSOedh34618926 = -825269985;    long CmcaJNskRzTmseBzhslYSOedh64011778 = -157150114;    long CmcaJNskRzTmseBzhslYSOedh12466129 = -654846715;    long CmcaJNskRzTmseBzhslYSOedh87224146 = -191306917;    long CmcaJNskRzTmseBzhslYSOedh27530698 = -891859805;    long CmcaJNskRzTmseBzhslYSOedh1446849 = -72462758;    long CmcaJNskRzTmseBzhslYSOedh34862092 = -607482070;    long CmcaJNskRzTmseBzhslYSOedh52008084 = -707463830;    long CmcaJNskRzTmseBzhslYSOedh21033414 = -952588232;    long CmcaJNskRzTmseBzhslYSOedh53415221 = -127163307;    long CmcaJNskRzTmseBzhslYSOedh23734846 = -372508698;    long CmcaJNskRzTmseBzhslYSOedh29370804 = -893950610;    long CmcaJNskRzTmseBzhslYSOedh31503355 = -648583072;    long CmcaJNskRzTmseBzhslYSOedh27813139 = 94506653;    long CmcaJNskRzTmseBzhslYSOedh28337110 = -49972042;    long CmcaJNskRzTmseBzhslYSOedh65362317 = -644368277;    long CmcaJNskRzTmseBzhslYSOedh46598706 = -823978886;    long CmcaJNskRzTmseBzhslYSOedh57648088 = -529026630;    long CmcaJNskRzTmseBzhslYSOedh1229140 = -556871506;    long CmcaJNskRzTmseBzhslYSOedh36544448 = -876846696;    long CmcaJNskRzTmseBzhslYSOedh1486541 = -696627274;    long CmcaJNskRzTmseBzhslYSOedh93821010 = -821196981;    long CmcaJNskRzTmseBzhslYSOedh99846312 = -858407346;    long CmcaJNskRzTmseBzhslYSOedh8215515 = -431151424;    long CmcaJNskRzTmseBzhslYSOedh32354170 = -283421690;    long CmcaJNskRzTmseBzhslYSOedh53496777 = -886652762;    long CmcaJNskRzTmseBzhslYSOedh59929314 = -803133456;    long CmcaJNskRzTmseBzhslYSOedh3517645 = -181637606;    long CmcaJNskRzTmseBzhslYSOedh77365624 = 88377501;    long CmcaJNskRzTmseBzhslYSOedh59941708 = -636670853;    long CmcaJNskRzTmseBzhslYSOedh53454144 = -489777118;    long CmcaJNskRzTmseBzhslYSOedh51038606 = -617450805;    long CmcaJNskRzTmseBzhslYSOedh68270553 = -899196130;    long CmcaJNskRzTmseBzhslYSOedh42297038 = -900032369;    long CmcaJNskRzTmseBzhslYSOedh8448774 = -565666927;    long CmcaJNskRzTmseBzhslYSOedh13679546 = -878504716;    long CmcaJNskRzTmseBzhslYSOedh29654318 = -144092129;    long CmcaJNskRzTmseBzhslYSOedh91785861 = -539925277;    long CmcaJNskRzTmseBzhslYSOedh28642714 = -758046510;    long CmcaJNskRzTmseBzhslYSOedh21901633 = -598656977;    long CmcaJNskRzTmseBzhslYSOedh17429486 = -416099389;    long CmcaJNskRzTmseBzhslYSOedh14872551 = -796250255;    long CmcaJNskRzTmseBzhslYSOedh10067758 = -501461294;     CmcaJNskRzTmseBzhslYSOedh48805595 = CmcaJNskRzTmseBzhslYSOedh35816496;     CmcaJNskRzTmseBzhslYSOedh35816496 = CmcaJNskRzTmseBzhslYSOedh59541108;     CmcaJNskRzTmseBzhslYSOedh59541108 = CmcaJNskRzTmseBzhslYSOedh62595012;     CmcaJNskRzTmseBzhslYSOedh62595012 = CmcaJNskRzTmseBzhslYSOedh80328383;     CmcaJNskRzTmseBzhslYSOedh80328383 = CmcaJNskRzTmseBzhslYSOedh25933919;     CmcaJNskRzTmseBzhslYSOedh25933919 = CmcaJNskRzTmseBzhslYSOedh78359865;     CmcaJNskRzTmseBzhslYSOedh78359865 = CmcaJNskRzTmseBzhslYSOedh39931238;     CmcaJNskRzTmseBzhslYSOedh39931238 = CmcaJNskRzTmseBzhslYSOedh54891962;     CmcaJNskRzTmseBzhslYSOedh54891962 = CmcaJNskRzTmseBzhslYSOedh40274950;     CmcaJNskRzTmseBzhslYSOedh40274950 = CmcaJNskRzTmseBzhslYSOedh66708239;     CmcaJNskRzTmseBzhslYSOedh66708239 = CmcaJNskRzTmseBzhslYSOedh29206276;     CmcaJNskRzTmseBzhslYSOedh29206276 = CmcaJNskRzTmseBzhslYSOedh81924296;     CmcaJNskRzTmseBzhslYSOedh81924296 = CmcaJNskRzTmseBzhslYSOedh57610927;     CmcaJNskRzTmseBzhslYSOedh57610927 = CmcaJNskRzTmseBzhslYSOedh41249714;     CmcaJNskRzTmseBzhslYSOedh41249714 = CmcaJNskRzTmseBzhslYSOedh70880838;     CmcaJNskRzTmseBzhslYSOedh70880838 = CmcaJNskRzTmseBzhslYSOedh6028434;     CmcaJNskRzTmseBzhslYSOedh6028434 = CmcaJNskRzTmseBzhslYSOedh7482764;     CmcaJNskRzTmseBzhslYSOedh7482764 = CmcaJNskRzTmseBzhslYSOedh25608714;     CmcaJNskRzTmseBzhslYSOedh25608714 = CmcaJNskRzTmseBzhslYSOedh13821500;     CmcaJNskRzTmseBzhslYSOedh13821500 = CmcaJNskRzTmseBzhslYSOedh24577621;     CmcaJNskRzTmseBzhslYSOedh24577621 = CmcaJNskRzTmseBzhslYSOedh88836025;     CmcaJNskRzTmseBzhslYSOedh88836025 = CmcaJNskRzTmseBzhslYSOedh68367175;     CmcaJNskRzTmseBzhslYSOedh68367175 = CmcaJNskRzTmseBzhslYSOedh24922182;     CmcaJNskRzTmseBzhslYSOedh24922182 = CmcaJNskRzTmseBzhslYSOedh98583234;     CmcaJNskRzTmseBzhslYSOedh98583234 = CmcaJNskRzTmseBzhslYSOedh67862255;     CmcaJNskRzTmseBzhslYSOedh67862255 = CmcaJNskRzTmseBzhslYSOedh38709772;     CmcaJNskRzTmseBzhslYSOedh38709772 = CmcaJNskRzTmseBzhslYSOedh50829167;     CmcaJNskRzTmseBzhslYSOedh50829167 = CmcaJNskRzTmseBzhslYSOedh38484389;     CmcaJNskRzTmseBzhslYSOedh38484389 = CmcaJNskRzTmseBzhslYSOedh20029870;     CmcaJNskRzTmseBzhslYSOedh20029870 = CmcaJNskRzTmseBzhslYSOedh88266866;     CmcaJNskRzTmseBzhslYSOedh88266866 = CmcaJNskRzTmseBzhslYSOedh45674826;     CmcaJNskRzTmseBzhslYSOedh45674826 = CmcaJNskRzTmseBzhslYSOedh75791054;     CmcaJNskRzTmseBzhslYSOedh75791054 = CmcaJNskRzTmseBzhslYSOedh58189450;     CmcaJNskRzTmseBzhslYSOedh58189450 = CmcaJNskRzTmseBzhslYSOedh28240123;     CmcaJNskRzTmseBzhslYSOedh28240123 = CmcaJNskRzTmseBzhslYSOedh9746359;     CmcaJNskRzTmseBzhslYSOedh9746359 = CmcaJNskRzTmseBzhslYSOedh43067700;     CmcaJNskRzTmseBzhslYSOedh43067700 = CmcaJNskRzTmseBzhslYSOedh77691324;     CmcaJNskRzTmseBzhslYSOedh77691324 = CmcaJNskRzTmseBzhslYSOedh42120446;     CmcaJNskRzTmseBzhslYSOedh42120446 = CmcaJNskRzTmseBzhslYSOedh79010008;     CmcaJNskRzTmseBzhslYSOedh79010008 = CmcaJNskRzTmseBzhslYSOedh56173412;     CmcaJNskRzTmseBzhslYSOedh56173412 = CmcaJNskRzTmseBzhslYSOedh23348481;     CmcaJNskRzTmseBzhslYSOedh23348481 = CmcaJNskRzTmseBzhslYSOedh52291578;     CmcaJNskRzTmseBzhslYSOedh52291578 = CmcaJNskRzTmseBzhslYSOedh66880634;     CmcaJNskRzTmseBzhslYSOedh66880634 = CmcaJNskRzTmseBzhslYSOedh31101172;     CmcaJNskRzTmseBzhslYSOedh31101172 = CmcaJNskRzTmseBzhslYSOedh98736921;     CmcaJNskRzTmseBzhslYSOedh98736921 = CmcaJNskRzTmseBzhslYSOedh59646740;     CmcaJNskRzTmseBzhslYSOedh59646740 = CmcaJNskRzTmseBzhslYSOedh6355603;     CmcaJNskRzTmseBzhslYSOedh6355603 = CmcaJNskRzTmseBzhslYSOedh97332389;     CmcaJNskRzTmseBzhslYSOedh97332389 = CmcaJNskRzTmseBzhslYSOedh78555074;     CmcaJNskRzTmseBzhslYSOedh78555074 = CmcaJNskRzTmseBzhslYSOedh16512226;     CmcaJNskRzTmseBzhslYSOedh16512226 = CmcaJNskRzTmseBzhslYSOedh10901243;     CmcaJNskRzTmseBzhslYSOedh10901243 = CmcaJNskRzTmseBzhslYSOedh85733117;     CmcaJNskRzTmseBzhslYSOedh85733117 = CmcaJNskRzTmseBzhslYSOedh22336910;     CmcaJNskRzTmseBzhslYSOedh22336910 = CmcaJNskRzTmseBzhslYSOedh7150845;     CmcaJNskRzTmseBzhslYSOedh7150845 = CmcaJNskRzTmseBzhslYSOedh59969569;     CmcaJNskRzTmseBzhslYSOedh59969569 = CmcaJNskRzTmseBzhslYSOedh67449320;     CmcaJNskRzTmseBzhslYSOedh67449320 = CmcaJNskRzTmseBzhslYSOedh34618926;     CmcaJNskRzTmseBzhslYSOedh34618926 = CmcaJNskRzTmseBzhslYSOedh64011778;     CmcaJNskRzTmseBzhslYSOedh64011778 = CmcaJNskRzTmseBzhslYSOedh12466129;     CmcaJNskRzTmseBzhslYSOedh12466129 = CmcaJNskRzTmseBzhslYSOedh87224146;     CmcaJNskRzTmseBzhslYSOedh87224146 = CmcaJNskRzTmseBzhslYSOedh27530698;     CmcaJNskRzTmseBzhslYSOedh27530698 = CmcaJNskRzTmseBzhslYSOedh1446849;     CmcaJNskRzTmseBzhslYSOedh1446849 = CmcaJNskRzTmseBzhslYSOedh34862092;     CmcaJNskRzTmseBzhslYSOedh34862092 = CmcaJNskRzTmseBzhslYSOedh52008084;     CmcaJNskRzTmseBzhslYSOedh52008084 = CmcaJNskRzTmseBzhslYSOedh21033414;     CmcaJNskRzTmseBzhslYSOedh21033414 = CmcaJNskRzTmseBzhslYSOedh53415221;     CmcaJNskRzTmseBzhslYSOedh53415221 = CmcaJNskRzTmseBzhslYSOedh23734846;     CmcaJNskRzTmseBzhslYSOedh23734846 = CmcaJNskRzTmseBzhslYSOedh29370804;     CmcaJNskRzTmseBzhslYSOedh29370804 = CmcaJNskRzTmseBzhslYSOedh31503355;     CmcaJNskRzTmseBzhslYSOedh31503355 = CmcaJNskRzTmseBzhslYSOedh27813139;     CmcaJNskRzTmseBzhslYSOedh27813139 = CmcaJNskRzTmseBzhslYSOedh28337110;     CmcaJNskRzTmseBzhslYSOedh28337110 = CmcaJNskRzTmseBzhslYSOedh65362317;     CmcaJNskRzTmseBzhslYSOedh65362317 = CmcaJNskRzTmseBzhslYSOedh46598706;     CmcaJNskRzTmseBzhslYSOedh46598706 = CmcaJNskRzTmseBzhslYSOedh57648088;     CmcaJNskRzTmseBzhslYSOedh57648088 = CmcaJNskRzTmseBzhslYSOedh1229140;     CmcaJNskRzTmseBzhslYSOedh1229140 = CmcaJNskRzTmseBzhslYSOedh36544448;     CmcaJNskRzTmseBzhslYSOedh36544448 = CmcaJNskRzTmseBzhslYSOedh1486541;     CmcaJNskRzTmseBzhslYSOedh1486541 = CmcaJNskRzTmseBzhslYSOedh93821010;     CmcaJNskRzTmseBzhslYSOedh93821010 = CmcaJNskRzTmseBzhslYSOedh99846312;     CmcaJNskRzTmseBzhslYSOedh99846312 = CmcaJNskRzTmseBzhslYSOedh8215515;     CmcaJNskRzTmseBzhslYSOedh8215515 = CmcaJNskRzTmseBzhslYSOedh32354170;     CmcaJNskRzTmseBzhslYSOedh32354170 = CmcaJNskRzTmseBzhslYSOedh53496777;     CmcaJNskRzTmseBzhslYSOedh53496777 = CmcaJNskRzTmseBzhslYSOedh59929314;     CmcaJNskRzTmseBzhslYSOedh59929314 = CmcaJNskRzTmseBzhslYSOedh3517645;     CmcaJNskRzTmseBzhslYSOedh3517645 = CmcaJNskRzTmseBzhslYSOedh77365624;     CmcaJNskRzTmseBzhslYSOedh77365624 = CmcaJNskRzTmseBzhslYSOedh59941708;     CmcaJNskRzTmseBzhslYSOedh59941708 = CmcaJNskRzTmseBzhslYSOedh53454144;     CmcaJNskRzTmseBzhslYSOedh53454144 = CmcaJNskRzTmseBzhslYSOedh51038606;     CmcaJNskRzTmseBzhslYSOedh51038606 = CmcaJNskRzTmseBzhslYSOedh68270553;     CmcaJNskRzTmseBzhslYSOedh68270553 = CmcaJNskRzTmseBzhslYSOedh42297038;     CmcaJNskRzTmseBzhslYSOedh42297038 = CmcaJNskRzTmseBzhslYSOedh8448774;     CmcaJNskRzTmseBzhslYSOedh8448774 = CmcaJNskRzTmseBzhslYSOedh13679546;     CmcaJNskRzTmseBzhslYSOedh13679546 = CmcaJNskRzTmseBzhslYSOedh29654318;     CmcaJNskRzTmseBzhslYSOedh29654318 = CmcaJNskRzTmseBzhslYSOedh91785861;     CmcaJNskRzTmseBzhslYSOedh91785861 = CmcaJNskRzTmseBzhslYSOedh28642714;     CmcaJNskRzTmseBzhslYSOedh28642714 = CmcaJNskRzTmseBzhslYSOedh21901633;     CmcaJNskRzTmseBzhslYSOedh21901633 = CmcaJNskRzTmseBzhslYSOedh17429486;     CmcaJNskRzTmseBzhslYSOedh17429486 = CmcaJNskRzTmseBzhslYSOedh14872551;     CmcaJNskRzTmseBzhslYSOedh14872551 = CmcaJNskRzTmseBzhslYSOedh10067758;     CmcaJNskRzTmseBzhslYSOedh10067758 = CmcaJNskRzTmseBzhslYSOedh48805595;}
// Junk Finished
